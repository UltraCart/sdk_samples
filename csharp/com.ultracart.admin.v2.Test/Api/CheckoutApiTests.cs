/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Api;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Test
{
    /// <summary>
    ///  Class for testing CheckoutApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CheckoutApiTests
    {
        private CheckoutApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CheckoutApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CheckoutApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CheckoutApi
            //Assert.IsInstanceOfType(typeof(CheckoutApi), instance, "instance is a CheckoutApi");
        }

        
        /// <summary>
        /// Test CityState
        /// </summary>
        [Test]
        public void CityStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Cart cart = null;
            //var response = instance.CityState(cart);
            //Assert.IsInstanceOf<CityStateZip> (response, "response is CityStateZip");
        }
        
        /// <summary>
        /// Test FinalizeOrder
        /// </summary>
        [Test]
        public void FinalizeOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CartFinalizeOrderRequest finalizeRequest = null;
            //var response = instance.FinalizeOrder(finalizeRequest);
            //Assert.IsInstanceOf<CartFinalizeOrderResponse> (response, "response is CartFinalizeOrderResponse");
        }
        
        /// <summary>
        /// Test GetCart
        /// </summary>
        [Test]
        public void GetCartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string expand = null;
            //var response = instance.GetCart(expand);
            //Assert.IsInstanceOf<CartResponse> (response, "response is CartResponse");
        }
        
        /// <summary>
        /// Test GetCartByCartId
        /// </summary>
        [Test]
        public void GetCartByCartIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cartId = null;
            //string expand = null;
            //var response = instance.GetCartByCartId(cartId, expand);
            //Assert.IsInstanceOf<CartResponse> (response, "response is CartResponse");
        }
        
        /// <summary>
        /// Test GetCartByReturnCode
        /// </summary>
        [Test]
        public void GetCartByReturnCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string returnCode = null;
            //string expand = null;
            //var response = instance.GetCartByReturnCode(returnCode, expand);
            //Assert.IsInstanceOf<CartResponse> (response, "response is CartResponse");
        }
        
        /// <summary>
        /// Test HandoffCart
        /// </summary>
        [Test]
        public void HandoffCartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CheckoutHandoffRequest handoffRequest = null;
            //string expand = null;
            //var response = instance.HandoffCart(handoffRequest, expand);
            //Assert.IsInstanceOf<CheckoutHandoffResponse> (response, "response is CheckoutHandoffResponse");
        }
        
        /// <summary>
        /// Test Login
        /// </summary>
        [Test]
        public void LoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CartProfileLoginRequest loginRequest = null;
            //string expand = null;
            //var response = instance.Login(loginRequest, expand);
            //Assert.IsInstanceOf<CartProfileLoginResponse> (response, "response is CartProfileLoginResponse");
        }
        
        /// <summary>
        /// Test Logout
        /// </summary>
        [Test]
        public void LogoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Cart cart = null;
            //string expand = null;
            //var response = instance.Logout(cart, expand);
            //Assert.IsInstanceOf<CartResponse> (response, "response is CartResponse");
        }
        
        /// <summary>
        /// Test Register
        /// </summary>
        [Test]
        public void RegisterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CartProfileRegisterRequest registerRequest = null;
            //string expand = null;
            //var response = instance.Register(registerRequest, expand);
            //Assert.IsInstanceOf<CartProfileRegisterResponse> (response, "response is CartProfileRegisterResponse");
        }
        
        /// <summary>
        /// Test RelatedItemsForCart
        /// </summary>
        [Test]
        public void RelatedItemsForCartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Cart cart = null;
            //string expand = null;
            //var response = instance.RelatedItemsForCart(cart, expand);
            //Assert.IsInstanceOf<ItemsResponse> (response, "response is ItemsResponse");
        }
        
        /// <summary>
        /// Test RelatedItemsForItem
        /// </summary>
        [Test]
        public void RelatedItemsForItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string itemId = null;
            //Cart cart = null;
            //string expand = null;
            //var response = instance.RelatedItemsForItem(itemId, cart, expand);
            //Assert.IsInstanceOf<ItemsResponse> (response, "response is ItemsResponse");
        }
        
        /// <summary>
        /// Test SetupBrowserKey
        /// </summary>
        [Test]
        public void SetupBrowserKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CheckoutSetupBrowserKeyRequest browserKeyRequest = null;
            //var response = instance.SetupBrowserKey(browserKeyRequest);
            //Assert.IsInstanceOf<CheckoutSetupBrowserKeyResponse> (response, "response is CheckoutSetupBrowserKeyResponse");
        }
        
        /// <summary>
        /// Test UpdateCart
        /// </summary>
        [Test]
        public void UpdateCartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Cart cart = null;
            //string expand = null;
            //var response = instance.UpdateCart(cart, expand);
            //Assert.IsInstanceOf<CartResponse> (response, "response is CartResponse");
        }
        
        /// <summary>
        /// Test ValidateCart
        /// </summary>
        [Test]
        public void ValidateCartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CartValidationRequest validationRequest = null;
            //string expand = null;
            //var response = instance.ValidateCart(validationRequest, expand);
            //Assert.IsInstanceOf<CartValidationResponse> (response, "response is CartValidationResponse");
        }
        
    }

}
