/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAffiliateApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve clicks
        /// </summary>
        /// <remarks>
        /// Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clickQuery">Click query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>AffiliateClicksResponse</returns>
        AffiliateClicksResponse GetClicksByQuery (AffiliateClickQuery clickQuery, int? limit = null, int? offset = null, string expand = null);

        /// <summary>
        /// Retrieve clicks
        /// </summary>
        /// <remarks>
        /// Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clickQuery">Click query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>ApiResponse of AffiliateClicksResponse</returns>
        ApiResponse<AffiliateClicksResponse> GetClicksByQueryWithHttpInfo (AffiliateClickQuery clickQuery, int? limit = null, int? offset = null, string expand = null);
        /// <summary>
        /// Retrieve ledger entries
        /// </summary>
        /// <remarks>
        /// Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerQuery">Ledger query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>AffiliateLedgersResponse</returns>
        AffiliateLedgersResponse GetLedgersByQuery (AffiliateLedgerQuery ledgerQuery, int? limit = null, int? offset = null, string expand = null);

        /// <summary>
        /// Retrieve ledger entries
        /// </summary>
        /// <remarks>
        /// Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerQuery">Ledger query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>ApiResponse of AffiliateLedgersResponse</returns>
        ApiResponse<AffiliateLedgersResponse> GetLedgersByQueryWithHttpInfo (AffiliateLedgerQuery ledgerQuery, int? limit = null, int? offset = null, string expand = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve clicks
        /// </summary>
        /// <remarks>
        /// Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clickQuery">Click query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>Task of AffiliateClicksResponse</returns>
        System.Threading.Tasks.Task<AffiliateClicksResponse> GetClicksByQueryAsync (AffiliateClickQuery clickQuery, int? limit = null, int? offset = null, string expand = null);

        /// <summary>
        /// Retrieve clicks
        /// </summary>
        /// <remarks>
        /// Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clickQuery">Click query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>Task of ApiResponse (AffiliateClicksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateClicksResponse>> GetClicksByQueryAsyncWithHttpInfo (AffiliateClickQuery clickQuery, int? limit = null, int? offset = null, string expand = null);
        /// <summary>
        /// Retrieve ledger entries
        /// </summary>
        /// <remarks>
        /// Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerQuery">Ledger query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>Task of AffiliateLedgersResponse</returns>
        System.Threading.Tasks.Task<AffiliateLedgersResponse> GetLedgersByQueryAsync (AffiliateLedgerQuery ledgerQuery, int? limit = null, int? offset = null, string expand = null);

        /// <summary>
        /// Retrieve ledger entries
        /// </summary>
        /// <remarks>
        /// Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerQuery">Ledger query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>Task of ApiResponse (AffiliateLedgersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateLedgersResponse>> GetLedgersByQueryAsyncWithHttpInfo (AffiliateLedgerQuery ledgerQuery, int? limit = null, int? offset = null, string expand = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AffiliateApi : IAffiliateApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AffiliateApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AffiliateApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve clicks Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clickQuery">Click query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>AffiliateClicksResponse</returns>
        public AffiliateClicksResponse GetClicksByQuery (AffiliateClickQuery clickQuery, int? limit = null, int? offset = null, string expand = null)
        {
             ApiResponse<AffiliateClicksResponse> localVarResponse = GetClicksByQueryWithHttpInfo(clickQuery, limit, offset, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve clicks Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clickQuery">Click query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>ApiResponse of AffiliateClicksResponse</returns>
        public ApiResponse< AffiliateClicksResponse > GetClicksByQueryWithHttpInfo (AffiliateClickQuery clickQuery, int? limit = null, int? offset = null, string expand = null)
        {
            // verify the required parameter 'clickQuery' is set
            if (clickQuery == null)
                throw new ApiException(400, "Missing required parameter 'clickQuery' when calling AffiliateApi->GetClicksByQuery");

            var localVarPath = "/affiliate/clicks/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (clickQuery != null && clickQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(clickQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clickQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClicksByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AffiliateClicksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AffiliateClicksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AffiliateClicksResponse)));
        }

        /// <summary>
        /// Retrieve clicks Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clickQuery">Click query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>Task of AffiliateClicksResponse</returns>
        public async System.Threading.Tasks.Task<AffiliateClicksResponse> GetClicksByQueryAsync (AffiliateClickQuery clickQuery, int? limit = null, int? offset = null, string expand = null)
        {
             ApiResponse<AffiliateClicksResponse> localVarResponse = await GetClicksByQueryAsyncWithHttpInfo(clickQuery, limit, offset, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve clicks Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clickQuery">Click query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>Task of ApiResponse (AffiliateClicksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AffiliateClicksResponse>> GetClicksByQueryAsyncWithHttpInfo (AffiliateClickQuery clickQuery, int? limit = null, int? offset = null, string expand = null)
        {
            // verify the required parameter 'clickQuery' is set
            if (clickQuery == null)
                throw new ApiException(400, "Missing required parameter 'clickQuery' when calling AffiliateApi->GetClicksByQuery");

            var localVarPath = "/affiliate/clicks/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (clickQuery != null && clickQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(clickQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clickQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClicksByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AffiliateClicksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AffiliateClicksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AffiliateClicksResponse)));
        }

        /// <summary>
        /// Retrieve ledger entries Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerQuery">Ledger query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>AffiliateLedgersResponse</returns>
        public AffiliateLedgersResponse GetLedgersByQuery (AffiliateLedgerQuery ledgerQuery, int? limit = null, int? offset = null, string expand = null)
        {
             ApiResponse<AffiliateLedgersResponse> localVarResponse = GetLedgersByQueryWithHttpInfo(ledgerQuery, limit, offset, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve ledger entries Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerQuery">Ledger query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>ApiResponse of AffiliateLedgersResponse</returns>
        public ApiResponse< AffiliateLedgersResponse > GetLedgersByQueryWithHttpInfo (AffiliateLedgerQuery ledgerQuery, int? limit = null, int? offset = null, string expand = null)
        {
            // verify the required parameter 'ledgerQuery' is set
            if (ledgerQuery == null)
                throw new ApiException(400, "Missing required parameter 'ledgerQuery' when calling AffiliateApi->GetLedgersByQuery");

            var localVarPath = "/affiliate/ledgers/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (ledgerQuery != null && ledgerQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ledgerQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ledgerQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLedgersByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AffiliateLedgersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AffiliateLedgersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AffiliateLedgersResponse)));
        }

        /// <summary>
        /// Retrieve ledger entries Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerQuery">Ledger query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>Task of AffiliateLedgersResponse</returns>
        public async System.Threading.Tasks.Task<AffiliateLedgersResponse> GetLedgersByQueryAsync (AffiliateLedgerQuery ledgerQuery, int? limit = null, int? offset = null, string expand = null)
        {
             ApiResponse<AffiliateLedgersResponse> localVarResponse = await GetLedgersByQueryAsyncWithHttpInfo(ledgerQuery, limit, offset, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve ledger entries Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ledgerQuery">Ledger query</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="expand">The object expansion to perform on the result.  Only option is link. (optional)</param>
        /// <returns>Task of ApiResponse (AffiliateLedgersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AffiliateLedgersResponse>> GetLedgersByQueryAsyncWithHttpInfo (AffiliateLedgerQuery ledgerQuery, int? limit = null, int? offset = null, string expand = null)
        {
            // verify the required parameter 'ledgerQuery' is set
            if (ledgerQuery == null)
                throw new ApiException(400, "Missing required parameter 'ledgerQuery' when calling AffiliateApi->GetLedgersByQuery");

            var localVarPath = "/affiliate/ledgers/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_expand", expand)); // query parameter
            if (ledgerQuery != null && ledgerQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ledgerQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ledgerQuery; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLedgersByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AffiliateLedgersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AffiliateLedgersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AffiliateLedgersResponse)));
        }

    }
}
