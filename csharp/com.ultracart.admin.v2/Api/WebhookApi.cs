/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.ultracart.admin.v2.Client;
using com.ultracart.admin.v2.Model;

namespace com.ultracart.admin.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Delete a webhook on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to delete.</param>
        /// <returns></returns>
        void DeleteWebhook (int? webhookOid);

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Delete a webhook on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookWithHttpInfo (int? webhookOid);
        /// <summary>
        /// Retrieve an individual log
        /// </summary>
        /// <remarks>
        /// Retrieves an individual log for a webhook given the webhook oid the request id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that owns the log.</param>
        /// <param name="requestId">The request id associated with the log to view.</param>
        /// <returns>WebhookLogResponse</returns>
        WebhookLogResponse GetWebhookLog (int? webhookOid, string requestId);

        /// <summary>
        /// Retrieve an individual log
        /// </summary>
        /// <remarks>
        /// Retrieves an individual log for a webhook given the webhook oid the request id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that owns the log.</param>
        /// <param name="requestId">The request id associated with the log to view.</param>
        /// <returns>ApiResponse of WebhookLogResponse</returns>
        ApiResponse<WebhookLogResponse> GetWebhookLogWithHttpInfo (int? webhookOid, string requestId);
        /// <summary>
        /// Retrieve the log summaries
        /// </summary>
        /// <remarks>
        /// Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to retrieve log summaries for.</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch log summaries that have been delivered since this date/time. (optional)</param>
        /// <returns>WebhookLogSummariesResponse</returns>
        WebhookLogSummariesResponse GetWebhookLogSummaries (int? webhookOid, int? limit = null, int? offset = null, string since = null);

        /// <summary>
        /// Retrieve the log summaries
        /// </summary>
        /// <remarks>
        /// Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to retrieve log summaries for.</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch log summaries that have been delivered since this date/time. (optional)</param>
        /// <returns>ApiResponse of WebhookLogSummariesResponse</returns>
        ApiResponse<WebhookLogSummariesResponse> GetWebhookLogSummariesWithHttpInfo (int? webhookOid, int? limit = null, int? offset = null, string since = null);
        /// <summary>
        /// Retrieve webhooks
        /// </summary>
        /// <remarks>
        /// Retrieves the webhooks associated with this application. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the webhooks.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>WebhooksResponse</returns>
        WebhooksResponse GetWebhooks (int? limit = null, int? offset = null, string sort = null, bool? placeholders = null);

        /// <summary>
        /// Retrieve webhooks
        /// </summary>
        /// <remarks>
        /// Retrieves the webhooks associated with this application. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the webhooks.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of WebhooksResponse</returns>
        ApiResponse<WebhooksResponse> GetWebhooksWithHttpInfo (int? limit = null, int? offset = null, string sort = null, bool? placeholders = null);
        /// <summary>
        /// Add a webhook
        /// </summary>
        /// <remarks>
        /// Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to create</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>WebhookResponse</returns>
        WebhookResponse InsertWebhook (Webhook webhook, bool? placeholders = null);

        /// <summary>
        /// Add a webhook
        /// </summary>
        /// <remarks>
        /// Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to create</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        ApiResponse<WebhookResponse> InsertWebhookWithHttpInfo (Webhook webhook, bool? placeholders = null);
        /// <summary>
        /// Resend events to the webhook endpoint.
        /// </summary>
        /// <remarks>
        /// This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that is receiving the reflowed events.</param>
        /// <param name="eventName">The event to reflow.</param>
        /// <returns>WebhookSampleRequestResponse</returns>
        WebhookSampleRequestResponse ResendEvent (int? webhookOid, string eventName);

        /// <summary>
        /// Resend events to the webhook endpoint.
        /// </summary>
        /// <remarks>
        /// This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that is receiving the reflowed events.</param>
        /// <param name="eventName">The event to reflow.</param>
        /// <returns>ApiResponse of WebhookSampleRequestResponse</returns>
        ApiResponse<WebhookSampleRequestResponse> ResendEventWithHttpInfo (int? webhookOid, string eventName);
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook on the account 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to update</param>
        /// <param name="webhookOid">The webhook oid to update.</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>WebhookResponse</returns>
        WebhookResponse UpdateWebhook (Webhook webhook, int? webhookOid, bool? placeholders = null);

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook on the account 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to update</param>
        /// <param name="webhookOid">The webhook oid to update.</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        ApiResponse<WebhookResponse> UpdateWebhookWithHttpInfo (Webhook webhook, int? webhookOid, bool? placeholders = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Delete a webhook on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhookAsync (int? webhookOid);

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Delete a webhook on the UltraCart account. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookAsyncWithHttpInfo (int? webhookOid);
        /// <summary>
        /// Retrieve an individual log
        /// </summary>
        /// <remarks>
        /// Retrieves an individual log for a webhook given the webhook oid the request id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that owns the log.</param>
        /// <param name="requestId">The request id associated with the log to view.</param>
        /// <returns>Task of WebhookLogResponse</returns>
        System.Threading.Tasks.Task<WebhookLogResponse> GetWebhookLogAsync (int? webhookOid, string requestId);

        /// <summary>
        /// Retrieve an individual log
        /// </summary>
        /// <remarks>
        /// Retrieves an individual log for a webhook given the webhook oid the request id. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that owns the log.</param>
        /// <param name="requestId">The request id associated with the log to view.</param>
        /// <returns>Task of ApiResponse (WebhookLogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookLogResponse>> GetWebhookLogAsyncWithHttpInfo (int? webhookOid, string requestId);
        /// <summary>
        /// Retrieve the log summaries
        /// </summary>
        /// <remarks>
        /// Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to retrieve log summaries for.</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch log summaries that have been delivered since this date/time. (optional)</param>
        /// <returns>Task of WebhookLogSummariesResponse</returns>
        System.Threading.Tasks.Task<WebhookLogSummariesResponse> GetWebhookLogSummariesAsync (int? webhookOid, int? limit = null, int? offset = null, string since = null);

        /// <summary>
        /// Retrieve the log summaries
        /// </summary>
        /// <remarks>
        /// Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to retrieve log summaries for.</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch log summaries that have been delivered since this date/time. (optional)</param>
        /// <returns>Task of ApiResponse (WebhookLogSummariesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookLogSummariesResponse>> GetWebhookLogSummariesAsyncWithHttpInfo (int? webhookOid, int? limit = null, int? offset = null, string since = null);
        /// <summary>
        /// Retrieve webhooks
        /// </summary>
        /// <remarks>
        /// Retrieves the webhooks associated with this application. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the webhooks.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of WebhooksResponse</returns>
        System.Threading.Tasks.Task<WebhooksResponse> GetWebhooksAsync (int? limit = null, int? offset = null, string sort = null, bool? placeholders = null);

        /// <summary>
        /// Retrieve webhooks
        /// </summary>
        /// <remarks>
        /// Retrieves the webhooks associated with this application. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the webhooks.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of ApiResponse (WebhooksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhooksResponse>> GetWebhooksAsyncWithHttpInfo (int? limit = null, int? offset = null, string sort = null, bool? placeholders = null);
        /// <summary>
        /// Add a webhook
        /// </summary>
        /// <remarks>
        /// Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to create</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of WebhookResponse</returns>
        System.Threading.Tasks.Task<WebhookResponse> InsertWebhookAsync (Webhook webhook, bool? placeholders = null);

        /// <summary>
        /// Add a webhook
        /// </summary>
        /// <remarks>
        /// Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to create</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> InsertWebhookAsyncWithHttpInfo (Webhook webhook, bool? placeholders = null);
        /// <summary>
        /// Resend events to the webhook endpoint.
        /// </summary>
        /// <remarks>
        /// This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that is receiving the reflowed events.</param>
        /// <param name="eventName">The event to reflow.</param>
        /// <returns>Task of WebhookSampleRequestResponse</returns>
        System.Threading.Tasks.Task<WebhookSampleRequestResponse> ResendEventAsync (int? webhookOid, string eventName);

        /// <summary>
        /// Resend events to the webhook endpoint.
        /// </summary>
        /// <remarks>
        /// This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that is receiving the reflowed events.</param>
        /// <param name="eventName">The event to reflow.</param>
        /// <returns>Task of ApiResponse (WebhookSampleRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookSampleRequestResponse>> ResendEventAsyncWithHttpInfo (int? webhookOid, string eventName);
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook on the account 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to update</param>
        /// <param name="webhookOid">The webhook oid to update.</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of WebhookResponse</returns>
        System.Threading.Tasks.Task<WebhookResponse> UpdateWebhookAsync (Webhook webhook, int? webhookOid, bool? placeholders = null);

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook on the account 
        /// </remarks>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to update</param>
        /// <param name="webhookOid">The webhook oid to update.</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> UpdateWebhookAsyncWithHttpInfo (Webhook webhook, int? webhookOid, bool? placeholders = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhookApi : IWebhookApi
    {
        private com.ultracart.admin.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhookApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhookApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.ultracart.admin.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.ultracart.admin.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a webhook Delete a webhook on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to delete.</param>
        /// <returns></returns>
        public void DeleteWebhook (int? webhookOid)
        {
             DeleteWebhookWithHttpInfo(webhookOid);
        }

        /// <summary>
        /// Delete a webhook Delete a webhook on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWebhookWithHttpInfo (int? webhookOid)
        {
            // verify the required parameter 'webhookOid' is set
            if (webhookOid == null)
                throw new ApiException(400, "Missing required parameter 'webhookOid' when calling WebhookApi->DeleteWebhook");

            var localVarPath = "/webhook/webhooks/{webhookOid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookOid != null) localVarPathParams.Add("webhookOid", Configuration.ApiClient.ParameterToString(webhookOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a webhook Delete a webhook on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhookAsync (int? webhookOid)
        {
             await DeleteWebhookAsyncWithHttpInfo(webhookOid);

        }

        /// <summary>
        /// Delete a webhook Delete a webhook on the UltraCart account. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookAsyncWithHttpInfo (int? webhookOid)
        {
            // verify the required parameter 'webhookOid' is set
            if (webhookOid == null)
                throw new ApiException(400, "Missing required parameter 'webhookOid' when calling WebhookApi->DeleteWebhook");

            var localVarPath = "/webhook/webhooks/{webhookOid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookOid != null) localVarPathParams.Add("webhookOid", Configuration.ApiClient.ParameterToString(webhookOid)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve an individual log Retrieves an individual log for a webhook given the webhook oid the request id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that owns the log.</param>
        /// <param name="requestId">The request id associated with the log to view.</param>
        /// <returns>WebhookLogResponse</returns>
        public WebhookLogResponse GetWebhookLog (int? webhookOid, string requestId)
        {
             ApiResponse<WebhookLogResponse> localVarResponse = GetWebhookLogWithHttpInfo(webhookOid, requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an individual log Retrieves an individual log for a webhook given the webhook oid the request id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that owns the log.</param>
        /// <param name="requestId">The request id associated with the log to view.</param>
        /// <returns>ApiResponse of WebhookLogResponse</returns>
        public ApiResponse< WebhookLogResponse > GetWebhookLogWithHttpInfo (int? webhookOid, string requestId)
        {
            // verify the required parameter 'webhookOid' is set
            if (webhookOid == null)
                throw new ApiException(400, "Missing required parameter 'webhookOid' when calling WebhookApi->GetWebhookLog");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling WebhookApi->GetWebhookLog");

            var localVarPath = "/webhook/webhooks/{webhookOid}/logs/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookOid != null) localVarPathParams.Add("webhookOid", Configuration.ApiClient.ParameterToString(webhookOid)); // path parameter
            if (requestId != null) localVarPathParams.Add("requestId", Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookLogResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookLogResponse)));
        }

        /// <summary>
        /// Retrieve an individual log Retrieves an individual log for a webhook given the webhook oid the request id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that owns the log.</param>
        /// <param name="requestId">The request id associated with the log to view.</param>
        /// <returns>Task of WebhookLogResponse</returns>
        public async System.Threading.Tasks.Task<WebhookLogResponse> GetWebhookLogAsync (int? webhookOid, string requestId)
        {
             ApiResponse<WebhookLogResponse> localVarResponse = await GetWebhookLogAsyncWithHttpInfo(webhookOid, requestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an individual log Retrieves an individual log for a webhook given the webhook oid the request id. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that owns the log.</param>
        /// <param name="requestId">The request id associated with the log to view.</param>
        /// <returns>Task of ApiResponse (WebhookLogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookLogResponse>> GetWebhookLogAsyncWithHttpInfo (int? webhookOid, string requestId)
        {
            // verify the required parameter 'webhookOid' is set
            if (webhookOid == null)
                throw new ApiException(400, "Missing required parameter 'webhookOid' when calling WebhookApi->GetWebhookLog");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling WebhookApi->GetWebhookLog");

            var localVarPath = "/webhook/webhooks/{webhookOid}/logs/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookOid != null) localVarPathParams.Add("webhookOid", Configuration.ApiClient.ParameterToString(webhookOid)); // path parameter
            if (requestId != null) localVarPathParams.Add("requestId", Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookLogResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookLogResponse)));
        }

        /// <summary>
        /// Retrieve the log summaries Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to retrieve log summaries for.</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch log summaries that have been delivered since this date/time. (optional)</param>
        /// <returns>WebhookLogSummariesResponse</returns>
        public WebhookLogSummariesResponse GetWebhookLogSummaries (int? webhookOid, int? limit = null, int? offset = null, string since = null)
        {
             ApiResponse<WebhookLogSummariesResponse> localVarResponse = GetWebhookLogSummariesWithHttpInfo(webhookOid, limit, offset, since);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the log summaries Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to retrieve log summaries for.</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch log summaries that have been delivered since this date/time. (optional)</param>
        /// <returns>ApiResponse of WebhookLogSummariesResponse</returns>
        public ApiResponse< WebhookLogSummariesResponse > GetWebhookLogSummariesWithHttpInfo (int? webhookOid, int? limit = null, int? offset = null, string since = null)
        {
            // verify the required parameter 'webhookOid' is set
            if (webhookOid == null)
                throw new ApiException(400, "Missing required parameter 'webhookOid' when calling WebhookApi->GetWebhookLogSummaries");

            var localVarPath = "/webhook/webhooks/{webhookOid}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookOid != null) localVarPathParams.Add("webhookOid", Configuration.ApiClient.ParameterToString(webhookOid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookLogSummaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookLogSummariesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookLogSummariesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookLogSummariesResponse)));
        }

        /// <summary>
        /// Retrieve the log summaries Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to retrieve log summaries for.</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch log summaries that have been delivered since this date/time. (optional)</param>
        /// <returns>Task of WebhookLogSummariesResponse</returns>
        public async System.Threading.Tasks.Task<WebhookLogSummariesResponse> GetWebhookLogSummariesAsync (int? webhookOid, int? limit = null, int? offset = null, string since = null)
        {
             ApiResponse<WebhookLogSummariesResponse> localVarResponse = await GetWebhookLogSummariesAsyncWithHttpInfo(webhookOid, limit, offset, since);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the log summaries Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid to retrieve log summaries for.</param>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="since">Fetch log summaries that have been delivered since this date/time. (optional)</param>
        /// <returns>Task of ApiResponse (WebhookLogSummariesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookLogSummariesResponse>> GetWebhookLogSummariesAsyncWithHttpInfo (int? webhookOid, int? limit = null, int? offset = null, string since = null)
        {
            // verify the required parameter 'webhookOid' is set
            if (webhookOid == null)
                throw new ApiException(400, "Missing required parameter 'webhookOid' when calling WebhookApi->GetWebhookLogSummaries");

            var localVarPath = "/webhook/webhooks/{webhookOid}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookOid != null) localVarPathParams.Add("webhookOid", Configuration.ApiClient.ParameterToString(webhookOid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (since != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_since", since)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookLogSummaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookLogSummariesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookLogSummariesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookLogSummariesResponse)));
        }

        /// <summary>
        /// Retrieve webhooks Retrieves the webhooks associated with this application. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the webhooks.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>WebhooksResponse</returns>
        public WebhooksResponse GetWebhooks (int? limit = null, int? offset = null, string sort = null, bool? placeholders = null)
        {
             ApiResponse<WebhooksResponse> localVarResponse = GetWebhooksWithHttpInfo(limit, offset, sort, placeholders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve webhooks Retrieves the webhooks associated with this application. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the webhooks.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of WebhooksResponse</returns>
        public ApiResponse< WebhooksResponse > GetWebhooksWithHttpInfo (int? limit = null, int? offset = null, string sort = null, bool? placeholders = null)
        {

            var localVarPath = "/webhook/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhooksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhooksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhooksResponse)));
        }

        /// <summary>
        /// Retrieve webhooks Retrieves the webhooks associated with this application. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the webhooks.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of WebhooksResponse</returns>
        public async System.Threading.Tasks.Task<WebhooksResponse> GetWebhooksAsync (int? limit = null, int? offset = null, string sort = null, bool? placeholders = null)
        {
             ApiResponse<WebhooksResponse> localVarResponse = await GetWebhooksAsyncWithHttpInfo(limit, offset, sort, placeholders);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve webhooks Retrieves the webhooks associated with this application. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of records to return on this one API call. (optional, default to 100)</param>
        /// <param name="offset">Pagination of the record set.  Offset is a zero based index. (optional, default to 0)</param>
        /// <param name="sort">The sort order of the webhooks.  See documentation for examples (optional)</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of ApiResponse (WebhooksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhooksResponse>> GetWebhooksAsyncWithHttpInfo (int? limit = null, int? offset = null, string sort = null, bool? placeholders = null)
        {

            var localVarPath = "/webhook/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_offset", offset)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_sort", sort)); // query parameter
            if (placeholders != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhooksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhooksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhooksResponse)));
        }

        /// <summary>
        /// Add a webhook Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to create</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>WebhookResponse</returns>
        public WebhookResponse InsertWebhook (Webhook webhook, bool? placeholders = null)
        {
             ApiResponse<WebhookResponse> localVarResponse = InsertWebhookWithHttpInfo(webhook, placeholders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a webhook Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to create</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        public ApiResponse< WebhookResponse > InsertWebhookWithHttpInfo (Webhook webhook, bool? placeholders = null)
        {
            // verify the required parameter 'webhook' is set
            if (webhook == null)
                throw new ApiException(400, "Missing required parameter 'webhook' when calling WebhookApi->InsertWebhook");

            var localVarPath = "/webhook/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (placeholders != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (webhook != null && webhook.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webhook); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhook; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponse)));
        }

        /// <summary>
        /// Add a webhook Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to create</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of WebhookResponse</returns>
        public async System.Threading.Tasks.Task<WebhookResponse> InsertWebhookAsync (Webhook webhook, bool? placeholders = null)
        {
             ApiResponse<WebhookResponse> localVarResponse = await InsertWebhookAsyncWithHttpInfo(webhook, placeholders);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a webhook Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to create</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> InsertWebhookAsyncWithHttpInfo (Webhook webhook, bool? placeholders = null)
        {
            // verify the required parameter 'webhook' is set
            if (webhook == null)
                throw new ApiException(400, "Missing required parameter 'webhook' when calling WebhookApi->InsertWebhook");

            var localVarPath = "/webhook/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (placeholders != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (webhook != null && webhook.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webhook); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhook; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponse)));
        }

        /// <summary>
        /// Resend events to the webhook endpoint. This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that is receiving the reflowed events.</param>
        /// <param name="eventName">The event to reflow.</param>
        /// <returns>WebhookSampleRequestResponse</returns>
        public WebhookSampleRequestResponse ResendEvent (int? webhookOid, string eventName)
        {
             ApiResponse<WebhookSampleRequestResponse> localVarResponse = ResendEventWithHttpInfo(webhookOid, eventName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resend events to the webhook endpoint. This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that is receiving the reflowed events.</param>
        /// <param name="eventName">The event to reflow.</param>
        /// <returns>ApiResponse of WebhookSampleRequestResponse</returns>
        public ApiResponse< WebhookSampleRequestResponse > ResendEventWithHttpInfo (int? webhookOid, string eventName)
        {
            // verify the required parameter 'webhookOid' is set
            if (webhookOid == null)
                throw new ApiException(400, "Missing required parameter 'webhookOid' when calling WebhookApi->ResendEvent");
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling WebhookApi->ResendEvent");

            var localVarPath = "/webhook/webhooks/{webhookOid}/reflow/{eventName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookOid != null) localVarPathParams.Add("webhookOid", Configuration.ApiClient.ParameterToString(webhookOid)); // path parameter
            if (eventName != null) localVarPathParams.Add("eventName", Configuration.ApiClient.ParameterToString(eventName)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookSampleRequestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookSampleRequestResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookSampleRequestResponse)));
        }

        /// <summary>
        /// Resend events to the webhook endpoint. This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that is receiving the reflowed events.</param>
        /// <param name="eventName">The event to reflow.</param>
        /// <returns>Task of WebhookSampleRequestResponse</returns>
        public async System.Threading.Tasks.Task<WebhookSampleRequestResponse> ResendEventAsync (int? webhookOid, string eventName)
        {
             ApiResponse<WebhookSampleRequestResponse> localVarResponse = await ResendEventAsyncWithHttpInfo(webhookOid, eventName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resend events to the webhook endpoint. This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookOid">The webhook oid that is receiving the reflowed events.</param>
        /// <param name="eventName">The event to reflow.</param>
        /// <returns>Task of ApiResponse (WebhookSampleRequestResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookSampleRequestResponse>> ResendEventAsyncWithHttpInfo (int? webhookOid, string eventName)
        {
            // verify the required parameter 'webhookOid' is set
            if (webhookOid == null)
                throw new ApiException(400, "Missing required parameter 'webhookOid' when calling WebhookApi->ResendEvent");
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling WebhookApi->ResendEvent");

            var localVarPath = "/webhook/webhooks/{webhookOid}/reflow/{eventName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookOid != null) localVarPathParams.Add("webhookOid", Configuration.ApiClient.ParameterToString(webhookOid)); // path parameter
            if (eventName != null) localVarPathParams.Add("eventName", Configuration.ApiClient.ParameterToString(eventName)); // path parameter

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookSampleRequestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookSampleRequestResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookSampleRequestResponse)));
        }

        /// <summary>
        /// Update a webhook Update a webhook on the account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to update</param>
        /// <param name="webhookOid">The webhook oid to update.</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>WebhookResponse</returns>
        public WebhookResponse UpdateWebhook (Webhook webhook, int? webhookOid, bool? placeholders = null)
        {
             ApiResponse<WebhookResponse> localVarResponse = UpdateWebhookWithHttpInfo(webhook, webhookOid, placeholders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a webhook Update a webhook on the account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to update</param>
        /// <param name="webhookOid">The webhook oid to update.</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        public ApiResponse< WebhookResponse > UpdateWebhookWithHttpInfo (Webhook webhook, int? webhookOid, bool? placeholders = null)
        {
            // verify the required parameter 'webhook' is set
            if (webhook == null)
                throw new ApiException(400, "Missing required parameter 'webhook' when calling WebhookApi->UpdateWebhook");
            // verify the required parameter 'webhookOid' is set
            if (webhookOid == null)
                throw new ApiException(400, "Missing required parameter 'webhookOid' when calling WebhookApi->UpdateWebhook");

            var localVarPath = "/webhook/webhooks/{webhookOid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookOid != null) localVarPathParams.Add("webhookOid", Configuration.ApiClient.ParameterToString(webhookOid)); // path parameter
            if (placeholders != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (webhook != null && webhook.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webhook); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhook; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponse)));
        }

        /// <summary>
        /// Update a webhook Update a webhook on the account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to update</param>
        /// <param name="webhookOid">The webhook oid to update.</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of WebhookResponse</returns>
        public async System.Threading.Tasks.Task<WebhookResponse> UpdateWebhookAsync (Webhook webhook, int? webhookOid, bool? placeholders = null)
        {
             ApiResponse<WebhookResponse> localVarResponse = await UpdateWebhookAsyncWithHttpInfo(webhook, webhookOid, placeholders);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a webhook Update a webhook on the account 
        /// </summary>
        /// <exception cref="com.ultracart.admin.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">Webhook to update</param>
        /// <param name="webhookOid">The webhook oid to update.</param>
        /// <param name="placeholders">Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> UpdateWebhookAsyncWithHttpInfo (Webhook webhook, int? webhookOid, bool? placeholders = null)
        {
            // verify the required parameter 'webhook' is set
            if (webhook == null)
                throw new ApiException(400, "Missing required parameter 'webhook' when calling WebhookApi->UpdateWebhook");
            // verify the required parameter 'webhookOid' is set
            if (webhookOid == null)
                throw new ApiException(400, "Missing required parameter 'webhookOid' when calling WebhookApi->UpdateWebhook");

            var localVarPath = "/webhook/webhooks/{webhookOid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookOid != null) localVarPathParams.Add("webhookOid", Configuration.ApiClient.ParameterToString(webhookOid)); // path parameter
            if (placeholders != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "_placeholders", placeholders)); // query parameter
            if (webhook != null && webhook.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(webhook); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhook; // byte array
            }

            // authentication (ultraCartOauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (ultraCartSimpleApiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key")))
            {
                localVarHeaderParams["x-ultracart-simple-key"] = Configuration.GetApiKeyWithPrefix("x-ultracart-simple-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponse)));
        }

    }
}
