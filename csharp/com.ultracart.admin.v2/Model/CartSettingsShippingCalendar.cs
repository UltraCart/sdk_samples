/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartSettingsShippingCalendar
    /// </summary>
    [DataContract]
    public partial class CartSettingsShippingCalendar :  IEquatable<CartSettingsShippingCalendar>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartSettingsShippingCalendar" /> class.
        /// </summary>
        /// <param name="Blackouts">Specified dates that are blacked out on the calendar.</param>
        /// <param name="DaysOfWeek">Days of week that should be enabled on the calendar (0 - Sunday through 6 - Saturday).</param>
        /// <param name="Earliest">The earliest date that can be selected on the calendar.</param>
        /// <param name="Require">True if the customer is required to select a date.</param>
        /// <param name="Show">True if this calendar should be shown to the customer.</param>
        public CartSettingsShippingCalendar(string Blackouts = default(string), List<bool?> DaysOfWeek = default(List<bool?>), string Earliest = default(string), bool? Require = default(bool?), bool? Show = default(bool?))
        {
            this.Blackouts = Blackouts;
            this.DaysOfWeek = DaysOfWeek;
            this.Earliest = Earliest;
            this.Require = Require;
            this.Show = Show;
        }
        
        /// <summary>
        /// Specified dates that are blacked out on the calendar
        /// </summary>
        /// <value>Specified dates that are blacked out on the calendar</value>
        [DataMember(Name="blackouts", EmitDefaultValue=false)]
        public string Blackouts { get; set; }

        /// <summary>
        /// Days of week that should be enabled on the calendar (0 - Sunday through 6 - Saturday)
        /// </summary>
        /// <value>Days of week that should be enabled on the calendar (0 - Sunday through 6 - Saturday)</value>
        [DataMember(Name="days_of_week", EmitDefaultValue=false)]
        public List<bool?> DaysOfWeek { get; set; }

        /// <summary>
        /// The earliest date that can be selected on the calendar
        /// </summary>
        /// <value>The earliest date that can be selected on the calendar</value>
        [DataMember(Name="earliest", EmitDefaultValue=false)]
        public string Earliest { get; set; }

        /// <summary>
        /// True if the customer is required to select a date
        /// </summary>
        /// <value>True if the customer is required to select a date</value>
        [DataMember(Name="require", EmitDefaultValue=false)]
        public bool? Require { get; set; }

        /// <summary>
        /// True if this calendar should be shown to the customer
        /// </summary>
        /// <value>True if this calendar should be shown to the customer</value>
        [DataMember(Name="show", EmitDefaultValue=false)]
        public bool? Show { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartSettingsShippingCalendar {\n");
            sb.Append("  Blackouts: ").Append(Blackouts).Append("\n");
            sb.Append("  DaysOfWeek: ").Append(DaysOfWeek).Append("\n");
            sb.Append("  Earliest: ").Append(Earliest).Append("\n");
            sb.Append("  Require: ").Append(Require).Append("\n");
            sb.Append("  Show: ").Append(Show).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartSettingsShippingCalendar);
        }

        /// <summary>
        /// Returns true if CartSettingsShippingCalendar instances are equal
        /// </summary>
        /// <param name="input">Instance of CartSettingsShippingCalendar to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartSettingsShippingCalendar input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Blackouts == input.Blackouts ||
                    (this.Blackouts != null &&
                    this.Blackouts.Equals(input.Blackouts))
                ) && 
                (
                    this.DaysOfWeek == input.DaysOfWeek ||
                    this.DaysOfWeek != null &&
                    this.DaysOfWeek.SequenceEqual(input.DaysOfWeek)
                ) && 
                (
                    this.Earliest == input.Earliest ||
                    (this.Earliest != null &&
                    this.Earliest.Equals(input.Earliest))
                ) && 
                (
                    this.Require == input.Require ||
                    (this.Require != null &&
                    this.Require.Equals(input.Require))
                ) && 
                (
                    this.Show == input.Show ||
                    (this.Show != null &&
                    this.Show.Equals(input.Show))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Blackouts != null)
                    hashCode = hashCode * 59 + this.Blackouts.GetHashCode();
                if (this.DaysOfWeek != null)
                    hashCode = hashCode * 59 + this.DaysOfWeek.GetHashCode();
                if (this.Earliest != null)
                    hashCode = hashCode * 59 + this.Earliest.GetHashCode();
                if (this.Require != null)
                    hashCode = hashCode * 59 + this.Require.GetHashCode();
                if (this.Show != null)
                    hashCode = hashCode * 59 + this.Show.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
