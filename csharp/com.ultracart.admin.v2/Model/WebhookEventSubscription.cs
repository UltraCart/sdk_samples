/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// WebhookEventSubscription
    /// </summary>
    [DataContract]
    public partial class WebhookEventSubscription :  IEquatable<WebhookEventSubscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookEventSubscription" /> class.
        /// </summary>
        /// <param name="Comments">Comment about the event to provide further clarification to the end user.</param>
        /// <param name="DeprecatedFlag">True if the event is deprecated.  See the API change log for details on when it will be discontinued..</param>
        /// <param name="DiscontinuedFlag">True if the event is discontinued.  See the API change log for details on migration details..</param>
        /// <param name="EventDescription">Description of the event.</param>
        /// <param name="EventName">Event name.</param>
        /// <param name="Expansion">The expand string for the notification object.  See the individual resource _expand documentation for valid values..</param>
        /// <param name="Subscribed">True if this is event is subscribed to.</param>
        /// <param name="SupportsReflow">True if the event can be triggered to reflow existing records.</param>
        /// <param name="WebhookEventOid">The webhook event object identifier.</param>
        public WebhookEventSubscription(string Comments = default(string), bool? DeprecatedFlag = default(bool?), bool? DiscontinuedFlag = default(bool?), string EventDescription = default(string), string EventName = default(string), string Expansion = default(string), bool? Subscribed = default(bool?), bool? SupportsReflow = default(bool?), int? WebhookEventOid = default(int?))
        {
            this.Comments = Comments;
            this.DeprecatedFlag = DeprecatedFlag;
            this.DiscontinuedFlag = DiscontinuedFlag;
            this.EventDescription = EventDescription;
            this.EventName = EventName;
            this.Expansion = Expansion;
            this.Subscribed = Subscribed;
            this.SupportsReflow = SupportsReflow;
            this.WebhookEventOid = WebhookEventOid;
        }
        
        /// <summary>
        /// Comment about the event to provide further clarification to the end user
        /// </summary>
        /// <value>Comment about the event to provide further clarification to the end user</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// True if the event is deprecated.  See the API change log for details on when it will be discontinued.
        /// </summary>
        /// <value>True if the event is deprecated.  See the API change log for details on when it will be discontinued.</value>
        [DataMember(Name="deprecated_flag", EmitDefaultValue=false)]
        public bool? DeprecatedFlag { get; set; }

        /// <summary>
        /// True if the event is discontinued.  See the API change log for details on migration details.
        /// </summary>
        /// <value>True if the event is discontinued.  See the API change log for details on migration details.</value>
        [DataMember(Name="discontinued_flag", EmitDefaultValue=false)]
        public bool? DiscontinuedFlag { get; set; }

        /// <summary>
        /// Description of the event
        /// </summary>
        /// <value>Description of the event</value>
        [DataMember(Name="event_description", EmitDefaultValue=false)]
        public string EventDescription { get; set; }

        /// <summary>
        /// Event name
        /// </summary>
        /// <value>Event name</value>
        [DataMember(Name="event_name", EmitDefaultValue=false)]
        public string EventName { get; set; }

        /// <summary>
        /// The expand string for the notification object.  See the individual resource _expand documentation for valid values.
        /// </summary>
        /// <value>The expand string for the notification object.  See the individual resource _expand documentation for valid values.</value>
        [DataMember(Name="expansion", EmitDefaultValue=false)]
        public string Expansion { get; set; }

        /// <summary>
        /// True if this is event is subscribed to
        /// </summary>
        /// <value>True if this is event is subscribed to</value>
        [DataMember(Name="subscribed", EmitDefaultValue=false)]
        public bool? Subscribed { get; set; }

        /// <summary>
        /// True if the event can be triggered to reflow existing records
        /// </summary>
        /// <value>True if the event can be triggered to reflow existing records</value>
        [DataMember(Name="supports_reflow", EmitDefaultValue=false)]
        public bool? SupportsReflow { get; set; }

        /// <summary>
        /// The webhook event object identifier
        /// </summary>
        /// <value>The webhook event object identifier</value>
        [DataMember(Name="webhook_event_oid", EmitDefaultValue=false)]
        public int? WebhookEventOid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookEventSubscription {\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  DeprecatedFlag: ").Append(DeprecatedFlag).Append("\n");
            sb.Append("  DiscontinuedFlag: ").Append(DiscontinuedFlag).Append("\n");
            sb.Append("  EventDescription: ").Append(EventDescription).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Expansion: ").Append(Expansion).Append("\n");
            sb.Append("  Subscribed: ").Append(Subscribed).Append("\n");
            sb.Append("  SupportsReflow: ").Append(SupportsReflow).Append("\n");
            sb.Append("  WebhookEventOid: ").Append(WebhookEventOid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookEventSubscription);
        }

        /// <summary>
        /// Returns true if WebhookEventSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookEventSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookEventSubscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.DeprecatedFlag == input.DeprecatedFlag ||
                    (this.DeprecatedFlag != null &&
                    this.DeprecatedFlag.Equals(input.DeprecatedFlag))
                ) && 
                (
                    this.DiscontinuedFlag == input.DiscontinuedFlag ||
                    (this.DiscontinuedFlag != null &&
                    this.DiscontinuedFlag.Equals(input.DiscontinuedFlag))
                ) && 
                (
                    this.EventDescription == input.EventDescription ||
                    (this.EventDescription != null &&
                    this.EventDescription.Equals(input.EventDescription))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Expansion == input.Expansion ||
                    (this.Expansion != null &&
                    this.Expansion.Equals(input.Expansion))
                ) && 
                (
                    this.Subscribed == input.Subscribed ||
                    (this.Subscribed != null &&
                    this.Subscribed.Equals(input.Subscribed))
                ) && 
                (
                    this.SupportsReflow == input.SupportsReflow ||
                    (this.SupportsReflow != null &&
                    this.SupportsReflow.Equals(input.SupportsReflow))
                ) && 
                (
                    this.WebhookEventOid == input.WebhookEventOid ||
                    (this.WebhookEventOid != null &&
                    this.WebhookEventOid.Equals(input.WebhookEventOid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.DeprecatedFlag != null)
                    hashCode = hashCode * 59 + this.DeprecatedFlag.GetHashCode();
                if (this.DiscontinuedFlag != null)
                    hashCode = hashCode * 59 + this.DiscontinuedFlag.GetHashCode();
                if (this.EventDescription != null)
                    hashCode = hashCode * 59 + this.EventDescription.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Expansion != null)
                    hashCode = hashCode * 59 + this.Expansion.GetHashCode();
                if (this.Subscribed != null)
                    hashCode = hashCode * 59 + this.Subscribed.GetHashCode();
                if (this.SupportsReflow != null)
                    hashCode = hashCode * 59 + this.SupportsReflow.GetHashCode();
                if (this.WebhookEventOid != null)
                    hashCode = hashCode * 59 + this.WebhookEventOid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
