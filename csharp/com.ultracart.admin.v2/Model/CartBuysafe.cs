/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartBuysafe
    /// </summary>
    [DataContract]
    public partial class CartBuysafe :  IEquatable<CartBuysafe>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartBuysafe" /> class.
        /// </summary>
        /// <param name="BondAvailable">True if buySAFE is willing to bond the order.</param>
        /// <param name="BondCost">BondCost.</param>
        /// <param name="BondFree">True if the bond is free (merchant paying for it).</param>
        /// <param name="BondWanted">True if the customer wants the bond.</param>
        /// <param name="CartDisplayText">Recommend text to display to the customer.</param>
        /// <param name="CartDisplayUrl">URL associated with the recommended text.</param>
        public CartBuysafe(bool? BondAvailable = default(bool?), Currency BondCost = default(Currency), bool? BondFree = default(bool?), bool? BondWanted = default(bool?), string CartDisplayText = default(string), string CartDisplayUrl = default(string))
        {
            this.BondAvailable = BondAvailable;
            this.BondCost = BondCost;
            this.BondFree = BondFree;
            this.BondWanted = BondWanted;
            this.CartDisplayText = CartDisplayText;
            this.CartDisplayUrl = CartDisplayUrl;
        }
        
        /// <summary>
        /// True if buySAFE is willing to bond the order
        /// </summary>
        /// <value>True if buySAFE is willing to bond the order</value>
        [DataMember(Name="bond_available", EmitDefaultValue=false)]
        public bool? BondAvailable { get; set; }

        /// <summary>
        /// Gets or Sets BondCost
        /// </summary>
        [DataMember(Name="bond_cost", EmitDefaultValue=false)]
        public Currency BondCost { get; set; }

        /// <summary>
        /// True if the bond is free (merchant paying for it)
        /// </summary>
        /// <value>True if the bond is free (merchant paying for it)</value>
        [DataMember(Name="bond_free", EmitDefaultValue=false)]
        public bool? BondFree { get; set; }

        /// <summary>
        /// True if the customer wants the bond
        /// </summary>
        /// <value>True if the customer wants the bond</value>
        [DataMember(Name="bond_wanted", EmitDefaultValue=false)]
        public bool? BondWanted { get; set; }

        /// <summary>
        /// Recommend text to display to the customer
        /// </summary>
        /// <value>Recommend text to display to the customer</value>
        [DataMember(Name="cart_display_text", EmitDefaultValue=false)]
        public string CartDisplayText { get; set; }

        /// <summary>
        /// URL associated with the recommended text
        /// </summary>
        /// <value>URL associated with the recommended text</value>
        [DataMember(Name="cart_display_url", EmitDefaultValue=false)]
        public string CartDisplayUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartBuysafe {\n");
            sb.Append("  BondAvailable: ").Append(BondAvailable).Append("\n");
            sb.Append("  BondCost: ").Append(BondCost).Append("\n");
            sb.Append("  BondFree: ").Append(BondFree).Append("\n");
            sb.Append("  BondWanted: ").Append(BondWanted).Append("\n");
            sb.Append("  CartDisplayText: ").Append(CartDisplayText).Append("\n");
            sb.Append("  CartDisplayUrl: ").Append(CartDisplayUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartBuysafe);
        }

        /// <summary>
        /// Returns true if CartBuysafe instances are equal
        /// </summary>
        /// <param name="input">Instance of CartBuysafe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartBuysafe input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BondAvailable == input.BondAvailable ||
                    (this.BondAvailable != null &&
                    this.BondAvailable.Equals(input.BondAvailable))
                ) && 
                (
                    this.BondCost == input.BondCost ||
                    (this.BondCost != null &&
                    this.BondCost.Equals(input.BondCost))
                ) && 
                (
                    this.BondFree == input.BondFree ||
                    (this.BondFree != null &&
                    this.BondFree.Equals(input.BondFree))
                ) && 
                (
                    this.BondWanted == input.BondWanted ||
                    (this.BondWanted != null &&
                    this.BondWanted.Equals(input.BondWanted))
                ) && 
                (
                    this.CartDisplayText == input.CartDisplayText ||
                    (this.CartDisplayText != null &&
                    this.CartDisplayText.Equals(input.CartDisplayText))
                ) && 
                (
                    this.CartDisplayUrl == input.CartDisplayUrl ||
                    (this.CartDisplayUrl != null &&
                    this.CartDisplayUrl.Equals(input.CartDisplayUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BondAvailable != null)
                    hashCode = hashCode * 59 + this.BondAvailable.GetHashCode();
                if (this.BondCost != null)
                    hashCode = hashCode * 59 + this.BondCost.GetHashCode();
                if (this.BondFree != null)
                    hashCode = hashCode * 59 + this.BondFree.GetHashCode();
                if (this.BondWanted != null)
                    hashCode = hashCode * 59 + this.BondWanted.GetHashCode();
                if (this.CartDisplayText != null)
                    hashCode = hashCode * 59 + this.CartDisplayText.GetHashCode();
                if (this.CartDisplayUrl != null)
                    hashCode = hashCode * 59 + this.CartDisplayUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
