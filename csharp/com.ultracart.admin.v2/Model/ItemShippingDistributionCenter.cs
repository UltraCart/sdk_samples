/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemShippingDistributionCenter
    /// </summary>
    [DataContract]
    public partial class ItemShippingDistributionCenter :  IEquatable<ItemShippingDistributionCenter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemShippingDistributionCenter" /> class.
        /// </summary>
        /// <param name="AllocatedToPlacedOrders">Allocated to placed orders.</param>
        /// <param name="AllocatedToShoppingCarts">Allocated to shopping carts.</param>
        /// <param name="AvailableToAllocate">Available to allocate.</param>
        /// <param name="DesiredInventoryLevel">Desired inventory level.</param>
        /// <param name="DistributionCenterCode">Distribution center code.</param>
        /// <param name="DistributionCenterOid">Distribution center object identifier.</param>
        /// <param name="Eta">Estimated time of arrival.</param>
        /// <param name="Handles">True if this distribution center handles this item.</param>
        /// <param name="InventoryLevel">Inventory level.</param>
        /// <param name="MaximumBackorder">Maximum back-order.</param>
        /// <param name="ReorderInventoryLevel">Reorder inventory level (triggers notification).</param>
        /// <param name="Sku">SKU.</param>
        /// <param name="StockPickingLocation">Stock picking location.</param>
        public ItemShippingDistributionCenter(decimal? AllocatedToPlacedOrders = default(decimal?), decimal? AllocatedToShoppingCarts = default(decimal?), decimal? AvailableToAllocate = default(decimal?), decimal? DesiredInventoryLevel = default(decimal?), string DistributionCenterCode = default(string), int? DistributionCenterOid = default(int?), string Eta = default(string), bool? Handles = default(bool?), decimal? InventoryLevel = default(decimal?), int? MaximumBackorder = default(int?), decimal? ReorderInventoryLevel = default(decimal?), string Sku = default(string), string StockPickingLocation = default(string))
        {
            this.AllocatedToPlacedOrders = AllocatedToPlacedOrders;
            this.AllocatedToShoppingCarts = AllocatedToShoppingCarts;
            this.AvailableToAllocate = AvailableToAllocate;
            this.DesiredInventoryLevel = DesiredInventoryLevel;
            this.DistributionCenterCode = DistributionCenterCode;
            this.DistributionCenterOid = DistributionCenterOid;
            this.Eta = Eta;
            this.Handles = Handles;
            this.InventoryLevel = InventoryLevel;
            this.MaximumBackorder = MaximumBackorder;
            this.ReorderInventoryLevel = ReorderInventoryLevel;
            this.Sku = Sku;
            this.StockPickingLocation = StockPickingLocation;
        }
        
        /// <summary>
        /// Allocated to placed orders
        /// </summary>
        /// <value>Allocated to placed orders</value>
        [DataMember(Name="allocated_to_placed_orders", EmitDefaultValue=false)]
        public decimal? AllocatedToPlacedOrders { get; set; }

        /// <summary>
        /// Allocated to shopping carts
        /// </summary>
        /// <value>Allocated to shopping carts</value>
        [DataMember(Name="allocated_to_shopping_carts", EmitDefaultValue=false)]
        public decimal? AllocatedToShoppingCarts { get; set; }

        /// <summary>
        /// Available to allocate
        /// </summary>
        /// <value>Available to allocate</value>
        [DataMember(Name="available_to_allocate", EmitDefaultValue=false)]
        public decimal? AvailableToAllocate { get; set; }

        /// <summary>
        /// Desired inventory level
        /// </summary>
        /// <value>Desired inventory level</value>
        [DataMember(Name="desired_inventory_level", EmitDefaultValue=false)]
        public decimal? DesiredInventoryLevel { get; set; }

        /// <summary>
        /// Distribution center code
        /// </summary>
        /// <value>Distribution center code</value>
        [DataMember(Name="distribution_center_code", EmitDefaultValue=false)]
        public string DistributionCenterCode { get; set; }

        /// <summary>
        /// Distribution center object identifier
        /// </summary>
        /// <value>Distribution center object identifier</value>
        [DataMember(Name="distribution_center_oid", EmitDefaultValue=false)]
        public int? DistributionCenterOid { get; set; }

        /// <summary>
        /// Estimated time of arrival
        /// </summary>
        /// <value>Estimated time of arrival</value>
        [DataMember(Name="eta", EmitDefaultValue=false)]
        public string Eta { get; set; }

        /// <summary>
        /// True if this distribution center handles this item
        /// </summary>
        /// <value>True if this distribution center handles this item</value>
        [DataMember(Name="handles", EmitDefaultValue=false)]
        public bool? Handles { get; set; }

        /// <summary>
        /// Inventory level
        /// </summary>
        /// <value>Inventory level</value>
        [DataMember(Name="inventory_level", EmitDefaultValue=false)]
        public decimal? InventoryLevel { get; set; }

        /// <summary>
        /// Maximum back-order
        /// </summary>
        /// <value>Maximum back-order</value>
        [DataMember(Name="maximum_backorder", EmitDefaultValue=false)]
        public int? MaximumBackorder { get; set; }

        /// <summary>
        /// Reorder inventory level (triggers notification)
        /// </summary>
        /// <value>Reorder inventory level (triggers notification)</value>
        [DataMember(Name="reorder_inventory_level", EmitDefaultValue=false)]
        public decimal? ReorderInventoryLevel { get; set; }

        /// <summary>
        /// SKU
        /// </summary>
        /// <value>SKU</value>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// Stock picking location
        /// </summary>
        /// <value>Stock picking location</value>
        [DataMember(Name="stock_picking_location", EmitDefaultValue=false)]
        public string StockPickingLocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemShippingDistributionCenter {\n");
            sb.Append("  AllocatedToPlacedOrders: ").Append(AllocatedToPlacedOrders).Append("\n");
            sb.Append("  AllocatedToShoppingCarts: ").Append(AllocatedToShoppingCarts).Append("\n");
            sb.Append("  AvailableToAllocate: ").Append(AvailableToAllocate).Append("\n");
            sb.Append("  DesiredInventoryLevel: ").Append(DesiredInventoryLevel).Append("\n");
            sb.Append("  DistributionCenterCode: ").Append(DistributionCenterCode).Append("\n");
            sb.Append("  DistributionCenterOid: ").Append(DistributionCenterOid).Append("\n");
            sb.Append("  Eta: ").Append(Eta).Append("\n");
            sb.Append("  Handles: ").Append(Handles).Append("\n");
            sb.Append("  InventoryLevel: ").Append(InventoryLevel).Append("\n");
            sb.Append("  MaximumBackorder: ").Append(MaximumBackorder).Append("\n");
            sb.Append("  ReorderInventoryLevel: ").Append(ReorderInventoryLevel).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  StockPickingLocation: ").Append(StockPickingLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemShippingDistributionCenter);
        }

        /// <summary>
        /// Returns true if ItemShippingDistributionCenter instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemShippingDistributionCenter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemShippingDistributionCenter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllocatedToPlacedOrders == input.AllocatedToPlacedOrders ||
                    (this.AllocatedToPlacedOrders != null &&
                    this.AllocatedToPlacedOrders.Equals(input.AllocatedToPlacedOrders))
                ) && 
                (
                    this.AllocatedToShoppingCarts == input.AllocatedToShoppingCarts ||
                    (this.AllocatedToShoppingCarts != null &&
                    this.AllocatedToShoppingCarts.Equals(input.AllocatedToShoppingCarts))
                ) && 
                (
                    this.AvailableToAllocate == input.AvailableToAllocate ||
                    (this.AvailableToAllocate != null &&
                    this.AvailableToAllocate.Equals(input.AvailableToAllocate))
                ) && 
                (
                    this.DesiredInventoryLevel == input.DesiredInventoryLevel ||
                    (this.DesiredInventoryLevel != null &&
                    this.DesiredInventoryLevel.Equals(input.DesiredInventoryLevel))
                ) && 
                (
                    this.DistributionCenterCode == input.DistributionCenterCode ||
                    (this.DistributionCenterCode != null &&
                    this.DistributionCenterCode.Equals(input.DistributionCenterCode))
                ) && 
                (
                    this.DistributionCenterOid == input.DistributionCenterOid ||
                    (this.DistributionCenterOid != null &&
                    this.DistributionCenterOid.Equals(input.DistributionCenterOid))
                ) && 
                (
                    this.Eta == input.Eta ||
                    (this.Eta != null &&
                    this.Eta.Equals(input.Eta))
                ) && 
                (
                    this.Handles == input.Handles ||
                    (this.Handles != null &&
                    this.Handles.Equals(input.Handles))
                ) && 
                (
                    this.InventoryLevel == input.InventoryLevel ||
                    (this.InventoryLevel != null &&
                    this.InventoryLevel.Equals(input.InventoryLevel))
                ) && 
                (
                    this.MaximumBackorder == input.MaximumBackorder ||
                    (this.MaximumBackorder != null &&
                    this.MaximumBackorder.Equals(input.MaximumBackorder))
                ) && 
                (
                    this.ReorderInventoryLevel == input.ReorderInventoryLevel ||
                    (this.ReorderInventoryLevel != null &&
                    this.ReorderInventoryLevel.Equals(input.ReorderInventoryLevel))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.StockPickingLocation == input.StockPickingLocation ||
                    (this.StockPickingLocation != null &&
                    this.StockPickingLocation.Equals(input.StockPickingLocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllocatedToPlacedOrders != null)
                    hashCode = hashCode * 59 + this.AllocatedToPlacedOrders.GetHashCode();
                if (this.AllocatedToShoppingCarts != null)
                    hashCode = hashCode * 59 + this.AllocatedToShoppingCarts.GetHashCode();
                if (this.AvailableToAllocate != null)
                    hashCode = hashCode * 59 + this.AvailableToAllocate.GetHashCode();
                if (this.DesiredInventoryLevel != null)
                    hashCode = hashCode * 59 + this.DesiredInventoryLevel.GetHashCode();
                if (this.DistributionCenterCode != null)
                    hashCode = hashCode * 59 + this.DistributionCenterCode.GetHashCode();
                if (this.DistributionCenterOid != null)
                    hashCode = hashCode * 59 + this.DistributionCenterOid.GetHashCode();
                if (this.Eta != null)
                    hashCode = hashCode * 59 + this.Eta.GetHashCode();
                if (this.Handles != null)
                    hashCode = hashCode * 59 + this.Handles.GetHashCode();
                if (this.InventoryLevel != null)
                    hashCode = hashCode * 59 + this.InventoryLevel.GetHashCode();
                if (this.MaximumBackorder != null)
                    hashCode = hashCode * 59 + this.MaximumBackorder.GetHashCode();
                if (this.ReorderInventoryLevel != null)
                    hashCode = hashCode * 59 + this.ReorderInventoryLevel.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.StockPickingLocation != null)
                    hashCode = hashCode * 59 + this.StockPickingLocation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Sku (string) maxLength
            if(this.Sku != null && this.Sku.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sku, length must be less than 50.", new [] { "Sku" });
            }

            // StockPickingLocation (string) maxLength
            if(this.StockPickingLocation != null && this.StockPickingLocation.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StockPickingLocation, length must be less than 20.", new [] { "StockPickingLocation" });
            }

            yield break;
        }
    }

}
