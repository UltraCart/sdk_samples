/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartGift
    /// </summary>
    [DataContract]
    public partial class CartGift :  IEquatable<CartGift>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartGift" /> class.
        /// </summary>
        /// <param name="Gift">True if this order is a gift.</param>
        /// <param name="GiftCharge">GiftCharge.</param>
        /// <param name="GiftEmail">Email address of the gift recipient.</param>
        /// <param name="GiftMessage">Message to the gift recipient.</param>
        /// <param name="GiftWrapCost">GiftWrapCost.</param>
        /// <param name="GiftWrapTitle">Title of the selected gift wrap.</param>
        public CartGift(bool? Gift = default(bool?), Currency GiftCharge = default(Currency), string GiftEmail = default(string), string GiftMessage = default(string), Currency GiftWrapCost = default(Currency), string GiftWrapTitle = default(string))
        {
            this.Gift = Gift;
            this.GiftCharge = GiftCharge;
            this.GiftEmail = GiftEmail;
            this.GiftMessage = GiftMessage;
            this.GiftWrapCost = GiftWrapCost;
            this.GiftWrapTitle = GiftWrapTitle;
        }
        
        /// <summary>
        /// True if this order is a gift
        /// </summary>
        /// <value>True if this order is a gift</value>
        [DataMember(Name="gift", EmitDefaultValue=false)]
        public bool? Gift { get; set; }

        /// <summary>
        /// Gets or Sets GiftCharge
        /// </summary>
        [DataMember(Name="gift_charge", EmitDefaultValue=false)]
        public Currency GiftCharge { get; set; }

        /// <summary>
        /// Email address of the gift recipient
        /// </summary>
        /// <value>Email address of the gift recipient</value>
        [DataMember(Name="gift_email", EmitDefaultValue=false)]
        public string GiftEmail { get; set; }

        /// <summary>
        /// Message to the gift recipient
        /// </summary>
        /// <value>Message to the gift recipient</value>
        [DataMember(Name="gift_message", EmitDefaultValue=false)]
        public string GiftMessage { get; set; }

        /// <summary>
        /// Gets or Sets GiftWrapCost
        /// </summary>
        [DataMember(Name="gift_wrap_cost", EmitDefaultValue=false)]
        public Currency GiftWrapCost { get; set; }

        /// <summary>
        /// Title of the selected gift wrap
        /// </summary>
        /// <value>Title of the selected gift wrap</value>
        [DataMember(Name="gift_wrap_title", EmitDefaultValue=false)]
        public string GiftWrapTitle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartGift {\n");
            sb.Append("  Gift: ").Append(Gift).Append("\n");
            sb.Append("  GiftCharge: ").Append(GiftCharge).Append("\n");
            sb.Append("  GiftEmail: ").Append(GiftEmail).Append("\n");
            sb.Append("  GiftMessage: ").Append(GiftMessage).Append("\n");
            sb.Append("  GiftWrapCost: ").Append(GiftWrapCost).Append("\n");
            sb.Append("  GiftWrapTitle: ").Append(GiftWrapTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartGift);
        }

        /// <summary>
        /// Returns true if CartGift instances are equal
        /// </summary>
        /// <param name="input">Instance of CartGift to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartGift input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gift == input.Gift ||
                    (this.Gift != null &&
                    this.Gift.Equals(input.Gift))
                ) && 
                (
                    this.GiftCharge == input.GiftCharge ||
                    (this.GiftCharge != null &&
                    this.GiftCharge.Equals(input.GiftCharge))
                ) && 
                (
                    this.GiftEmail == input.GiftEmail ||
                    (this.GiftEmail != null &&
                    this.GiftEmail.Equals(input.GiftEmail))
                ) && 
                (
                    this.GiftMessage == input.GiftMessage ||
                    (this.GiftMessage != null &&
                    this.GiftMessage.Equals(input.GiftMessage))
                ) && 
                (
                    this.GiftWrapCost == input.GiftWrapCost ||
                    (this.GiftWrapCost != null &&
                    this.GiftWrapCost.Equals(input.GiftWrapCost))
                ) && 
                (
                    this.GiftWrapTitle == input.GiftWrapTitle ||
                    (this.GiftWrapTitle != null &&
                    this.GiftWrapTitle.Equals(input.GiftWrapTitle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gift != null)
                    hashCode = hashCode * 59 + this.Gift.GetHashCode();
                if (this.GiftCharge != null)
                    hashCode = hashCode * 59 + this.GiftCharge.GetHashCode();
                if (this.GiftEmail != null)
                    hashCode = hashCode * 59 + this.GiftEmail.GetHashCode();
                if (this.GiftMessage != null)
                    hashCode = hashCode * 59 + this.GiftMessage.GetHashCode();
                if (this.GiftWrapCost != null)
                    hashCode = hashCode * 59 + this.GiftWrapCost.GetHashCode();
                if (this.GiftWrapTitle != null)
                    hashCode = hashCode * 59 + this.GiftWrapTitle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GiftEmail (string) maxLength
            if(this.GiftEmail != null && this.GiftEmail.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GiftEmail, length must be less than 100.", new [] { "GiftEmail" });
            }

            // GiftMessage (string) maxLength
            if(this.GiftMessage != null && this.GiftMessage.Length > 10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GiftMessage, length must be less than 10000.", new [] { "GiftMessage" });
            }

            // GiftWrapTitle (string) maxLength
            if(this.GiftWrapTitle != null && this.GiftWrapTitle.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GiftWrapTitle, length must be less than 30.", new [] { "GiftWrapTitle" });
            }

            yield break;
        }
    }

}
