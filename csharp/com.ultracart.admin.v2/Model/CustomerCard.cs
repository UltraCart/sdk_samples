/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomerCard
    /// </summary>
    [DataContract]
    public partial class CustomerCard :  IEquatable<CustomerCard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerCard" /> class.
        /// </summary>
        /// <param name="CardExpirationMonth">Card expiration month (1-12).</param>
        /// <param name="CardExpirationYear">Card expiration year (four digit year).</param>
        /// <param name="CardNumber">Card number (masked to the last 4).</param>
        /// <param name="CardNumberToken">Hosted field token for the card number.</param>
        /// <param name="CardType">Card type.</param>
        /// <param name="CustomerProfileCreditCardId">ID of the stored credit card to use.</param>
        /// <param name="CustomerProfileOid">Customer profile object identifier.</param>
        /// <param name="LastUsedDts">Last used date.</param>
        public CustomerCard(int? CardExpirationMonth = default(int?), int? CardExpirationYear = default(int?), string CardNumber = default(string), string CardNumberToken = default(string), string CardType = default(string), int? CustomerProfileCreditCardId = default(int?), int? CustomerProfileOid = default(int?), string LastUsedDts = default(string))
        {
            this.CardExpirationMonth = CardExpirationMonth;
            this.CardExpirationYear = CardExpirationYear;
            this.CardNumber = CardNumber;
            this.CardNumberToken = CardNumberToken;
            this.CardType = CardType;
            this.CustomerProfileCreditCardId = CustomerProfileCreditCardId;
            this.CustomerProfileOid = CustomerProfileOid;
            this.LastUsedDts = LastUsedDts;
        }
        
        /// <summary>
        /// Card expiration month (1-12)
        /// </summary>
        /// <value>Card expiration month (1-12)</value>
        [DataMember(Name="card_expiration_month", EmitDefaultValue=false)]
        public int? CardExpirationMonth { get; set; }

        /// <summary>
        /// Card expiration year (four digit year)
        /// </summary>
        /// <value>Card expiration year (four digit year)</value>
        [DataMember(Name="card_expiration_year", EmitDefaultValue=false)]
        public int? CardExpirationYear { get; set; }

        /// <summary>
        /// Card number (masked to the last 4)
        /// </summary>
        /// <value>Card number (masked to the last 4)</value>
        [DataMember(Name="card_number", EmitDefaultValue=false)]
        public string CardNumber { get; set; }

        /// <summary>
        /// Hosted field token for the card number
        /// </summary>
        /// <value>Hosted field token for the card number</value>
        [DataMember(Name="card_number_token", EmitDefaultValue=false)]
        public string CardNumberToken { get; set; }

        /// <summary>
        /// Card type
        /// </summary>
        /// <value>Card type</value>
        [DataMember(Name="card_type", EmitDefaultValue=false)]
        public string CardType { get; set; }

        /// <summary>
        /// ID of the stored credit card to use
        /// </summary>
        /// <value>ID of the stored credit card to use</value>
        [DataMember(Name="customer_profile_credit_card_id", EmitDefaultValue=false)]
        public int? CustomerProfileCreditCardId { get; set; }

        /// <summary>
        /// Customer profile object identifier
        /// </summary>
        /// <value>Customer profile object identifier</value>
        [DataMember(Name="customer_profile_oid", EmitDefaultValue=false)]
        public int? CustomerProfileOid { get; set; }

        /// <summary>
        /// Last used date
        /// </summary>
        /// <value>Last used date</value>
        [DataMember(Name="last_used_dts", EmitDefaultValue=false)]
        public string LastUsedDts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerCard {\n");
            sb.Append("  CardExpirationMonth: ").Append(CardExpirationMonth).Append("\n");
            sb.Append("  CardExpirationYear: ").Append(CardExpirationYear).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  CardNumberToken: ").Append(CardNumberToken).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  CustomerProfileCreditCardId: ").Append(CustomerProfileCreditCardId).Append("\n");
            sb.Append("  CustomerProfileOid: ").Append(CustomerProfileOid).Append("\n");
            sb.Append("  LastUsedDts: ").Append(LastUsedDts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerCard);
        }

        /// <summary>
        /// Returns true if CustomerCard instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerCard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CardExpirationMonth == input.CardExpirationMonth ||
                    (this.CardExpirationMonth != null &&
                    this.CardExpirationMonth.Equals(input.CardExpirationMonth))
                ) && 
                (
                    this.CardExpirationYear == input.CardExpirationYear ||
                    (this.CardExpirationYear != null &&
                    this.CardExpirationYear.Equals(input.CardExpirationYear))
                ) && 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && 
                (
                    this.CardNumberToken == input.CardNumberToken ||
                    (this.CardNumberToken != null &&
                    this.CardNumberToken.Equals(input.CardNumberToken))
                ) && 
                (
                    this.CardType == input.CardType ||
                    (this.CardType != null &&
                    this.CardType.Equals(input.CardType))
                ) && 
                (
                    this.CustomerProfileCreditCardId == input.CustomerProfileCreditCardId ||
                    (this.CustomerProfileCreditCardId != null &&
                    this.CustomerProfileCreditCardId.Equals(input.CustomerProfileCreditCardId))
                ) && 
                (
                    this.CustomerProfileOid == input.CustomerProfileOid ||
                    (this.CustomerProfileOid != null &&
                    this.CustomerProfileOid.Equals(input.CustomerProfileOid))
                ) && 
                (
                    this.LastUsedDts == input.LastUsedDts ||
                    (this.LastUsedDts != null &&
                    this.LastUsedDts.Equals(input.LastUsedDts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardExpirationMonth != null)
                    hashCode = hashCode * 59 + this.CardExpirationMonth.GetHashCode();
                if (this.CardExpirationYear != null)
                    hashCode = hashCode * 59 + this.CardExpirationYear.GetHashCode();
                if (this.CardNumber != null)
                    hashCode = hashCode * 59 + this.CardNumber.GetHashCode();
                if (this.CardNumberToken != null)
                    hashCode = hashCode * 59 + this.CardNumberToken.GetHashCode();
                if (this.CardType != null)
                    hashCode = hashCode * 59 + this.CardType.GetHashCode();
                if (this.CustomerProfileCreditCardId != null)
                    hashCode = hashCode * 59 + this.CustomerProfileCreditCardId.GetHashCode();
                if (this.CustomerProfileOid != null)
                    hashCode = hashCode * 59 + this.CustomerProfileOid.GetHashCode();
                if (this.LastUsedDts != null)
                    hashCode = hashCode * 59 + this.LastUsedDts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
