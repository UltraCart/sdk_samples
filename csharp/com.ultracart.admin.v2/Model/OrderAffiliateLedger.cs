/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderAffiliateLedger
    /// </summary>
    [DataContract]
    public partial class OrderAffiliateLedger :  IEquatable<OrderAffiliateLedger>, IValidatableObject
    {
        /// <summary>
        /// The state of the transaction
        /// </summary>
        /// <value>The state of the transaction</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionStateEnum
        {
            
            /// <summary>
            /// Enum Pending for "Pending"
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending,
            
            /// <summary>
            /// Enum Posted for "Posted"
            /// </summary>
            [EnumMember(Value = "Posted")]
            Posted,
            
            /// <summary>
            /// Enum Approved for "Approved"
            /// </summary>
            [EnumMember(Value = "Approved")]
            Approved,
            
            /// <summary>
            /// Enum Paid for "Paid"
            /// </summary>
            [EnumMember(Value = "Paid")]
            Paid,
            
            /// <summary>
            /// Enum Rejected for "Rejected"
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected,
            
            /// <summary>
            /// Enum PartiallyPaid for "Partially Paid"
            /// </summary>
            [EnumMember(Value = "Partially Paid")]
            PartiallyPaid
        }

        /// <summary>
        /// The state of the transaction
        /// </summary>
        /// <value>The state of the transaction</value>
        [DataMember(Name="transaction_state", EmitDefaultValue=false)]
        public TransactionStateEnum? TransactionState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAffiliateLedger" /> class.
        /// </summary>
        /// <param name="AssignedByUser">UltraCart user name that assigned this commission if manually assigned.</param>
        /// <param name="ItemId">Item ID that this ledger record is associated with.</param>
        /// <param name="TierNumber">Tier number of this affiliate in the commission calculation.</param>
        /// <param name="TransactionAmount">Amount of the transaction.</param>
        /// <param name="TransactionAmountPaid">The amount that has been paid so far on the transaction.</param>
        /// <param name="TransactionDts">The date/time that the affiliate ledger was generated for the transaction.</param>
        /// <param name="TransactionMemo">Details of the transaction suitable for display to the affiliate.</param>
        /// <param name="TransactionPercentage">The percentage earned on the transaction.</param>
        /// <param name="TransactionState">The state of the transaction.</param>
        public OrderAffiliateLedger(string AssignedByUser = default(string), string ItemId = default(string), int? TierNumber = default(int?), decimal? TransactionAmount = default(decimal?), decimal? TransactionAmountPaid = default(decimal?), string TransactionDts = default(string), string TransactionMemo = default(string), decimal? TransactionPercentage = default(decimal?), TransactionStateEnum? TransactionState = default(TransactionStateEnum?))
        {
            this.AssignedByUser = AssignedByUser;
            this.ItemId = ItemId;
            this.TierNumber = TierNumber;
            this.TransactionAmount = TransactionAmount;
            this.TransactionAmountPaid = TransactionAmountPaid;
            this.TransactionDts = TransactionDts;
            this.TransactionMemo = TransactionMemo;
            this.TransactionPercentage = TransactionPercentage;
            this.TransactionState = TransactionState;
        }
        
        /// <summary>
        /// UltraCart user name that assigned this commission if manually assigned
        /// </summary>
        /// <value>UltraCart user name that assigned this commission if manually assigned</value>
        [DataMember(Name="assigned_by_user", EmitDefaultValue=false)]
        public string AssignedByUser { get; set; }

        /// <summary>
        /// Item ID that this ledger record is associated with
        /// </summary>
        /// <value>Item ID that this ledger record is associated with</value>
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Tier number of this affiliate in the commission calculation
        /// </summary>
        /// <value>Tier number of this affiliate in the commission calculation</value>
        [DataMember(Name="tier_number", EmitDefaultValue=false)]
        public int? TierNumber { get; set; }

        /// <summary>
        /// Amount of the transaction
        /// </summary>
        /// <value>Amount of the transaction</value>
        [DataMember(Name="transaction_amount", EmitDefaultValue=false)]
        public decimal? TransactionAmount { get; set; }

        /// <summary>
        /// The amount that has been paid so far on the transaction
        /// </summary>
        /// <value>The amount that has been paid so far on the transaction</value>
        [DataMember(Name="transaction_amount_paid", EmitDefaultValue=false)]
        public decimal? TransactionAmountPaid { get; set; }

        /// <summary>
        /// The date/time that the affiliate ledger was generated for the transaction
        /// </summary>
        /// <value>The date/time that the affiliate ledger was generated for the transaction</value>
        [DataMember(Name="transaction_dts", EmitDefaultValue=false)]
        public string TransactionDts { get; set; }

        /// <summary>
        /// Details of the transaction suitable for display to the affiliate
        /// </summary>
        /// <value>Details of the transaction suitable for display to the affiliate</value>
        [DataMember(Name="transaction_memo", EmitDefaultValue=false)]
        public string TransactionMemo { get; set; }

        /// <summary>
        /// The percentage earned on the transaction
        /// </summary>
        /// <value>The percentage earned on the transaction</value>
        [DataMember(Name="transaction_percentage", EmitDefaultValue=false)]
        public decimal? TransactionPercentage { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderAffiliateLedger {\n");
            sb.Append("  AssignedByUser: ").Append(AssignedByUser).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  TierNumber: ").Append(TierNumber).Append("\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("  TransactionAmountPaid: ").Append(TransactionAmountPaid).Append("\n");
            sb.Append("  TransactionDts: ").Append(TransactionDts).Append("\n");
            sb.Append("  TransactionMemo: ").Append(TransactionMemo).Append("\n");
            sb.Append("  TransactionPercentage: ").Append(TransactionPercentage).Append("\n");
            sb.Append("  TransactionState: ").Append(TransactionState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderAffiliateLedger);
        }

        /// <summary>
        /// Returns true if OrderAffiliateLedger instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderAffiliateLedger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderAffiliateLedger input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssignedByUser == input.AssignedByUser ||
                    (this.AssignedByUser != null &&
                    this.AssignedByUser.Equals(input.AssignedByUser))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.TierNumber == input.TierNumber ||
                    (this.TierNumber != null &&
                    this.TierNumber.Equals(input.TierNumber))
                ) && 
                (
                    this.TransactionAmount == input.TransactionAmount ||
                    (this.TransactionAmount != null &&
                    this.TransactionAmount.Equals(input.TransactionAmount))
                ) && 
                (
                    this.TransactionAmountPaid == input.TransactionAmountPaid ||
                    (this.TransactionAmountPaid != null &&
                    this.TransactionAmountPaid.Equals(input.TransactionAmountPaid))
                ) && 
                (
                    this.TransactionDts == input.TransactionDts ||
                    (this.TransactionDts != null &&
                    this.TransactionDts.Equals(input.TransactionDts))
                ) && 
                (
                    this.TransactionMemo == input.TransactionMemo ||
                    (this.TransactionMemo != null &&
                    this.TransactionMemo.Equals(input.TransactionMemo))
                ) && 
                (
                    this.TransactionPercentage == input.TransactionPercentage ||
                    (this.TransactionPercentage != null &&
                    this.TransactionPercentage.Equals(input.TransactionPercentage))
                ) && 
                (
                    this.TransactionState == input.TransactionState ||
                    (this.TransactionState != null &&
                    this.TransactionState.Equals(input.TransactionState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssignedByUser != null)
                    hashCode = hashCode * 59 + this.AssignedByUser.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.TierNumber != null)
                    hashCode = hashCode * 59 + this.TierNumber.GetHashCode();
                if (this.TransactionAmount != null)
                    hashCode = hashCode * 59 + this.TransactionAmount.GetHashCode();
                if (this.TransactionAmountPaid != null)
                    hashCode = hashCode * 59 + this.TransactionAmountPaid.GetHashCode();
                if (this.TransactionDts != null)
                    hashCode = hashCode * 59 + this.TransactionDts.GetHashCode();
                if (this.TransactionMemo != null)
                    hashCode = hashCode * 59 + this.TransactionMemo.GetHashCode();
                if (this.TransactionPercentage != null)
                    hashCode = hashCode * 59 + this.TransactionPercentage.GetHashCode();
                if (this.TransactionState != null)
                    hashCode = hashCode * 59 + this.TransactionState.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
