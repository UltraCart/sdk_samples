/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// WebhookEventCategory
    /// </summary>
    [DataContract]
    public partial class WebhookEventCategory :  IEquatable<WebhookEventCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookEventCategory" /> class.
        /// </summary>
        /// <param name="EventCategory">Name of the event category.</param>
        /// <param name="Events">The events within the category.  Individual subscription flags contained within the child object..</param>
        /// <param name="Subscribed">True if all the events within this category are subscribed.  This is a convenience flag to make user interfaces easier..</param>
        public WebhookEventCategory(string EventCategory = default(string), List<WebhookEventSubscription> Events = default(List<WebhookEventSubscription>), bool? Subscribed = default(bool?))
        {
            this.EventCategory = EventCategory;
            this.Events = Events;
            this.Subscribed = Subscribed;
        }
        
        /// <summary>
        /// Name of the event category
        /// </summary>
        /// <value>Name of the event category</value>
        [DataMember(Name="event_category", EmitDefaultValue=false)]
        public string EventCategory { get; set; }

        /// <summary>
        /// The events within the category.  Individual subscription flags contained within the child object.
        /// </summary>
        /// <value>The events within the category.  Individual subscription flags contained within the child object.</value>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<WebhookEventSubscription> Events { get; set; }

        /// <summary>
        /// True if all the events within this category are subscribed.  This is a convenience flag to make user interfaces easier.
        /// </summary>
        /// <value>True if all the events within this category are subscribed.  This is a convenience flag to make user interfaces easier.</value>
        [DataMember(Name="subscribed", EmitDefaultValue=false)]
        public bool? Subscribed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookEventCategory {\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Subscribed: ").Append(Subscribed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookEventCategory);
        }

        /// <summary>
        /// Returns true if WebhookEventCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookEventCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookEventCategory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.Subscribed == input.Subscribed ||
                    (this.Subscribed != null &&
                    this.Subscribed.Equals(input.Subscribed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                if (this.Subscribed != null)
                    hashCode = hashCode * 59 + this.Subscribed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
