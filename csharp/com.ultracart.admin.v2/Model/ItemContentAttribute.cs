/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemContentAttribute
    /// </summary>
    [DataContract]
    public partial class ItemContentAttribute :  IEquatable<ItemContentAttribute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemContentAttribute" /> class.
        /// </summary>
        /// <param name="Name">Attribute name.</param>
        /// <param name="TranslatedTextInstanceOid">Attribute translated text instance identifier.</param>
        /// <param name="Type">Attribute type.</param>
        /// <param name="Value">Attribute value.</param>
        public ItemContentAttribute(string Name = default(string), int? TranslatedTextInstanceOid = default(int?), string Type = default(string), string Value = default(string))
        {
            this.Name = Name;
            this.TranslatedTextInstanceOid = TranslatedTextInstanceOid;
            this.Type = Type;
            this.Value = Value;
        }
        
        /// <summary>
        /// Attribute name
        /// </summary>
        /// <value>Attribute name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Attribute translated text instance identifier
        /// </summary>
        /// <value>Attribute translated text instance identifier</value>
        [DataMember(Name="translated_text_instance_oid", EmitDefaultValue=false)]
        public int? TranslatedTextInstanceOid { get; set; }

        /// <summary>
        /// Attribute type
        /// </summary>
        /// <value>Attribute type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Attribute value
        /// </summary>
        /// <value>Attribute value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemContentAttribute {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TranslatedTextInstanceOid: ").Append(TranslatedTextInstanceOid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemContentAttribute);
        }

        /// <summary>
        /// Returns true if ItemContentAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemContentAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemContentAttribute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TranslatedTextInstanceOid == input.TranslatedTextInstanceOid ||
                    (this.TranslatedTextInstanceOid != null &&
                    this.TranslatedTextInstanceOid.Equals(input.TranslatedTextInstanceOid))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TranslatedTextInstanceOid != null)
                    hashCode = hashCode * 59 + this.TranslatedTextInstanceOid.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 400.", new [] { "Name" });
            }

            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 100000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 100000.", new [] { "Value" });
            }

            yield break;
        }
    }

}
