/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartItem
    /// </summary>
    [DataContract]
    public partial class CartItem :  IEquatable<CartItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartItem" /> class.
        /// </summary>
        /// <param name="ArbitraryUnitCost">ArbitraryUnitCost.</param>
        /// <param name="Attributes">Attributes.</param>
        /// <param name="AutoOrderSchedule">Auto order schedule the customer selected.</param>
        /// <param name="DefaultImageUrl">URL to the default multimedia image.</param>
        /// <param name="DefaultThumbnailUrl">URL to the default multimedia thumbnail.</param>
        /// <param name="Description">Description of the item.</param>
        /// <param name="Discount">Discount.</param>
        /// <param name="ExtendedDescription">Extended description of the item.</param>
        /// <param name="ItemId">Item ID.</param>
        /// <param name="ItemOid">Item object identifier.</param>
        /// <param name="Kit">True if this item is a kit.</param>
        /// <param name="KitComponentOptions">Options associated with the kit components.</param>
        /// <param name="ManufacturerSuggestedRetailPrice">ManufacturerSuggestedRetailPrice.</param>
        /// <param name="MaximumQuantity">Maximum quantity the customer can purchase.</param>
        /// <param name="MinimumQuantity">Minimum quantity the customer can purchase.</param>
        /// <param name="Multimedia">Multimedia.</param>
        /// <param name="Options">Options.</param>
        /// <param name="Phsyical">Phsyical.</param>
        /// <param name="Position">Position of the item in the cart.</param>
        /// <param name="Preorder">True if this item is on pre-order.</param>
        /// <param name="Quantity">quantity.</param>
        /// <param name="Schedules">Customer selectable auto order schedules.</param>
        /// <param name="TotalCost">TotalCost.</param>
        /// <param name="TotalCostWithDiscount">TotalCostWithDiscount.</param>
        /// <param name="UnitCost">UnitCost.</param>
        /// <param name="UnitCostWithDiscount">UnitCostWithDiscount.</param>
        /// <param name="Upsell">True if this item was added to the cart as part of an upsell.</param>
        /// <param name="Variations">Variations.</param>
        /// <param name="ViewUrl">URL to view the product on the site.</param>
        public CartItem(Currency ArbitraryUnitCost = default(Currency), List<CartItemAttribute> Attributes = default(List<CartItemAttribute>), string AutoOrderSchedule = default(string), string DefaultImageUrl = default(string), string DefaultThumbnailUrl = default(string), string Description = default(string), Currency Discount = default(Currency), string ExtendedDescription = default(string), string ItemId = default(string), int? ItemOid = default(int?), bool? Kit = default(bool?), List<CartKitComponentOption> KitComponentOptions = default(List<CartKitComponentOption>), Currency ManufacturerSuggestedRetailPrice = default(Currency), decimal? MaximumQuantity = default(decimal?), decimal? MinimumQuantity = default(decimal?), List<CartItemMultimedia> Multimedia = default(List<CartItemMultimedia>), List<CartItemOption> Options = default(List<CartItemOption>), CartItemPhysical Phsyical = default(CartItemPhysical), int? Position = default(int?), bool? Preorder = default(bool?), decimal? Quantity = default(decimal?), List<string> Schedules = default(List<string>), Currency TotalCost = default(Currency), Currency TotalCostWithDiscount = default(Currency), Currency UnitCost = default(Currency), Currency UnitCostWithDiscount = default(Currency), bool? Upsell = default(bool?), List<CartItemVariationSelection> Variations = default(List<CartItemVariationSelection>), string ViewUrl = default(string))
        {
            this.ArbitraryUnitCost = ArbitraryUnitCost;
            this.Attributes = Attributes;
            this.AutoOrderSchedule = AutoOrderSchedule;
            this.DefaultImageUrl = DefaultImageUrl;
            this.DefaultThumbnailUrl = DefaultThumbnailUrl;
            this.Description = Description;
            this.Discount = Discount;
            this.ExtendedDescription = ExtendedDescription;
            this.ItemId = ItemId;
            this.ItemOid = ItemOid;
            this.Kit = Kit;
            this.KitComponentOptions = KitComponentOptions;
            this.ManufacturerSuggestedRetailPrice = ManufacturerSuggestedRetailPrice;
            this.MaximumQuantity = MaximumQuantity;
            this.MinimumQuantity = MinimumQuantity;
            this.Multimedia = Multimedia;
            this.Options = Options;
            this.Phsyical = Phsyical;
            this.Position = Position;
            this.Preorder = Preorder;
            this.Quantity = Quantity;
            this.Schedules = Schedules;
            this.TotalCost = TotalCost;
            this.TotalCostWithDiscount = TotalCostWithDiscount;
            this.UnitCost = UnitCost;
            this.UnitCostWithDiscount = UnitCostWithDiscount;
            this.Upsell = Upsell;
            this.Variations = Variations;
            this.ViewUrl = ViewUrl;
        }
        
        /// <summary>
        /// Gets or Sets ArbitraryUnitCost
        /// </summary>
        [DataMember(Name="arbitrary_unit_cost", EmitDefaultValue=false)]
        public Currency ArbitraryUnitCost { get; set; }

        /// <summary>
        /// Attributes
        /// </summary>
        /// <value>Attributes</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public List<CartItemAttribute> Attributes { get; set; }

        /// <summary>
        /// Auto order schedule the customer selected
        /// </summary>
        /// <value>Auto order schedule the customer selected</value>
        [DataMember(Name="auto_order_schedule", EmitDefaultValue=false)]
        public string AutoOrderSchedule { get; set; }

        /// <summary>
        /// URL to the default multimedia image
        /// </summary>
        /// <value>URL to the default multimedia image</value>
        [DataMember(Name="default_image_url", EmitDefaultValue=false)]
        public string DefaultImageUrl { get; set; }

        /// <summary>
        /// URL to the default multimedia thumbnail
        /// </summary>
        /// <value>URL to the default multimedia thumbnail</value>
        [DataMember(Name="default_thumbnail_url", EmitDefaultValue=false)]
        public string DefaultThumbnailUrl { get; set; }

        /// <summary>
        /// Description of the item
        /// </summary>
        /// <value>Description of the item</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public Currency Discount { get; set; }

        /// <summary>
        /// Extended description of the item
        /// </summary>
        /// <value>Extended description of the item</value>
        [DataMember(Name="extended_description", EmitDefaultValue=false)]
        public string ExtendedDescription { get; set; }

        /// <summary>
        /// Item ID
        /// </summary>
        /// <value>Item ID</value>
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Item object identifier
        /// </summary>
        /// <value>Item object identifier</value>
        [DataMember(Name="item_oid", EmitDefaultValue=false)]
        public int? ItemOid { get; set; }

        /// <summary>
        /// True if this item is a kit
        /// </summary>
        /// <value>True if this item is a kit</value>
        [DataMember(Name="kit", EmitDefaultValue=false)]
        public bool? Kit { get; set; }

        /// <summary>
        /// Options associated with the kit components
        /// </summary>
        /// <value>Options associated with the kit components</value>
        [DataMember(Name="kit_component_options", EmitDefaultValue=false)]
        public List<CartKitComponentOption> KitComponentOptions { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerSuggestedRetailPrice
        /// </summary>
        [DataMember(Name="manufacturer_suggested_retail_price", EmitDefaultValue=false)]
        public Currency ManufacturerSuggestedRetailPrice { get; set; }

        /// <summary>
        /// Maximum quantity the customer can purchase
        /// </summary>
        /// <value>Maximum quantity the customer can purchase</value>
        [DataMember(Name="maximum_quantity", EmitDefaultValue=false)]
        public decimal? MaximumQuantity { get; set; }

        /// <summary>
        /// Minimum quantity the customer can purchase
        /// </summary>
        /// <value>Minimum quantity the customer can purchase</value>
        [DataMember(Name="minimum_quantity", EmitDefaultValue=false)]
        public decimal? MinimumQuantity { get; set; }

        /// <summary>
        /// Multimedia
        /// </summary>
        /// <value>Multimedia</value>
        [DataMember(Name="multimedia", EmitDefaultValue=false)]
        public List<CartItemMultimedia> Multimedia { get; set; }

        /// <summary>
        /// Options
        /// </summary>
        /// <value>Options</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<CartItemOption> Options { get; set; }

        /// <summary>
        /// Gets or Sets Phsyical
        /// </summary>
        [DataMember(Name="phsyical", EmitDefaultValue=false)]
        public CartItemPhysical Phsyical { get; set; }

        /// <summary>
        /// Position of the item in the cart
        /// </summary>
        /// <value>Position of the item in the cart</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// True if this item is on pre-order
        /// </summary>
        /// <value>True if this item is on pre-order</value>
        [DataMember(Name="preorder", EmitDefaultValue=false)]
        public bool? Preorder { get; set; }

        /// <summary>
        /// quantity
        /// </summary>
        /// <value>quantity</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// Customer selectable auto order schedules
        /// </summary>
        /// <value>Customer selectable auto order schedules</value>
        [DataMember(Name="schedules", EmitDefaultValue=false)]
        public List<string> Schedules { get; set; }

        /// <summary>
        /// Gets or Sets TotalCost
        /// </summary>
        [DataMember(Name="total_cost", EmitDefaultValue=false)]
        public Currency TotalCost { get; set; }

        /// <summary>
        /// Gets or Sets TotalCostWithDiscount
        /// </summary>
        [DataMember(Name="total_cost_with_discount", EmitDefaultValue=false)]
        public Currency TotalCostWithDiscount { get; set; }

        /// <summary>
        /// Gets or Sets UnitCost
        /// </summary>
        [DataMember(Name="unit_cost", EmitDefaultValue=false)]
        public Currency UnitCost { get; set; }

        /// <summary>
        /// Gets or Sets UnitCostWithDiscount
        /// </summary>
        [DataMember(Name="unit_cost_with_discount", EmitDefaultValue=false)]
        public Currency UnitCostWithDiscount { get; set; }

        /// <summary>
        /// True if this item was added to the cart as part of an upsell
        /// </summary>
        /// <value>True if this item was added to the cart as part of an upsell</value>
        [DataMember(Name="upsell", EmitDefaultValue=false)]
        public bool? Upsell { get; set; }

        /// <summary>
        /// Variations
        /// </summary>
        /// <value>Variations</value>
        [DataMember(Name="variations", EmitDefaultValue=false)]
        public List<CartItemVariationSelection> Variations { get; set; }

        /// <summary>
        /// URL to view the product on the site
        /// </summary>
        /// <value>URL to view the product on the site</value>
        [DataMember(Name="view_url", EmitDefaultValue=false)]
        public string ViewUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartItem {\n");
            sb.Append("  ArbitraryUnitCost: ").Append(ArbitraryUnitCost).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  AutoOrderSchedule: ").Append(AutoOrderSchedule).Append("\n");
            sb.Append("  DefaultImageUrl: ").Append(DefaultImageUrl).Append("\n");
            sb.Append("  DefaultThumbnailUrl: ").Append(DefaultThumbnailUrl).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  ExtendedDescription: ").Append(ExtendedDescription).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemOid: ").Append(ItemOid).Append("\n");
            sb.Append("  Kit: ").Append(Kit).Append("\n");
            sb.Append("  KitComponentOptions: ").Append(KitComponentOptions).Append("\n");
            sb.Append("  ManufacturerSuggestedRetailPrice: ").Append(ManufacturerSuggestedRetailPrice).Append("\n");
            sb.Append("  MaximumQuantity: ").Append(MaximumQuantity).Append("\n");
            sb.Append("  MinimumQuantity: ").Append(MinimumQuantity).Append("\n");
            sb.Append("  Multimedia: ").Append(Multimedia).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Phsyical: ").Append(Phsyical).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Preorder: ").Append(Preorder).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Schedules: ").Append(Schedules).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  TotalCostWithDiscount: ").Append(TotalCostWithDiscount).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  UnitCostWithDiscount: ").Append(UnitCostWithDiscount).Append("\n");
            sb.Append("  Upsell: ").Append(Upsell).Append("\n");
            sb.Append("  Variations: ").Append(Variations).Append("\n");
            sb.Append("  ViewUrl: ").Append(ViewUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartItem);
        }

        /// <summary>
        /// Returns true if CartItem instances are equal
        /// </summary>
        /// <param name="input">Instance of CartItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ArbitraryUnitCost == input.ArbitraryUnitCost ||
                    (this.ArbitraryUnitCost != null &&
                    this.ArbitraryUnitCost.Equals(input.ArbitraryUnitCost))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.AutoOrderSchedule == input.AutoOrderSchedule ||
                    (this.AutoOrderSchedule != null &&
                    this.AutoOrderSchedule.Equals(input.AutoOrderSchedule))
                ) && 
                (
                    this.DefaultImageUrl == input.DefaultImageUrl ||
                    (this.DefaultImageUrl != null &&
                    this.DefaultImageUrl.Equals(input.DefaultImageUrl))
                ) && 
                (
                    this.DefaultThumbnailUrl == input.DefaultThumbnailUrl ||
                    (this.DefaultThumbnailUrl != null &&
                    this.DefaultThumbnailUrl.Equals(input.DefaultThumbnailUrl))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Discount == input.Discount ||
                    (this.Discount != null &&
                    this.Discount.Equals(input.Discount))
                ) && 
                (
                    this.ExtendedDescription == input.ExtendedDescription ||
                    (this.ExtendedDescription != null &&
                    this.ExtendedDescription.Equals(input.ExtendedDescription))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.ItemOid == input.ItemOid ||
                    (this.ItemOid != null &&
                    this.ItemOid.Equals(input.ItemOid))
                ) && 
                (
                    this.Kit == input.Kit ||
                    (this.Kit != null &&
                    this.Kit.Equals(input.Kit))
                ) && 
                (
                    this.KitComponentOptions == input.KitComponentOptions ||
                    this.KitComponentOptions != null &&
                    this.KitComponentOptions.SequenceEqual(input.KitComponentOptions)
                ) && 
                (
                    this.ManufacturerSuggestedRetailPrice == input.ManufacturerSuggestedRetailPrice ||
                    (this.ManufacturerSuggestedRetailPrice != null &&
                    this.ManufacturerSuggestedRetailPrice.Equals(input.ManufacturerSuggestedRetailPrice))
                ) && 
                (
                    this.MaximumQuantity == input.MaximumQuantity ||
                    (this.MaximumQuantity != null &&
                    this.MaximumQuantity.Equals(input.MaximumQuantity))
                ) && 
                (
                    this.MinimumQuantity == input.MinimumQuantity ||
                    (this.MinimumQuantity != null &&
                    this.MinimumQuantity.Equals(input.MinimumQuantity))
                ) && 
                (
                    this.Multimedia == input.Multimedia ||
                    this.Multimedia != null &&
                    this.Multimedia.SequenceEqual(input.Multimedia)
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.Phsyical == input.Phsyical ||
                    (this.Phsyical != null &&
                    this.Phsyical.Equals(input.Phsyical))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Preorder == input.Preorder ||
                    (this.Preorder != null &&
                    this.Preorder.Equals(input.Preorder))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Schedules == input.Schedules ||
                    this.Schedules != null &&
                    this.Schedules.SequenceEqual(input.Schedules)
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    (this.TotalCost != null &&
                    this.TotalCost.Equals(input.TotalCost))
                ) && 
                (
                    this.TotalCostWithDiscount == input.TotalCostWithDiscount ||
                    (this.TotalCostWithDiscount != null &&
                    this.TotalCostWithDiscount.Equals(input.TotalCostWithDiscount))
                ) && 
                (
                    this.UnitCost == input.UnitCost ||
                    (this.UnitCost != null &&
                    this.UnitCost.Equals(input.UnitCost))
                ) && 
                (
                    this.UnitCostWithDiscount == input.UnitCostWithDiscount ||
                    (this.UnitCostWithDiscount != null &&
                    this.UnitCostWithDiscount.Equals(input.UnitCostWithDiscount))
                ) && 
                (
                    this.Upsell == input.Upsell ||
                    (this.Upsell != null &&
                    this.Upsell.Equals(input.Upsell))
                ) && 
                (
                    this.Variations == input.Variations ||
                    this.Variations != null &&
                    this.Variations.SequenceEqual(input.Variations)
                ) && 
                (
                    this.ViewUrl == input.ViewUrl ||
                    (this.ViewUrl != null &&
                    this.ViewUrl.Equals(input.ViewUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArbitraryUnitCost != null)
                    hashCode = hashCode * 59 + this.ArbitraryUnitCost.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.AutoOrderSchedule != null)
                    hashCode = hashCode * 59 + this.AutoOrderSchedule.GetHashCode();
                if (this.DefaultImageUrl != null)
                    hashCode = hashCode * 59 + this.DefaultImageUrl.GetHashCode();
                if (this.DefaultThumbnailUrl != null)
                    hashCode = hashCode * 59 + this.DefaultThumbnailUrl.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Discount != null)
                    hashCode = hashCode * 59 + this.Discount.GetHashCode();
                if (this.ExtendedDescription != null)
                    hashCode = hashCode * 59 + this.ExtendedDescription.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.ItemOid != null)
                    hashCode = hashCode * 59 + this.ItemOid.GetHashCode();
                if (this.Kit != null)
                    hashCode = hashCode * 59 + this.Kit.GetHashCode();
                if (this.KitComponentOptions != null)
                    hashCode = hashCode * 59 + this.KitComponentOptions.GetHashCode();
                if (this.ManufacturerSuggestedRetailPrice != null)
                    hashCode = hashCode * 59 + this.ManufacturerSuggestedRetailPrice.GetHashCode();
                if (this.MaximumQuantity != null)
                    hashCode = hashCode * 59 + this.MaximumQuantity.GetHashCode();
                if (this.MinimumQuantity != null)
                    hashCode = hashCode * 59 + this.MinimumQuantity.GetHashCode();
                if (this.Multimedia != null)
                    hashCode = hashCode * 59 + this.Multimedia.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.Phsyical != null)
                    hashCode = hashCode * 59 + this.Phsyical.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Preorder != null)
                    hashCode = hashCode * 59 + this.Preorder.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Schedules != null)
                    hashCode = hashCode * 59 + this.Schedules.GetHashCode();
                if (this.TotalCost != null)
                    hashCode = hashCode * 59 + this.TotalCost.GetHashCode();
                if (this.TotalCostWithDiscount != null)
                    hashCode = hashCode * 59 + this.TotalCostWithDiscount.GetHashCode();
                if (this.UnitCost != null)
                    hashCode = hashCode * 59 + this.UnitCost.GetHashCode();
                if (this.UnitCostWithDiscount != null)
                    hashCode = hashCode * 59 + this.UnitCostWithDiscount.GetHashCode();
                if (this.Upsell != null)
                    hashCode = hashCode * 59 + this.Upsell.GetHashCode();
                if (this.Variations != null)
                    hashCode = hashCode * 59 + this.Variations.GetHashCode();
                if (this.ViewUrl != null)
                    hashCode = hashCode * 59 + this.ViewUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
