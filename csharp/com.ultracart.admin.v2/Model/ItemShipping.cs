/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemShipping
    /// </summary>
    [DataContract]
    public partial class ItemShipping :  IEquatable<ItemShipping>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemShipping" /> class.
        /// </summary>
        /// <param name="AllowBackOrder">Allow back order.</param>
        /// <param name="AmazonFba">Fulfillment by Amazon.com.</param>
        /// <param name="CaseInnerPacks">Case inner packs.</param>
        /// <param name="CaseUnits">Case units.</param>
        /// <param name="Cases">Cases.</param>
        /// <param name="CollectSerialNumbers">This item is on pre-order.</param>
        /// <param name="CountryCodeOfOrigin">Country code of origin for customs forms.  (ISO-3166 two letter code).</param>
        /// <param name="CustomsDescription">Customs description.</param>
        /// <param name="CustomsValue">Customs value.</param>
        /// <param name="DeliveryOnFriday">Delivery on Friday.</param>
        /// <param name="DeliveryOnMonday">Delivery on Monday.</param>
        /// <param name="DeliveryOnSaturday">Delivery on Saturday.</param>
        /// <param name="DeliveryOnSunday">Delivery on Sunday.</param>
        /// <param name="DeliveryOnThursday">Delivery on Thursday.</param>
        /// <param name="DeliveryOnTuesday">Delivery on Tuesday.</param>
        /// <param name="DeliveryOnWednesday">Delivery on Wednesday.</param>
        /// <param name="DestinationMarkups">Destination markups.</param>
        /// <param name="DestinationRestrictions">Destination restrictions.</param>
        /// <param name="DistributionCenters">Distribution centers.</param>
        /// <param name="Eta">Estimated time of arrival.</param>
        /// <param name="FreeShipping">Qualifies for free shipping.</param>
        /// <param name="FreightClass">Freight class.</param>
        /// <param name="Hazmat">Hazardous material.</param>
        /// <param name="MadeToOrder">True if this item is made to order.</param>
        /// <param name="MadeToOrderLeadTime">Number of days lead time it takes to make the item before ite can ship.</param>
        /// <param name="MaxDaysTimeInTransit">Maximum days allowed in transit.</param>
        /// <param name="Methods">Methods.</param>
        /// <param name="NoShippingDiscount">No shipping discounts.</param>
        /// <param name="PackageRequirements">Package requirements.</param>
        /// <param name="PerishableClassName">Perishable class name.</param>
        /// <param name="PerishableClassOid">Perishable class object identifier.</param>
        /// <param name="Preorder">This item is on pre-order.</param>
        /// <param name="RequireDeliveryDate">True to require customer to select a delivery date.</param>
        /// <param name="RestrictShipmentOnFriday">Restrict shipment on Friday.</param>
        /// <param name="RestrictShipmentOnMonday">Restrict shipment on Monday.</param>
        /// <param name="RestrictShipmentOnSaturday">Restrict shipment on Saturday.</param>
        /// <param name="RestrictShipmentOnSunday">Restrict shipment on Sunday.</param>
        /// <param name="RestrictShipmentOnThursday">Restrict shipment on Thursday.</param>
        /// <param name="RestrictShipmentOnTuesday">Restrict shipment on Tuesday.</param>
        /// <param name="RestrictShipmentOnWednesday">Restrict shipment on Wednesday.</param>
        /// <param name="ShipSeparately">Ship this item in a separate box.</param>
        /// <param name="ShipSeparatelyAdditionalWeight">ShipSeparatelyAdditionalWeight.</param>
        /// <param name="ShipSeparatelyHeight">ShipSeparatelyHeight.</param>
        /// <param name="ShipSeparatelyLength">ShipSeparatelyLength.</param>
        /// <param name="ShipSeparatelyPackageSpecialType">Ship separately package special type.</param>
        /// <param name="ShipSeparatelyWidth">ShipSeparatelyWidth.</param>
        /// <param name="SpecialProductType">Special product type (USPS Media Mail).</param>
        /// <param name="TrackInventory">Track inventory.</param>
        public ItemShipping(bool? AllowBackOrder = default(bool?), bool? AmazonFba = default(bool?), int? CaseInnerPacks = default(int?), int? CaseUnits = default(int?), List<ItemShippingCase> Cases = default(List<ItemShippingCase>), bool? CollectSerialNumbers = default(bool?), string CountryCodeOfOrigin = default(string), string CustomsDescription = default(string), decimal? CustomsValue = default(decimal?), bool? DeliveryOnFriday = default(bool?), bool? DeliveryOnMonday = default(bool?), bool? DeliveryOnSaturday = default(bool?), bool? DeliveryOnSunday = default(bool?), bool? DeliveryOnThursday = default(bool?), bool? DeliveryOnTuesday = default(bool?), bool? DeliveryOnWednesday = default(bool?), List<ItemShippingDestinationMarkup> DestinationMarkups = default(List<ItemShippingDestinationMarkup>), List<ItemShippingDestinationRestriction> DestinationRestrictions = default(List<ItemShippingDestinationRestriction>), List<ItemShippingDistributionCenter> DistributionCenters = default(List<ItemShippingDistributionCenter>), string Eta = default(string), bool? FreeShipping = default(bool?), string FreightClass = default(string), bool? Hazmat = default(bool?), bool? MadeToOrder = default(bool?), int? MadeToOrderLeadTime = default(int?), int? MaxDaysTimeInTransit = default(int?), List<ItemShippingMethod> Methods = default(List<ItemShippingMethod>), bool? NoShippingDiscount = default(bool?), List<ItemShippingPackageRequirement> PackageRequirements = default(List<ItemShippingPackageRequirement>), string PerishableClassName = default(string), int? PerishableClassOid = default(int?), bool? Preorder = default(bool?), bool? RequireDeliveryDate = default(bool?), bool? RestrictShipmentOnFriday = default(bool?), bool? RestrictShipmentOnMonday = default(bool?), bool? RestrictShipmentOnSaturday = default(bool?), bool? RestrictShipmentOnSunday = default(bool?), bool? RestrictShipmentOnThursday = default(bool?), bool? RestrictShipmentOnTuesday = default(bool?), bool? RestrictShipmentOnWednesday = default(bool?), bool? ShipSeparately = default(bool?), Weight ShipSeparatelyAdditionalWeight = default(Weight), Distance ShipSeparatelyHeight = default(Distance), Distance ShipSeparatelyLength = default(Distance), string ShipSeparatelyPackageSpecialType = default(string), Distance ShipSeparatelyWidth = default(Distance), string SpecialProductType = default(string), bool? TrackInventory = default(bool?))
        {
            this.AllowBackOrder = AllowBackOrder;
            this.AmazonFba = AmazonFba;
            this.CaseInnerPacks = CaseInnerPacks;
            this.CaseUnits = CaseUnits;
            this.Cases = Cases;
            this.CollectSerialNumbers = CollectSerialNumbers;
            this.CountryCodeOfOrigin = CountryCodeOfOrigin;
            this.CustomsDescription = CustomsDescription;
            this.CustomsValue = CustomsValue;
            this.DeliveryOnFriday = DeliveryOnFriday;
            this.DeliveryOnMonday = DeliveryOnMonday;
            this.DeliveryOnSaturday = DeliveryOnSaturday;
            this.DeliveryOnSunday = DeliveryOnSunday;
            this.DeliveryOnThursday = DeliveryOnThursday;
            this.DeliveryOnTuesday = DeliveryOnTuesday;
            this.DeliveryOnWednesday = DeliveryOnWednesday;
            this.DestinationMarkups = DestinationMarkups;
            this.DestinationRestrictions = DestinationRestrictions;
            this.DistributionCenters = DistributionCenters;
            this.Eta = Eta;
            this.FreeShipping = FreeShipping;
            this.FreightClass = FreightClass;
            this.Hazmat = Hazmat;
            this.MadeToOrder = MadeToOrder;
            this.MadeToOrderLeadTime = MadeToOrderLeadTime;
            this.MaxDaysTimeInTransit = MaxDaysTimeInTransit;
            this.Methods = Methods;
            this.NoShippingDiscount = NoShippingDiscount;
            this.PackageRequirements = PackageRequirements;
            this.PerishableClassName = PerishableClassName;
            this.PerishableClassOid = PerishableClassOid;
            this.Preorder = Preorder;
            this.RequireDeliveryDate = RequireDeliveryDate;
            this.RestrictShipmentOnFriday = RestrictShipmentOnFriday;
            this.RestrictShipmentOnMonday = RestrictShipmentOnMonday;
            this.RestrictShipmentOnSaturday = RestrictShipmentOnSaturday;
            this.RestrictShipmentOnSunday = RestrictShipmentOnSunday;
            this.RestrictShipmentOnThursday = RestrictShipmentOnThursday;
            this.RestrictShipmentOnTuesday = RestrictShipmentOnTuesday;
            this.RestrictShipmentOnWednesday = RestrictShipmentOnWednesday;
            this.ShipSeparately = ShipSeparately;
            this.ShipSeparatelyAdditionalWeight = ShipSeparatelyAdditionalWeight;
            this.ShipSeparatelyHeight = ShipSeparatelyHeight;
            this.ShipSeparatelyLength = ShipSeparatelyLength;
            this.ShipSeparatelyPackageSpecialType = ShipSeparatelyPackageSpecialType;
            this.ShipSeparatelyWidth = ShipSeparatelyWidth;
            this.SpecialProductType = SpecialProductType;
            this.TrackInventory = TrackInventory;
        }
        
        /// <summary>
        /// Allow back order
        /// </summary>
        /// <value>Allow back order</value>
        [DataMember(Name="allow_back_order", EmitDefaultValue=false)]
        public bool? AllowBackOrder { get; set; }

        /// <summary>
        /// Fulfillment by Amazon.com
        /// </summary>
        /// <value>Fulfillment by Amazon.com</value>
        [DataMember(Name="amazon_fba", EmitDefaultValue=false)]
        public bool? AmazonFba { get; set; }

        /// <summary>
        /// Case inner packs
        /// </summary>
        /// <value>Case inner packs</value>
        [DataMember(Name="case_inner_packs", EmitDefaultValue=false)]
        public int? CaseInnerPacks { get; set; }

        /// <summary>
        /// Case units
        /// </summary>
        /// <value>Case units</value>
        [DataMember(Name="case_units", EmitDefaultValue=false)]
        public int? CaseUnits { get; set; }

        /// <summary>
        /// Cases
        /// </summary>
        /// <value>Cases</value>
        [DataMember(Name="cases", EmitDefaultValue=false)]
        public List<ItemShippingCase> Cases { get; set; }

        /// <summary>
        /// This item is on pre-order
        /// </summary>
        /// <value>This item is on pre-order</value>
        [DataMember(Name="collect_serial_numbers", EmitDefaultValue=false)]
        public bool? CollectSerialNumbers { get; set; }

        /// <summary>
        /// Country code of origin for customs forms.  (ISO-3166 two letter code)
        /// </summary>
        /// <value>Country code of origin for customs forms.  (ISO-3166 two letter code)</value>
        [DataMember(Name="country_code_of_origin", EmitDefaultValue=false)]
        public string CountryCodeOfOrigin { get; set; }

        /// <summary>
        /// Customs description
        /// </summary>
        /// <value>Customs description</value>
        [DataMember(Name="customs_description", EmitDefaultValue=false)]
        public string CustomsDescription { get; set; }

        /// <summary>
        /// Customs value
        /// </summary>
        /// <value>Customs value</value>
        [DataMember(Name="customs_value", EmitDefaultValue=false)]
        public decimal? CustomsValue { get; set; }

        /// <summary>
        /// Delivery on Friday
        /// </summary>
        /// <value>Delivery on Friday</value>
        [DataMember(Name="delivery_on_friday", EmitDefaultValue=false)]
        public bool? DeliveryOnFriday { get; set; }

        /// <summary>
        /// Delivery on Monday
        /// </summary>
        /// <value>Delivery on Monday</value>
        [DataMember(Name="delivery_on_monday", EmitDefaultValue=false)]
        public bool? DeliveryOnMonday { get; set; }

        /// <summary>
        /// Delivery on Saturday
        /// </summary>
        /// <value>Delivery on Saturday</value>
        [DataMember(Name="delivery_on_saturday", EmitDefaultValue=false)]
        public bool? DeliveryOnSaturday { get; set; }

        /// <summary>
        /// Delivery on Sunday
        /// </summary>
        /// <value>Delivery on Sunday</value>
        [DataMember(Name="delivery_on_sunday", EmitDefaultValue=false)]
        public bool? DeliveryOnSunday { get; set; }

        /// <summary>
        /// Delivery on Thursday
        /// </summary>
        /// <value>Delivery on Thursday</value>
        [DataMember(Name="delivery_on_thursday", EmitDefaultValue=false)]
        public bool? DeliveryOnThursday { get; set; }

        /// <summary>
        /// Delivery on Tuesday
        /// </summary>
        /// <value>Delivery on Tuesday</value>
        [DataMember(Name="delivery_on_tuesday", EmitDefaultValue=false)]
        public bool? DeliveryOnTuesday { get; set; }

        /// <summary>
        /// Delivery on Wednesday
        /// </summary>
        /// <value>Delivery on Wednesday</value>
        [DataMember(Name="delivery_on_wednesday", EmitDefaultValue=false)]
        public bool? DeliveryOnWednesday { get; set; }

        /// <summary>
        /// Destination markups
        /// </summary>
        /// <value>Destination markups</value>
        [DataMember(Name="destination_markups", EmitDefaultValue=false)]
        public List<ItemShippingDestinationMarkup> DestinationMarkups { get; set; }

        /// <summary>
        /// Destination restrictions
        /// </summary>
        /// <value>Destination restrictions</value>
        [DataMember(Name="destination_restrictions", EmitDefaultValue=false)]
        public List<ItemShippingDestinationRestriction> DestinationRestrictions { get; set; }

        /// <summary>
        /// Distribution centers
        /// </summary>
        /// <value>Distribution centers</value>
        [DataMember(Name="distribution_centers", EmitDefaultValue=false)]
        public List<ItemShippingDistributionCenter> DistributionCenters { get; set; }

        /// <summary>
        /// Estimated time of arrival
        /// </summary>
        /// <value>Estimated time of arrival</value>
        [DataMember(Name="eta", EmitDefaultValue=false)]
        public string Eta { get; set; }

        /// <summary>
        /// Qualifies for free shipping
        /// </summary>
        /// <value>Qualifies for free shipping</value>
        [DataMember(Name="free_shipping", EmitDefaultValue=false)]
        public bool? FreeShipping { get; set; }

        /// <summary>
        /// Freight class
        /// </summary>
        /// <value>Freight class</value>
        [DataMember(Name="freight_class", EmitDefaultValue=false)]
        public string FreightClass { get; set; }

        /// <summary>
        /// Hazardous material
        /// </summary>
        /// <value>Hazardous material</value>
        [DataMember(Name="hazmat", EmitDefaultValue=false)]
        public bool? Hazmat { get; set; }

        /// <summary>
        /// True if this item is made to order
        /// </summary>
        /// <value>True if this item is made to order</value>
        [DataMember(Name="made_to_order", EmitDefaultValue=false)]
        public bool? MadeToOrder { get; set; }

        /// <summary>
        /// Number of days lead time it takes to make the item before ite can ship
        /// </summary>
        /// <value>Number of days lead time it takes to make the item before ite can ship</value>
        [DataMember(Name="made_to_order_lead_time", EmitDefaultValue=false)]
        public int? MadeToOrderLeadTime { get; set; }

        /// <summary>
        /// Maximum days allowed in transit
        /// </summary>
        /// <value>Maximum days allowed in transit</value>
        [DataMember(Name="max_days_time_in_transit", EmitDefaultValue=false)]
        public int? MaxDaysTimeInTransit { get; set; }

        /// <summary>
        /// Methods
        /// </summary>
        /// <value>Methods</value>
        [DataMember(Name="methods", EmitDefaultValue=false)]
        public List<ItemShippingMethod> Methods { get; set; }

        /// <summary>
        /// No shipping discounts
        /// </summary>
        /// <value>No shipping discounts</value>
        [DataMember(Name="no_shipping_discount", EmitDefaultValue=false)]
        public bool? NoShippingDiscount { get; set; }

        /// <summary>
        /// Package requirements
        /// </summary>
        /// <value>Package requirements</value>
        [DataMember(Name="package_requirements", EmitDefaultValue=false)]
        public List<ItemShippingPackageRequirement> PackageRequirements { get; set; }

        /// <summary>
        /// Perishable class name
        /// </summary>
        /// <value>Perishable class name</value>
        [DataMember(Name="perishable_class_name", EmitDefaultValue=false)]
        public string PerishableClassName { get; set; }

        /// <summary>
        /// Perishable class object identifier
        /// </summary>
        /// <value>Perishable class object identifier</value>
        [DataMember(Name="perishable_class_oid", EmitDefaultValue=false)]
        public int? PerishableClassOid { get; set; }

        /// <summary>
        /// This item is on pre-order
        /// </summary>
        /// <value>This item is on pre-order</value>
        [DataMember(Name="preorder", EmitDefaultValue=false)]
        public bool? Preorder { get; set; }

        /// <summary>
        /// True to require customer to select a delivery date
        /// </summary>
        /// <value>True to require customer to select a delivery date</value>
        [DataMember(Name="require_delivery_date", EmitDefaultValue=false)]
        public bool? RequireDeliveryDate { get; set; }

        /// <summary>
        /// Restrict shipment on Friday
        /// </summary>
        /// <value>Restrict shipment on Friday</value>
        [DataMember(Name="restrict_shipment_on_friday", EmitDefaultValue=false)]
        public bool? RestrictShipmentOnFriday { get; set; }

        /// <summary>
        /// Restrict shipment on Monday
        /// </summary>
        /// <value>Restrict shipment on Monday</value>
        [DataMember(Name="restrict_shipment_on_monday", EmitDefaultValue=false)]
        public bool? RestrictShipmentOnMonday { get; set; }

        /// <summary>
        /// Restrict shipment on Saturday
        /// </summary>
        /// <value>Restrict shipment on Saturday</value>
        [DataMember(Name="restrict_shipment_on_saturday", EmitDefaultValue=false)]
        public bool? RestrictShipmentOnSaturday { get; set; }

        /// <summary>
        /// Restrict shipment on Sunday
        /// </summary>
        /// <value>Restrict shipment on Sunday</value>
        [DataMember(Name="restrict_shipment_on_sunday", EmitDefaultValue=false)]
        public bool? RestrictShipmentOnSunday { get; set; }

        /// <summary>
        /// Restrict shipment on Thursday
        /// </summary>
        /// <value>Restrict shipment on Thursday</value>
        [DataMember(Name="restrict_shipment_on_thursday", EmitDefaultValue=false)]
        public bool? RestrictShipmentOnThursday { get; set; }

        /// <summary>
        /// Restrict shipment on Tuesday
        /// </summary>
        /// <value>Restrict shipment on Tuesday</value>
        [DataMember(Name="restrict_shipment_on_tuesday", EmitDefaultValue=false)]
        public bool? RestrictShipmentOnTuesday { get; set; }

        /// <summary>
        /// Restrict shipment on Wednesday
        /// </summary>
        /// <value>Restrict shipment on Wednesday</value>
        [DataMember(Name="restrict_shipment_on_wednesday", EmitDefaultValue=false)]
        public bool? RestrictShipmentOnWednesday { get; set; }

        /// <summary>
        /// Ship this item in a separate box
        /// </summary>
        /// <value>Ship this item in a separate box</value>
        [DataMember(Name="ship_separately", EmitDefaultValue=false)]
        public bool? ShipSeparately { get; set; }

        /// <summary>
        /// Gets or Sets ShipSeparatelyAdditionalWeight
        /// </summary>
        [DataMember(Name="ship_separately_additional_weight", EmitDefaultValue=false)]
        public Weight ShipSeparatelyAdditionalWeight { get; set; }

        /// <summary>
        /// Gets or Sets ShipSeparatelyHeight
        /// </summary>
        [DataMember(Name="ship_separately_height", EmitDefaultValue=false)]
        public Distance ShipSeparatelyHeight { get; set; }

        /// <summary>
        /// Gets or Sets ShipSeparatelyLength
        /// </summary>
        [DataMember(Name="ship_separately_length", EmitDefaultValue=false)]
        public Distance ShipSeparatelyLength { get; set; }

        /// <summary>
        /// Ship separately package special type
        /// </summary>
        /// <value>Ship separately package special type</value>
        [DataMember(Name="ship_separately_package_special_type", EmitDefaultValue=false)]
        public string ShipSeparatelyPackageSpecialType { get; set; }

        /// <summary>
        /// Gets or Sets ShipSeparatelyWidth
        /// </summary>
        [DataMember(Name="ship_separately_width", EmitDefaultValue=false)]
        public Distance ShipSeparatelyWidth { get; set; }

        /// <summary>
        /// Special product type (USPS Media Mail)
        /// </summary>
        /// <value>Special product type (USPS Media Mail)</value>
        [DataMember(Name="special_product_type", EmitDefaultValue=false)]
        public string SpecialProductType { get; set; }

        /// <summary>
        /// Track inventory
        /// </summary>
        /// <value>Track inventory</value>
        [DataMember(Name="track_inventory", EmitDefaultValue=false)]
        public bool? TrackInventory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemShipping {\n");
            sb.Append("  AllowBackOrder: ").Append(AllowBackOrder).Append("\n");
            sb.Append("  AmazonFba: ").Append(AmazonFba).Append("\n");
            sb.Append("  CaseInnerPacks: ").Append(CaseInnerPacks).Append("\n");
            sb.Append("  CaseUnits: ").Append(CaseUnits).Append("\n");
            sb.Append("  Cases: ").Append(Cases).Append("\n");
            sb.Append("  CollectSerialNumbers: ").Append(CollectSerialNumbers).Append("\n");
            sb.Append("  CountryCodeOfOrigin: ").Append(CountryCodeOfOrigin).Append("\n");
            sb.Append("  CustomsDescription: ").Append(CustomsDescription).Append("\n");
            sb.Append("  CustomsValue: ").Append(CustomsValue).Append("\n");
            sb.Append("  DeliveryOnFriday: ").Append(DeliveryOnFriday).Append("\n");
            sb.Append("  DeliveryOnMonday: ").Append(DeliveryOnMonday).Append("\n");
            sb.Append("  DeliveryOnSaturday: ").Append(DeliveryOnSaturday).Append("\n");
            sb.Append("  DeliveryOnSunday: ").Append(DeliveryOnSunday).Append("\n");
            sb.Append("  DeliveryOnThursday: ").Append(DeliveryOnThursday).Append("\n");
            sb.Append("  DeliveryOnTuesday: ").Append(DeliveryOnTuesday).Append("\n");
            sb.Append("  DeliveryOnWednesday: ").Append(DeliveryOnWednesday).Append("\n");
            sb.Append("  DestinationMarkups: ").Append(DestinationMarkups).Append("\n");
            sb.Append("  DestinationRestrictions: ").Append(DestinationRestrictions).Append("\n");
            sb.Append("  DistributionCenters: ").Append(DistributionCenters).Append("\n");
            sb.Append("  Eta: ").Append(Eta).Append("\n");
            sb.Append("  FreeShipping: ").Append(FreeShipping).Append("\n");
            sb.Append("  FreightClass: ").Append(FreightClass).Append("\n");
            sb.Append("  Hazmat: ").Append(Hazmat).Append("\n");
            sb.Append("  MadeToOrder: ").Append(MadeToOrder).Append("\n");
            sb.Append("  MadeToOrderLeadTime: ").Append(MadeToOrderLeadTime).Append("\n");
            sb.Append("  MaxDaysTimeInTransit: ").Append(MaxDaysTimeInTransit).Append("\n");
            sb.Append("  Methods: ").Append(Methods).Append("\n");
            sb.Append("  NoShippingDiscount: ").Append(NoShippingDiscount).Append("\n");
            sb.Append("  PackageRequirements: ").Append(PackageRequirements).Append("\n");
            sb.Append("  PerishableClassName: ").Append(PerishableClassName).Append("\n");
            sb.Append("  PerishableClassOid: ").Append(PerishableClassOid).Append("\n");
            sb.Append("  Preorder: ").Append(Preorder).Append("\n");
            sb.Append("  RequireDeliveryDate: ").Append(RequireDeliveryDate).Append("\n");
            sb.Append("  RestrictShipmentOnFriday: ").Append(RestrictShipmentOnFriday).Append("\n");
            sb.Append("  RestrictShipmentOnMonday: ").Append(RestrictShipmentOnMonday).Append("\n");
            sb.Append("  RestrictShipmentOnSaturday: ").Append(RestrictShipmentOnSaturday).Append("\n");
            sb.Append("  RestrictShipmentOnSunday: ").Append(RestrictShipmentOnSunday).Append("\n");
            sb.Append("  RestrictShipmentOnThursday: ").Append(RestrictShipmentOnThursday).Append("\n");
            sb.Append("  RestrictShipmentOnTuesday: ").Append(RestrictShipmentOnTuesday).Append("\n");
            sb.Append("  RestrictShipmentOnWednesday: ").Append(RestrictShipmentOnWednesday).Append("\n");
            sb.Append("  ShipSeparately: ").Append(ShipSeparately).Append("\n");
            sb.Append("  ShipSeparatelyAdditionalWeight: ").Append(ShipSeparatelyAdditionalWeight).Append("\n");
            sb.Append("  ShipSeparatelyHeight: ").Append(ShipSeparatelyHeight).Append("\n");
            sb.Append("  ShipSeparatelyLength: ").Append(ShipSeparatelyLength).Append("\n");
            sb.Append("  ShipSeparatelyPackageSpecialType: ").Append(ShipSeparatelyPackageSpecialType).Append("\n");
            sb.Append("  ShipSeparatelyWidth: ").Append(ShipSeparatelyWidth).Append("\n");
            sb.Append("  SpecialProductType: ").Append(SpecialProductType).Append("\n");
            sb.Append("  TrackInventory: ").Append(TrackInventory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemShipping);
        }

        /// <summary>
        /// Returns true if ItemShipping instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemShipping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemShipping input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowBackOrder == input.AllowBackOrder ||
                    (this.AllowBackOrder != null &&
                    this.AllowBackOrder.Equals(input.AllowBackOrder))
                ) && 
                (
                    this.AmazonFba == input.AmazonFba ||
                    (this.AmazonFba != null &&
                    this.AmazonFba.Equals(input.AmazonFba))
                ) && 
                (
                    this.CaseInnerPacks == input.CaseInnerPacks ||
                    (this.CaseInnerPacks != null &&
                    this.CaseInnerPacks.Equals(input.CaseInnerPacks))
                ) && 
                (
                    this.CaseUnits == input.CaseUnits ||
                    (this.CaseUnits != null &&
                    this.CaseUnits.Equals(input.CaseUnits))
                ) && 
                (
                    this.Cases == input.Cases ||
                    this.Cases != null &&
                    this.Cases.SequenceEqual(input.Cases)
                ) && 
                (
                    this.CollectSerialNumbers == input.CollectSerialNumbers ||
                    (this.CollectSerialNumbers != null &&
                    this.CollectSerialNumbers.Equals(input.CollectSerialNumbers))
                ) && 
                (
                    this.CountryCodeOfOrigin == input.CountryCodeOfOrigin ||
                    (this.CountryCodeOfOrigin != null &&
                    this.CountryCodeOfOrigin.Equals(input.CountryCodeOfOrigin))
                ) && 
                (
                    this.CustomsDescription == input.CustomsDescription ||
                    (this.CustomsDescription != null &&
                    this.CustomsDescription.Equals(input.CustomsDescription))
                ) && 
                (
                    this.CustomsValue == input.CustomsValue ||
                    (this.CustomsValue != null &&
                    this.CustomsValue.Equals(input.CustomsValue))
                ) && 
                (
                    this.DeliveryOnFriday == input.DeliveryOnFriday ||
                    (this.DeliveryOnFriday != null &&
                    this.DeliveryOnFriday.Equals(input.DeliveryOnFriday))
                ) && 
                (
                    this.DeliveryOnMonday == input.DeliveryOnMonday ||
                    (this.DeliveryOnMonday != null &&
                    this.DeliveryOnMonday.Equals(input.DeliveryOnMonday))
                ) && 
                (
                    this.DeliveryOnSaturday == input.DeliveryOnSaturday ||
                    (this.DeliveryOnSaturday != null &&
                    this.DeliveryOnSaturday.Equals(input.DeliveryOnSaturday))
                ) && 
                (
                    this.DeliveryOnSunday == input.DeliveryOnSunday ||
                    (this.DeliveryOnSunday != null &&
                    this.DeliveryOnSunday.Equals(input.DeliveryOnSunday))
                ) && 
                (
                    this.DeliveryOnThursday == input.DeliveryOnThursday ||
                    (this.DeliveryOnThursday != null &&
                    this.DeliveryOnThursday.Equals(input.DeliveryOnThursday))
                ) && 
                (
                    this.DeliveryOnTuesday == input.DeliveryOnTuesday ||
                    (this.DeliveryOnTuesday != null &&
                    this.DeliveryOnTuesday.Equals(input.DeliveryOnTuesday))
                ) && 
                (
                    this.DeliveryOnWednesday == input.DeliveryOnWednesday ||
                    (this.DeliveryOnWednesday != null &&
                    this.DeliveryOnWednesday.Equals(input.DeliveryOnWednesday))
                ) && 
                (
                    this.DestinationMarkups == input.DestinationMarkups ||
                    this.DestinationMarkups != null &&
                    this.DestinationMarkups.SequenceEqual(input.DestinationMarkups)
                ) && 
                (
                    this.DestinationRestrictions == input.DestinationRestrictions ||
                    this.DestinationRestrictions != null &&
                    this.DestinationRestrictions.SequenceEqual(input.DestinationRestrictions)
                ) && 
                (
                    this.DistributionCenters == input.DistributionCenters ||
                    this.DistributionCenters != null &&
                    this.DistributionCenters.SequenceEqual(input.DistributionCenters)
                ) && 
                (
                    this.Eta == input.Eta ||
                    (this.Eta != null &&
                    this.Eta.Equals(input.Eta))
                ) && 
                (
                    this.FreeShipping == input.FreeShipping ||
                    (this.FreeShipping != null &&
                    this.FreeShipping.Equals(input.FreeShipping))
                ) && 
                (
                    this.FreightClass == input.FreightClass ||
                    (this.FreightClass != null &&
                    this.FreightClass.Equals(input.FreightClass))
                ) && 
                (
                    this.Hazmat == input.Hazmat ||
                    (this.Hazmat != null &&
                    this.Hazmat.Equals(input.Hazmat))
                ) && 
                (
                    this.MadeToOrder == input.MadeToOrder ||
                    (this.MadeToOrder != null &&
                    this.MadeToOrder.Equals(input.MadeToOrder))
                ) && 
                (
                    this.MadeToOrderLeadTime == input.MadeToOrderLeadTime ||
                    (this.MadeToOrderLeadTime != null &&
                    this.MadeToOrderLeadTime.Equals(input.MadeToOrderLeadTime))
                ) && 
                (
                    this.MaxDaysTimeInTransit == input.MaxDaysTimeInTransit ||
                    (this.MaxDaysTimeInTransit != null &&
                    this.MaxDaysTimeInTransit.Equals(input.MaxDaysTimeInTransit))
                ) && 
                (
                    this.Methods == input.Methods ||
                    this.Methods != null &&
                    this.Methods.SequenceEqual(input.Methods)
                ) && 
                (
                    this.NoShippingDiscount == input.NoShippingDiscount ||
                    (this.NoShippingDiscount != null &&
                    this.NoShippingDiscount.Equals(input.NoShippingDiscount))
                ) && 
                (
                    this.PackageRequirements == input.PackageRequirements ||
                    this.PackageRequirements != null &&
                    this.PackageRequirements.SequenceEqual(input.PackageRequirements)
                ) && 
                (
                    this.PerishableClassName == input.PerishableClassName ||
                    (this.PerishableClassName != null &&
                    this.PerishableClassName.Equals(input.PerishableClassName))
                ) && 
                (
                    this.PerishableClassOid == input.PerishableClassOid ||
                    (this.PerishableClassOid != null &&
                    this.PerishableClassOid.Equals(input.PerishableClassOid))
                ) && 
                (
                    this.Preorder == input.Preorder ||
                    (this.Preorder != null &&
                    this.Preorder.Equals(input.Preorder))
                ) && 
                (
                    this.RequireDeliveryDate == input.RequireDeliveryDate ||
                    (this.RequireDeliveryDate != null &&
                    this.RequireDeliveryDate.Equals(input.RequireDeliveryDate))
                ) && 
                (
                    this.RestrictShipmentOnFriday == input.RestrictShipmentOnFriday ||
                    (this.RestrictShipmentOnFriday != null &&
                    this.RestrictShipmentOnFriday.Equals(input.RestrictShipmentOnFriday))
                ) && 
                (
                    this.RestrictShipmentOnMonday == input.RestrictShipmentOnMonday ||
                    (this.RestrictShipmentOnMonday != null &&
                    this.RestrictShipmentOnMonday.Equals(input.RestrictShipmentOnMonday))
                ) && 
                (
                    this.RestrictShipmentOnSaturday == input.RestrictShipmentOnSaturday ||
                    (this.RestrictShipmentOnSaturday != null &&
                    this.RestrictShipmentOnSaturday.Equals(input.RestrictShipmentOnSaturday))
                ) && 
                (
                    this.RestrictShipmentOnSunday == input.RestrictShipmentOnSunday ||
                    (this.RestrictShipmentOnSunday != null &&
                    this.RestrictShipmentOnSunday.Equals(input.RestrictShipmentOnSunday))
                ) && 
                (
                    this.RestrictShipmentOnThursday == input.RestrictShipmentOnThursday ||
                    (this.RestrictShipmentOnThursday != null &&
                    this.RestrictShipmentOnThursday.Equals(input.RestrictShipmentOnThursday))
                ) && 
                (
                    this.RestrictShipmentOnTuesday == input.RestrictShipmentOnTuesday ||
                    (this.RestrictShipmentOnTuesday != null &&
                    this.RestrictShipmentOnTuesday.Equals(input.RestrictShipmentOnTuesday))
                ) && 
                (
                    this.RestrictShipmentOnWednesday == input.RestrictShipmentOnWednesday ||
                    (this.RestrictShipmentOnWednesday != null &&
                    this.RestrictShipmentOnWednesday.Equals(input.RestrictShipmentOnWednesday))
                ) && 
                (
                    this.ShipSeparately == input.ShipSeparately ||
                    (this.ShipSeparately != null &&
                    this.ShipSeparately.Equals(input.ShipSeparately))
                ) && 
                (
                    this.ShipSeparatelyAdditionalWeight == input.ShipSeparatelyAdditionalWeight ||
                    (this.ShipSeparatelyAdditionalWeight != null &&
                    this.ShipSeparatelyAdditionalWeight.Equals(input.ShipSeparatelyAdditionalWeight))
                ) && 
                (
                    this.ShipSeparatelyHeight == input.ShipSeparatelyHeight ||
                    (this.ShipSeparatelyHeight != null &&
                    this.ShipSeparatelyHeight.Equals(input.ShipSeparatelyHeight))
                ) && 
                (
                    this.ShipSeparatelyLength == input.ShipSeparatelyLength ||
                    (this.ShipSeparatelyLength != null &&
                    this.ShipSeparatelyLength.Equals(input.ShipSeparatelyLength))
                ) && 
                (
                    this.ShipSeparatelyPackageSpecialType == input.ShipSeparatelyPackageSpecialType ||
                    (this.ShipSeparatelyPackageSpecialType != null &&
                    this.ShipSeparatelyPackageSpecialType.Equals(input.ShipSeparatelyPackageSpecialType))
                ) && 
                (
                    this.ShipSeparatelyWidth == input.ShipSeparatelyWidth ||
                    (this.ShipSeparatelyWidth != null &&
                    this.ShipSeparatelyWidth.Equals(input.ShipSeparatelyWidth))
                ) && 
                (
                    this.SpecialProductType == input.SpecialProductType ||
                    (this.SpecialProductType != null &&
                    this.SpecialProductType.Equals(input.SpecialProductType))
                ) && 
                (
                    this.TrackInventory == input.TrackInventory ||
                    (this.TrackInventory != null &&
                    this.TrackInventory.Equals(input.TrackInventory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowBackOrder != null)
                    hashCode = hashCode * 59 + this.AllowBackOrder.GetHashCode();
                if (this.AmazonFba != null)
                    hashCode = hashCode * 59 + this.AmazonFba.GetHashCode();
                if (this.CaseInnerPacks != null)
                    hashCode = hashCode * 59 + this.CaseInnerPacks.GetHashCode();
                if (this.CaseUnits != null)
                    hashCode = hashCode * 59 + this.CaseUnits.GetHashCode();
                if (this.Cases != null)
                    hashCode = hashCode * 59 + this.Cases.GetHashCode();
                if (this.CollectSerialNumbers != null)
                    hashCode = hashCode * 59 + this.CollectSerialNumbers.GetHashCode();
                if (this.CountryCodeOfOrigin != null)
                    hashCode = hashCode * 59 + this.CountryCodeOfOrigin.GetHashCode();
                if (this.CustomsDescription != null)
                    hashCode = hashCode * 59 + this.CustomsDescription.GetHashCode();
                if (this.CustomsValue != null)
                    hashCode = hashCode * 59 + this.CustomsValue.GetHashCode();
                if (this.DeliveryOnFriday != null)
                    hashCode = hashCode * 59 + this.DeliveryOnFriday.GetHashCode();
                if (this.DeliveryOnMonday != null)
                    hashCode = hashCode * 59 + this.DeliveryOnMonday.GetHashCode();
                if (this.DeliveryOnSaturday != null)
                    hashCode = hashCode * 59 + this.DeliveryOnSaturday.GetHashCode();
                if (this.DeliveryOnSunday != null)
                    hashCode = hashCode * 59 + this.DeliveryOnSunday.GetHashCode();
                if (this.DeliveryOnThursday != null)
                    hashCode = hashCode * 59 + this.DeliveryOnThursday.GetHashCode();
                if (this.DeliveryOnTuesday != null)
                    hashCode = hashCode * 59 + this.DeliveryOnTuesday.GetHashCode();
                if (this.DeliveryOnWednesday != null)
                    hashCode = hashCode * 59 + this.DeliveryOnWednesday.GetHashCode();
                if (this.DestinationMarkups != null)
                    hashCode = hashCode * 59 + this.DestinationMarkups.GetHashCode();
                if (this.DestinationRestrictions != null)
                    hashCode = hashCode * 59 + this.DestinationRestrictions.GetHashCode();
                if (this.DistributionCenters != null)
                    hashCode = hashCode * 59 + this.DistributionCenters.GetHashCode();
                if (this.Eta != null)
                    hashCode = hashCode * 59 + this.Eta.GetHashCode();
                if (this.FreeShipping != null)
                    hashCode = hashCode * 59 + this.FreeShipping.GetHashCode();
                if (this.FreightClass != null)
                    hashCode = hashCode * 59 + this.FreightClass.GetHashCode();
                if (this.Hazmat != null)
                    hashCode = hashCode * 59 + this.Hazmat.GetHashCode();
                if (this.MadeToOrder != null)
                    hashCode = hashCode * 59 + this.MadeToOrder.GetHashCode();
                if (this.MadeToOrderLeadTime != null)
                    hashCode = hashCode * 59 + this.MadeToOrderLeadTime.GetHashCode();
                if (this.MaxDaysTimeInTransit != null)
                    hashCode = hashCode * 59 + this.MaxDaysTimeInTransit.GetHashCode();
                if (this.Methods != null)
                    hashCode = hashCode * 59 + this.Methods.GetHashCode();
                if (this.NoShippingDiscount != null)
                    hashCode = hashCode * 59 + this.NoShippingDiscount.GetHashCode();
                if (this.PackageRequirements != null)
                    hashCode = hashCode * 59 + this.PackageRequirements.GetHashCode();
                if (this.PerishableClassName != null)
                    hashCode = hashCode * 59 + this.PerishableClassName.GetHashCode();
                if (this.PerishableClassOid != null)
                    hashCode = hashCode * 59 + this.PerishableClassOid.GetHashCode();
                if (this.Preorder != null)
                    hashCode = hashCode * 59 + this.Preorder.GetHashCode();
                if (this.RequireDeliveryDate != null)
                    hashCode = hashCode * 59 + this.RequireDeliveryDate.GetHashCode();
                if (this.RestrictShipmentOnFriday != null)
                    hashCode = hashCode * 59 + this.RestrictShipmentOnFriday.GetHashCode();
                if (this.RestrictShipmentOnMonday != null)
                    hashCode = hashCode * 59 + this.RestrictShipmentOnMonday.GetHashCode();
                if (this.RestrictShipmentOnSaturday != null)
                    hashCode = hashCode * 59 + this.RestrictShipmentOnSaturday.GetHashCode();
                if (this.RestrictShipmentOnSunday != null)
                    hashCode = hashCode * 59 + this.RestrictShipmentOnSunday.GetHashCode();
                if (this.RestrictShipmentOnThursday != null)
                    hashCode = hashCode * 59 + this.RestrictShipmentOnThursday.GetHashCode();
                if (this.RestrictShipmentOnTuesday != null)
                    hashCode = hashCode * 59 + this.RestrictShipmentOnTuesday.GetHashCode();
                if (this.RestrictShipmentOnWednesday != null)
                    hashCode = hashCode * 59 + this.RestrictShipmentOnWednesday.GetHashCode();
                if (this.ShipSeparately != null)
                    hashCode = hashCode * 59 + this.ShipSeparately.GetHashCode();
                if (this.ShipSeparatelyAdditionalWeight != null)
                    hashCode = hashCode * 59 + this.ShipSeparatelyAdditionalWeight.GetHashCode();
                if (this.ShipSeparatelyHeight != null)
                    hashCode = hashCode * 59 + this.ShipSeparatelyHeight.GetHashCode();
                if (this.ShipSeparatelyLength != null)
                    hashCode = hashCode * 59 + this.ShipSeparatelyLength.GetHashCode();
                if (this.ShipSeparatelyPackageSpecialType != null)
                    hashCode = hashCode * 59 + this.ShipSeparatelyPackageSpecialType.GetHashCode();
                if (this.ShipSeparatelyWidth != null)
                    hashCode = hashCode * 59 + this.ShipSeparatelyWidth.GetHashCode();
                if (this.SpecialProductType != null)
                    hashCode = hashCode * 59 + this.SpecialProductType.GetHashCode();
                if (this.TrackInventory != null)
                    hashCode = hashCode * 59 + this.TrackInventory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CountryCodeOfOrigin (string) maxLength
            if(this.CountryCodeOfOrigin != null && this.CountryCodeOfOrigin.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCodeOfOrigin, length must be less than 2.", new [] { "CountryCodeOfOrigin" });
            }

            yield break;
        }
    }

}
