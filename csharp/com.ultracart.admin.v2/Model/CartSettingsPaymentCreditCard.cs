/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartSettingsPaymentCreditCard
    /// </summary>
    [DataContract]
    public partial class CartSettingsPaymentCreditCard :  IEquatable<CartSettingsPaymentCreditCard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartSettingsPaymentCreditCard" /> class.
        /// </summary>
        /// <param name="CollectCreditCardVerificationNumber">True if the credit card verification number should be collected.</param>
        /// <param name="CreditCardTypes">Available credit card types.</param>
        /// <param name="HostedFieldsShoppingCartToken">The shoppingCartToken needed for proper initialization of hosted fields collection.</param>
        public CartSettingsPaymentCreditCard(bool? CollectCreditCardVerificationNumber = default(bool?), List<string> CreditCardTypes = default(List<string>), string HostedFieldsShoppingCartToken = default(string))
        {
            this.CollectCreditCardVerificationNumber = CollectCreditCardVerificationNumber;
            this.CreditCardTypes = CreditCardTypes;
            this.HostedFieldsShoppingCartToken = HostedFieldsShoppingCartToken;
        }
        
        /// <summary>
        /// True if the credit card verification number should be collected
        /// </summary>
        /// <value>True if the credit card verification number should be collected</value>
        [DataMember(Name="collect_credit_card_verification_number", EmitDefaultValue=false)]
        public bool? CollectCreditCardVerificationNumber { get; set; }

        /// <summary>
        /// Available credit card types
        /// </summary>
        /// <value>Available credit card types</value>
        [DataMember(Name="credit_card_types", EmitDefaultValue=false)]
        public List<string> CreditCardTypes { get; set; }

        /// <summary>
        /// The shoppingCartToken needed for proper initialization of hosted fields collection
        /// </summary>
        /// <value>The shoppingCartToken needed for proper initialization of hosted fields collection</value>
        [DataMember(Name="hosted_fields_shopping_cart_token", EmitDefaultValue=false)]
        public string HostedFieldsShoppingCartToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartSettingsPaymentCreditCard {\n");
            sb.Append("  CollectCreditCardVerificationNumber: ").Append(CollectCreditCardVerificationNumber).Append("\n");
            sb.Append("  CreditCardTypes: ").Append(CreditCardTypes).Append("\n");
            sb.Append("  HostedFieldsShoppingCartToken: ").Append(HostedFieldsShoppingCartToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartSettingsPaymentCreditCard);
        }

        /// <summary>
        /// Returns true if CartSettingsPaymentCreditCard instances are equal
        /// </summary>
        /// <param name="input">Instance of CartSettingsPaymentCreditCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartSettingsPaymentCreditCard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CollectCreditCardVerificationNumber == input.CollectCreditCardVerificationNumber ||
                    (this.CollectCreditCardVerificationNumber != null &&
                    this.CollectCreditCardVerificationNumber.Equals(input.CollectCreditCardVerificationNumber))
                ) && 
                (
                    this.CreditCardTypes == input.CreditCardTypes ||
                    this.CreditCardTypes != null &&
                    this.CreditCardTypes.SequenceEqual(input.CreditCardTypes)
                ) && 
                (
                    this.HostedFieldsShoppingCartToken == input.HostedFieldsShoppingCartToken ||
                    (this.HostedFieldsShoppingCartToken != null &&
                    this.HostedFieldsShoppingCartToken.Equals(input.HostedFieldsShoppingCartToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CollectCreditCardVerificationNumber != null)
                    hashCode = hashCode * 59 + this.CollectCreditCardVerificationNumber.GetHashCode();
                if (this.CreditCardTypes != null)
                    hashCode = hashCode * 59 + this.CreditCardTypes.GetHashCode();
                if (this.HostedFieldsShoppingCartToken != null)
                    hashCode = hashCode * 59 + this.HostedFieldsShoppingCartToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
