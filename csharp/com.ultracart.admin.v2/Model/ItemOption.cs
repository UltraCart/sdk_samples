/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemOption
    /// </summary>
    [DataContract]
    public partial class ItemOption :  IEquatable<ItemOption>, IValidatableObject
    {
        /// <summary>
        /// Type of option
        /// </summary>
        /// <value>Type of option</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Dropdown for "dropdown"
            /// </summary>
            [EnumMember(Value = "dropdown")]
            Dropdown,
            
            /// <summary>
            /// Enum Fileattachment for "file attachment"
            /// </summary>
            [EnumMember(Value = "file attachment")]
            Fileattachment,
            
            /// <summary>
            /// Enum Fixed for "fixed"
            /// </summary>
            [EnumMember(Value = "fixed")]
            Fixed,
            
            /// <summary>
            /// Enum Hidden for "hidden"
            /// </summary>
            [EnumMember(Value = "hidden")]
            Hidden,
            
            /// <summary>
            /// Enum Multiline for "multiline"
            /// </summary>
            [EnumMember(Value = "multiline")]
            Multiline,
            
            /// <summary>
            /// Enum Radio for "radio"
            /// </summary>
            [EnumMember(Value = "radio")]
            Radio,
            
            /// <summary>
            /// Enum Single for "single"
            /// </summary>
            [EnumMember(Value = "single")]
            Single
        }

        /// <summary>
        /// Type of option
        /// </summary>
        /// <value>Type of option</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemOption" /> class.
        /// </summary>
        /// <param name="CostIfSpecified">Cost if specified.</param>
        /// <param name="CostPerLetter">Cost per letter.</param>
        /// <param name="CostPerLine">Cost per line.</param>
        /// <param name="IgnoreIfDefault">Ignore this option on the order if the default value is selected.</param>
        /// <param name="Label">Label.</param>
        /// <param name="LabelTranslatedTextInstanceOid">Label translated text instance ID.</param>
        /// <param name="Name">Name.</param>
        /// <param name="NameTranslatedTextInstanceOid">Name translated text instance ID.</param>
        /// <param name="OneTimeFee">One time fee.</param>
        /// <param name="OptionOid">Option object identifier.</param>
        /// <param name="Required">True if the customer is required to specify an answer.</param>
        /// <param name="SystemOption">True if this is a system option.</param>
        /// <param name="Type">Type of option.</param>
        /// <param name="Values">Values.</param>
        public ItemOption(decimal? CostIfSpecified = default(decimal?), decimal? CostPerLetter = default(decimal?), decimal? CostPerLine = default(decimal?), bool? IgnoreIfDefault = default(bool?), string Label = default(string), int? LabelTranslatedTextInstanceOid = default(int?), string Name = default(string), int? NameTranslatedTextInstanceOid = default(int?), bool? OneTimeFee = default(bool?), int? OptionOid = default(int?), bool? Required = default(bool?), bool? SystemOption = default(bool?), TypeEnum? Type = default(TypeEnum?), List<ItemOptionValue> Values = default(List<ItemOptionValue>))
        {
            this.CostIfSpecified = CostIfSpecified;
            this.CostPerLetter = CostPerLetter;
            this.CostPerLine = CostPerLine;
            this.IgnoreIfDefault = IgnoreIfDefault;
            this.Label = Label;
            this.LabelTranslatedTextInstanceOid = LabelTranslatedTextInstanceOid;
            this.Name = Name;
            this.NameTranslatedTextInstanceOid = NameTranslatedTextInstanceOid;
            this.OneTimeFee = OneTimeFee;
            this.OptionOid = OptionOid;
            this.Required = Required;
            this.SystemOption = SystemOption;
            this.Type = Type;
            this.Values = Values;
        }
        
        /// <summary>
        /// Cost if specified
        /// </summary>
        /// <value>Cost if specified</value>
        [DataMember(Name="cost_if_specified", EmitDefaultValue=false)]
        public decimal? CostIfSpecified { get; set; }

        /// <summary>
        /// Cost per letter
        /// </summary>
        /// <value>Cost per letter</value>
        [DataMember(Name="cost_per_letter", EmitDefaultValue=false)]
        public decimal? CostPerLetter { get; set; }

        /// <summary>
        /// Cost per line
        /// </summary>
        /// <value>Cost per line</value>
        [DataMember(Name="cost_per_line", EmitDefaultValue=false)]
        public decimal? CostPerLine { get; set; }

        /// <summary>
        /// Ignore this option on the order if the default value is selected
        /// </summary>
        /// <value>Ignore this option on the order if the default value is selected</value>
        [DataMember(Name="ignore_if_default", EmitDefaultValue=false)]
        public bool? IgnoreIfDefault { get; set; }

        /// <summary>
        /// Label
        /// </summary>
        /// <value>Label</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Label translated text instance ID
        /// </summary>
        /// <value>Label translated text instance ID</value>
        [DataMember(Name="label_translated_text_instance_oid", EmitDefaultValue=false)]
        public int? LabelTranslatedTextInstanceOid { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Name translated text instance ID
        /// </summary>
        /// <value>Name translated text instance ID</value>
        [DataMember(Name="name_translated_text_instance_oid", EmitDefaultValue=false)]
        public int? NameTranslatedTextInstanceOid { get; set; }

        /// <summary>
        /// One time fee
        /// </summary>
        /// <value>One time fee</value>
        [DataMember(Name="one_time_fee", EmitDefaultValue=false)]
        public bool? OneTimeFee { get; set; }

        /// <summary>
        /// Option object identifier
        /// </summary>
        /// <value>Option object identifier</value>
        [DataMember(Name="option_oid", EmitDefaultValue=false)]
        public int? OptionOid { get; set; }

        /// <summary>
        /// True if the customer is required to specify an answer
        /// </summary>
        /// <value>True if the customer is required to specify an answer</value>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// True if this is a system option
        /// </summary>
        /// <value>True if this is a system option</value>
        [DataMember(Name="system_option", EmitDefaultValue=false)]
        public bool? SystemOption { get; set; }


        /// <summary>
        /// Values
        /// </summary>
        /// <value>Values</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<ItemOptionValue> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemOption {\n");
            sb.Append("  CostIfSpecified: ").Append(CostIfSpecified).Append("\n");
            sb.Append("  CostPerLetter: ").Append(CostPerLetter).Append("\n");
            sb.Append("  CostPerLine: ").Append(CostPerLine).Append("\n");
            sb.Append("  IgnoreIfDefault: ").Append(IgnoreIfDefault).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  LabelTranslatedTextInstanceOid: ").Append(LabelTranslatedTextInstanceOid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameTranslatedTextInstanceOid: ").Append(NameTranslatedTextInstanceOid).Append("\n");
            sb.Append("  OneTimeFee: ").Append(OneTimeFee).Append("\n");
            sb.Append("  OptionOid: ").Append(OptionOid).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  SystemOption: ").Append(SystemOption).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemOption);
        }

        /// <summary>
        /// Returns true if ItemOption instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CostIfSpecified == input.CostIfSpecified ||
                    (this.CostIfSpecified != null &&
                    this.CostIfSpecified.Equals(input.CostIfSpecified))
                ) && 
                (
                    this.CostPerLetter == input.CostPerLetter ||
                    (this.CostPerLetter != null &&
                    this.CostPerLetter.Equals(input.CostPerLetter))
                ) && 
                (
                    this.CostPerLine == input.CostPerLine ||
                    (this.CostPerLine != null &&
                    this.CostPerLine.Equals(input.CostPerLine))
                ) && 
                (
                    this.IgnoreIfDefault == input.IgnoreIfDefault ||
                    (this.IgnoreIfDefault != null &&
                    this.IgnoreIfDefault.Equals(input.IgnoreIfDefault))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.LabelTranslatedTextInstanceOid == input.LabelTranslatedTextInstanceOid ||
                    (this.LabelTranslatedTextInstanceOid != null &&
                    this.LabelTranslatedTextInstanceOid.Equals(input.LabelTranslatedTextInstanceOid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NameTranslatedTextInstanceOid == input.NameTranslatedTextInstanceOid ||
                    (this.NameTranslatedTextInstanceOid != null &&
                    this.NameTranslatedTextInstanceOid.Equals(input.NameTranslatedTextInstanceOid))
                ) && 
                (
                    this.OneTimeFee == input.OneTimeFee ||
                    (this.OneTimeFee != null &&
                    this.OneTimeFee.Equals(input.OneTimeFee))
                ) && 
                (
                    this.OptionOid == input.OptionOid ||
                    (this.OptionOid != null &&
                    this.OptionOid.Equals(input.OptionOid))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.SystemOption == input.SystemOption ||
                    (this.SystemOption != null &&
                    this.SystemOption.Equals(input.SystemOption))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CostIfSpecified != null)
                    hashCode = hashCode * 59 + this.CostIfSpecified.GetHashCode();
                if (this.CostPerLetter != null)
                    hashCode = hashCode * 59 + this.CostPerLetter.GetHashCode();
                if (this.CostPerLine != null)
                    hashCode = hashCode * 59 + this.CostPerLine.GetHashCode();
                if (this.IgnoreIfDefault != null)
                    hashCode = hashCode * 59 + this.IgnoreIfDefault.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.LabelTranslatedTextInstanceOid != null)
                    hashCode = hashCode * 59 + this.LabelTranslatedTextInstanceOid.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NameTranslatedTextInstanceOid != null)
                    hashCode = hashCode * 59 + this.NameTranslatedTextInstanceOid.GetHashCode();
                if (this.OneTimeFee != null)
                    hashCode = hashCode * 59 + this.OneTimeFee.GetHashCode();
                if (this.OptionOid != null)
                    hashCode = hashCode * 59 + this.OptionOid.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.SystemOption != null)
                    hashCode = hashCode * 59 + this.SystemOption.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Label (string) maxLength
            if(this.Label != null && this.Label.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Label, length must be less than 50.", new [] { "Label" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 50.", new [] { "Name" });
            }

            yield break;
        }
    }

}
