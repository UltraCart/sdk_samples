/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderDigitalItem
    /// </summary>
    [DataContract]
    public partial class OrderDigitalItem :  IEquatable<OrderDigitalItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDigitalItem" /> class.
        /// </summary>
        /// <param name="FileSize">File size.</param>
        /// <param name="LastDownload">Last download.</param>
        /// <param name="LastDownloadIpAddress">IP address that performed the last download.</param>
        /// <param name="OriginalFilename">Original file name.</param>
        /// <param name="ProductCode">Item id associated with this item.</param>
        /// <param name="ProductDescription">Item description associated with this item.</param>
        /// <param name="RemainingDownloads">Remaining number of downloads.</param>
        /// <param name="Url">URL that the customer can click to download the specific digital item.</param>
        public OrderDigitalItem(long? FileSize = default(long?), string LastDownload = default(string), string LastDownloadIpAddress = default(string), string OriginalFilename = default(string), string ProductCode = default(string), string ProductDescription = default(string), int? RemainingDownloads = default(int?), string Url = default(string))
        {
            this.FileSize = FileSize;
            this.LastDownload = LastDownload;
            this.LastDownloadIpAddress = LastDownloadIpAddress;
            this.OriginalFilename = OriginalFilename;
            this.ProductCode = ProductCode;
            this.ProductDescription = ProductDescription;
            this.RemainingDownloads = RemainingDownloads;
            this.Url = Url;
        }
        
        /// <summary>
        /// File size
        /// </summary>
        /// <value>File size</value>
        [DataMember(Name="file_size", EmitDefaultValue=false)]
        public long? FileSize { get; set; }

        /// <summary>
        /// Last download
        /// </summary>
        /// <value>Last download</value>
        [DataMember(Name="last_download", EmitDefaultValue=false)]
        public string LastDownload { get; set; }

        /// <summary>
        /// IP address that performed the last download
        /// </summary>
        /// <value>IP address that performed the last download</value>
        [DataMember(Name="last_download_ip_address", EmitDefaultValue=false)]
        public string LastDownloadIpAddress { get; set; }

        /// <summary>
        /// Original file name
        /// </summary>
        /// <value>Original file name</value>
        [DataMember(Name="original_filename", EmitDefaultValue=false)]
        public string OriginalFilename { get; set; }

        /// <summary>
        /// Item id associated with this item
        /// </summary>
        /// <value>Item id associated with this item</value>
        [DataMember(Name="product_code", EmitDefaultValue=false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Item description associated with this item
        /// </summary>
        /// <value>Item description associated with this item</value>
        [DataMember(Name="product_description", EmitDefaultValue=false)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Remaining number of downloads
        /// </summary>
        /// <value>Remaining number of downloads</value>
        [DataMember(Name="remaining_downloads", EmitDefaultValue=false)]
        public int? RemainingDownloads { get; set; }

        /// <summary>
        /// URL that the customer can click to download the specific digital item
        /// </summary>
        /// <value>URL that the customer can click to download the specific digital item</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderDigitalItem {\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  LastDownload: ").Append(LastDownload).Append("\n");
            sb.Append("  LastDownloadIpAddress: ").Append(LastDownloadIpAddress).Append("\n");
            sb.Append("  OriginalFilename: ").Append(OriginalFilename).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProductDescription: ").Append(ProductDescription).Append("\n");
            sb.Append("  RemainingDownloads: ").Append(RemainingDownloads).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderDigitalItem);
        }

        /// <summary>
        /// Returns true if OrderDigitalItem instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderDigitalItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderDigitalItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.LastDownload == input.LastDownload ||
                    (this.LastDownload != null &&
                    this.LastDownload.Equals(input.LastDownload))
                ) && 
                (
                    this.LastDownloadIpAddress == input.LastDownloadIpAddress ||
                    (this.LastDownloadIpAddress != null &&
                    this.LastDownloadIpAddress.Equals(input.LastDownloadIpAddress))
                ) && 
                (
                    this.OriginalFilename == input.OriginalFilename ||
                    (this.OriginalFilename != null &&
                    this.OriginalFilename.Equals(input.OriginalFilename))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.ProductDescription == input.ProductDescription ||
                    (this.ProductDescription != null &&
                    this.ProductDescription.Equals(input.ProductDescription))
                ) && 
                (
                    this.RemainingDownloads == input.RemainingDownloads ||
                    (this.RemainingDownloads != null &&
                    this.RemainingDownloads.Equals(input.RemainingDownloads))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.LastDownload != null)
                    hashCode = hashCode * 59 + this.LastDownload.GetHashCode();
                if (this.LastDownloadIpAddress != null)
                    hashCode = hashCode * 59 + this.LastDownloadIpAddress.GetHashCode();
                if (this.OriginalFilename != null)
                    hashCode = hashCode * 59 + this.OriginalFilename.GetHashCode();
                if (this.ProductCode != null)
                    hashCode = hashCode * 59 + this.ProductCode.GetHashCode();
                if (this.ProductDescription != null)
                    hashCode = hashCode * 59 + this.ProductDescription.GetHashCode();
                if (this.RemainingDownloads != null)
                    hashCode = hashCode * 59 + this.RemainingDownloads.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
