/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// AffiliateClickQuery
    /// </summary>
    [DataContract]
    public partial class AffiliateClickQuery :  IEquatable<AffiliateClickQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateClickQuery" /> class.
        /// </summary>
        /// <param name="AffiliateLinkOid">Unique object identifier for for the link that this click is associated with.</param>
        /// <param name="AffiliateOid">Affiliate ID associated with the click.</param>
        /// <param name="ClickDtsBegin">Minimum click date/time to return.</param>
        /// <param name="ClickDtsEnd">Maximum click date/time to return.</param>
        /// <param name="IpAddress">IP address that generated the click.</param>
        /// <param name="SubId">Sub ID value passed on the click.</param>
        public AffiliateClickQuery(int? AffiliateLinkOid = default(int?), int? AffiliateOid = default(int?), string ClickDtsBegin = default(string), string ClickDtsEnd = default(string), string IpAddress = default(string), string SubId = default(string))
        {
            this.AffiliateLinkOid = AffiliateLinkOid;
            this.AffiliateOid = AffiliateOid;
            this.ClickDtsBegin = ClickDtsBegin;
            this.ClickDtsEnd = ClickDtsEnd;
            this.IpAddress = IpAddress;
            this.SubId = SubId;
        }
        
        /// <summary>
        /// Unique object identifier for for the link that this click is associated with
        /// </summary>
        /// <value>Unique object identifier for for the link that this click is associated with</value>
        [DataMember(Name="affiliate_link_oid", EmitDefaultValue=false)]
        public int? AffiliateLinkOid { get; set; }

        /// <summary>
        /// Affiliate ID associated with the click
        /// </summary>
        /// <value>Affiliate ID associated with the click</value>
        [DataMember(Name="affiliate_oid", EmitDefaultValue=false)]
        public int? AffiliateOid { get; set; }

        /// <summary>
        /// Minimum click date/time to return
        /// </summary>
        /// <value>Minimum click date/time to return</value>
        [DataMember(Name="click_dts_begin", EmitDefaultValue=false)]
        public string ClickDtsBegin { get; set; }

        /// <summary>
        /// Maximum click date/time to return
        /// </summary>
        /// <value>Maximum click date/time to return</value>
        [DataMember(Name="click_dts_end", EmitDefaultValue=false)]
        public string ClickDtsEnd { get; set; }

        /// <summary>
        /// IP address that generated the click
        /// </summary>
        /// <value>IP address that generated the click</value>
        [DataMember(Name="ip_address", EmitDefaultValue=false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Sub ID value passed on the click
        /// </summary>
        /// <value>Sub ID value passed on the click</value>
        [DataMember(Name="sub_id", EmitDefaultValue=false)]
        public string SubId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AffiliateClickQuery {\n");
            sb.Append("  AffiliateLinkOid: ").Append(AffiliateLinkOid).Append("\n");
            sb.Append("  AffiliateOid: ").Append(AffiliateOid).Append("\n");
            sb.Append("  ClickDtsBegin: ").Append(ClickDtsBegin).Append("\n");
            sb.Append("  ClickDtsEnd: ").Append(ClickDtsEnd).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  SubId: ").Append(SubId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AffiliateClickQuery);
        }

        /// <summary>
        /// Returns true if AffiliateClickQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of AffiliateClickQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AffiliateClickQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AffiliateLinkOid == input.AffiliateLinkOid ||
                    (this.AffiliateLinkOid != null &&
                    this.AffiliateLinkOid.Equals(input.AffiliateLinkOid))
                ) && 
                (
                    this.AffiliateOid == input.AffiliateOid ||
                    (this.AffiliateOid != null &&
                    this.AffiliateOid.Equals(input.AffiliateOid))
                ) && 
                (
                    this.ClickDtsBegin == input.ClickDtsBegin ||
                    (this.ClickDtsBegin != null &&
                    this.ClickDtsBegin.Equals(input.ClickDtsBegin))
                ) && 
                (
                    this.ClickDtsEnd == input.ClickDtsEnd ||
                    (this.ClickDtsEnd != null &&
                    this.ClickDtsEnd.Equals(input.ClickDtsEnd))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.SubId == input.SubId ||
                    (this.SubId != null &&
                    this.SubId.Equals(input.SubId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AffiliateLinkOid != null)
                    hashCode = hashCode * 59 + this.AffiliateLinkOid.GetHashCode();
                if (this.AffiliateOid != null)
                    hashCode = hashCode * 59 + this.AffiliateOid.GetHashCode();
                if (this.ClickDtsBegin != null)
                    hashCode = hashCode * 59 + this.ClickDtsBegin.GetHashCode();
                if (this.ClickDtsEnd != null)
                    hashCode = hashCode * 59 + this.ClickDtsEnd.GetHashCode();
                if (this.IpAddress != null)
                    hashCode = hashCode * 59 + this.IpAddress.GetHashCode();
                if (this.SubId != null)
                    hashCode = hashCode * 59 + this.SubId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
