/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemContentAssignment
    /// </summary>
    [DataContract]
    public partial class ItemContentAssignment :  IEquatable<ItemContentAssignment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemContentAssignment" /> class.
        /// </summary>
        /// <param name="GroupOid">Page (group) object identifier.</param>
        /// <param name="GroupPath">Page (group) path.</param>
        /// <param name="Host">StoreFront host name.</param>
        /// <param name="SortOrder">Sort order (optional).</param>
        /// <param name="UrlPart">URL part if the item id is not used.</param>
        public ItemContentAssignment(int? GroupOid = default(int?), string GroupPath = default(string), string Host = default(string), int? SortOrder = default(int?), string UrlPart = default(string))
        {
            this.GroupOid = GroupOid;
            this.GroupPath = GroupPath;
            this.Host = Host;
            this.SortOrder = SortOrder;
            this.UrlPart = UrlPart;
        }
        
        /// <summary>
        /// Page (group) object identifier
        /// </summary>
        /// <value>Page (group) object identifier</value>
        [DataMember(Name="group_oid", EmitDefaultValue=false)]
        public int? GroupOid { get; set; }

        /// <summary>
        /// Page (group) path
        /// </summary>
        /// <value>Page (group) path</value>
        [DataMember(Name="group_path", EmitDefaultValue=false)]
        public string GroupPath { get; set; }

        /// <summary>
        /// StoreFront host name
        /// </summary>
        /// <value>StoreFront host name</value>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }

        /// <summary>
        /// Sort order (optional)
        /// </summary>
        /// <value>Sort order (optional)</value>
        [DataMember(Name="sort_order", EmitDefaultValue=false)]
        public int? SortOrder { get; set; }

        /// <summary>
        /// URL part if the item id is not used
        /// </summary>
        /// <value>URL part if the item id is not used</value>
        [DataMember(Name="url_part", EmitDefaultValue=false)]
        public string UrlPart { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemContentAssignment {\n");
            sb.Append("  GroupOid: ").Append(GroupOid).Append("\n");
            sb.Append("  GroupPath: ").Append(GroupPath).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  UrlPart: ").Append(UrlPart).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemContentAssignment);
        }

        /// <summary>
        /// Returns true if ItemContentAssignment instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemContentAssignment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemContentAssignment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupOid == input.GroupOid ||
                    (this.GroupOid != null &&
                    this.GroupOid.Equals(input.GroupOid))
                ) && 
                (
                    this.GroupPath == input.GroupPath ||
                    (this.GroupPath != null &&
                    this.GroupPath.Equals(input.GroupPath))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    (this.SortOrder != null &&
                    this.SortOrder.Equals(input.SortOrder))
                ) && 
                (
                    this.UrlPart == input.UrlPart ||
                    (this.UrlPart != null &&
                    this.UrlPart.Equals(input.UrlPart))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupOid != null)
                    hashCode = hashCode * 59 + this.GroupOid.GetHashCode();
                if (this.GroupPath != null)
                    hashCode = hashCode * 59 + this.GroupPath.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.SortOrder != null)
                    hashCode = hashCode * 59 + this.SortOrder.GetHashCode();
                if (this.UrlPart != null)
                    hashCode = hashCode * 59 + this.UrlPart.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UrlPart (string) maxLength
            if(this.UrlPart != null && this.UrlPart.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UrlPart, length must be less than 150.", new [] { "UrlPart" });
            }

            yield break;
        }
    }

}
