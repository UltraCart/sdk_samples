/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemShippingMethod
    /// </summary>
    [DataContract]
    public partial class ItemShippingMethod :  IEquatable<ItemShippingMethod>, IValidatableObject
    {
        /// <summary>
        /// Shipping method validity
        /// </summary>
        /// <value>Shipping method validity</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShippingMethodValidityEnum
        {
            
            /// <summary>
            /// Enum Invalidfor for "invalid for"
            /// </summary>
            [EnumMember(Value = "invalid for")]
            Invalidfor,
            
            /// <summary>
            /// Enum Validfor for "valid for"
            /// </summary>
            [EnumMember(Value = "valid for")]
            Validfor,
            
            /// <summary>
            /// Enum Validonlyfor for "valid only for"
            /// </summary>
            [EnumMember(Value = "valid only for")]
            Validonlyfor
        }

        /// <summary>
        /// Shipping method validity
        /// </summary>
        /// <value>Shipping method validity</value>
        [DataMember(Name="shipping_method_validity", EmitDefaultValue=false)]
        public ShippingMethodValidityEnum? ShippingMethodValidity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemShippingMethod" /> class.
        /// </summary>
        /// <param name="Cost">Cost.</param>
        /// <param name="EachAdditionalItemMarkup">Each additional item markup.</param>
        /// <param name="FilterToIfAvailable">Filter to this method if available.</param>
        /// <param name="FirstItemMarkup">First item markup.</param>
        /// <param name="FixedShippingCost">Fixed shipping cost.</param>
        /// <param name="FlatFeeMarkup">Flat fee markup.</param>
        /// <param name="FreeShipping">Free shipping.</param>
        /// <param name="PerItemFeeMarkup">Per item fee markup.</param>
        /// <param name="PercentageMarkup">Percentage markup.</param>
        /// <param name="PercentageOfItemMarkup">Percentage of item markup.</param>
        /// <param name="RelaxRestrictionsOnUpsell">Relax restrictions on upsell.</param>
        /// <param name="ShippingMethod">Shipping method name.</param>
        /// <param name="ShippingMethodOid">Shipping method object identifier.</param>
        /// <param name="ShippingMethodValidity">Shipping method validity.</param>
        /// <param name="SignatureRequired">Signature required.</param>
        public ItemShippingMethod(decimal? Cost = default(decimal?), decimal? EachAdditionalItemMarkup = default(decimal?), bool? FilterToIfAvailable = default(bool?), decimal? FirstItemMarkup = default(decimal?), decimal? FixedShippingCost = default(decimal?), decimal? FlatFeeMarkup = default(decimal?), bool? FreeShipping = default(bool?), decimal? PerItemFeeMarkup = default(decimal?), decimal? PercentageMarkup = default(decimal?), decimal? PercentageOfItemMarkup = default(decimal?), bool? RelaxRestrictionsOnUpsell = default(bool?), string ShippingMethod = default(string), int? ShippingMethodOid = default(int?), ShippingMethodValidityEnum? ShippingMethodValidity = default(ShippingMethodValidityEnum?), bool? SignatureRequired = default(bool?))
        {
            this.Cost = Cost;
            this.EachAdditionalItemMarkup = EachAdditionalItemMarkup;
            this.FilterToIfAvailable = FilterToIfAvailable;
            this.FirstItemMarkup = FirstItemMarkup;
            this.FixedShippingCost = FixedShippingCost;
            this.FlatFeeMarkup = FlatFeeMarkup;
            this.FreeShipping = FreeShipping;
            this.PerItemFeeMarkup = PerItemFeeMarkup;
            this.PercentageMarkup = PercentageMarkup;
            this.PercentageOfItemMarkup = PercentageOfItemMarkup;
            this.RelaxRestrictionsOnUpsell = RelaxRestrictionsOnUpsell;
            this.ShippingMethod = ShippingMethod;
            this.ShippingMethodOid = ShippingMethodOid;
            this.ShippingMethodValidity = ShippingMethodValidity;
            this.SignatureRequired = SignatureRequired;
        }
        
        /// <summary>
        /// Cost
        /// </summary>
        /// <value>Cost</value>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public decimal? Cost { get; set; }

        /// <summary>
        /// Each additional item markup
        /// </summary>
        /// <value>Each additional item markup</value>
        [DataMember(Name="each_additional_item_markup", EmitDefaultValue=false)]
        public decimal? EachAdditionalItemMarkup { get; set; }

        /// <summary>
        /// Filter to this method if available
        /// </summary>
        /// <value>Filter to this method if available</value>
        [DataMember(Name="filter_to_if_available", EmitDefaultValue=false)]
        public bool? FilterToIfAvailable { get; set; }

        /// <summary>
        /// First item markup
        /// </summary>
        /// <value>First item markup</value>
        [DataMember(Name="first_item_markup", EmitDefaultValue=false)]
        public decimal? FirstItemMarkup { get; set; }

        /// <summary>
        /// Fixed shipping cost
        /// </summary>
        /// <value>Fixed shipping cost</value>
        [DataMember(Name="fixed_shipping_cost", EmitDefaultValue=false)]
        public decimal? FixedShippingCost { get; set; }

        /// <summary>
        /// Flat fee markup
        /// </summary>
        /// <value>Flat fee markup</value>
        [DataMember(Name="flat_fee_markup", EmitDefaultValue=false)]
        public decimal? FlatFeeMarkup { get; set; }

        /// <summary>
        /// Free shipping
        /// </summary>
        /// <value>Free shipping</value>
        [DataMember(Name="free_shipping", EmitDefaultValue=false)]
        public bool? FreeShipping { get; set; }

        /// <summary>
        /// Per item fee markup
        /// </summary>
        /// <value>Per item fee markup</value>
        [DataMember(Name="per_item_fee_markup", EmitDefaultValue=false)]
        public decimal? PerItemFeeMarkup { get; set; }

        /// <summary>
        /// Percentage markup
        /// </summary>
        /// <value>Percentage markup</value>
        [DataMember(Name="percentage_markup", EmitDefaultValue=false)]
        public decimal? PercentageMarkup { get; set; }

        /// <summary>
        /// Percentage of item markup
        /// </summary>
        /// <value>Percentage of item markup</value>
        [DataMember(Name="percentage_of_item_markup", EmitDefaultValue=false)]
        public decimal? PercentageOfItemMarkup { get; set; }

        /// <summary>
        /// Relax restrictions on upsell
        /// </summary>
        /// <value>Relax restrictions on upsell</value>
        [DataMember(Name="relax_restrictions_on_upsell", EmitDefaultValue=false)]
        public bool? RelaxRestrictionsOnUpsell { get; set; }

        /// <summary>
        /// Shipping method name
        /// </summary>
        /// <value>Shipping method name</value>
        [DataMember(Name="shipping_method", EmitDefaultValue=false)]
        public string ShippingMethod { get; set; }

        /// <summary>
        /// Shipping method object identifier
        /// </summary>
        /// <value>Shipping method object identifier</value>
        [DataMember(Name="shipping_method_oid", EmitDefaultValue=false)]
        public int? ShippingMethodOid { get; set; }


        /// <summary>
        /// Signature required
        /// </summary>
        /// <value>Signature required</value>
        [DataMember(Name="signature_required", EmitDefaultValue=false)]
        public bool? SignatureRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemShippingMethod {\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  EachAdditionalItemMarkup: ").Append(EachAdditionalItemMarkup).Append("\n");
            sb.Append("  FilterToIfAvailable: ").Append(FilterToIfAvailable).Append("\n");
            sb.Append("  FirstItemMarkup: ").Append(FirstItemMarkup).Append("\n");
            sb.Append("  FixedShippingCost: ").Append(FixedShippingCost).Append("\n");
            sb.Append("  FlatFeeMarkup: ").Append(FlatFeeMarkup).Append("\n");
            sb.Append("  FreeShipping: ").Append(FreeShipping).Append("\n");
            sb.Append("  PerItemFeeMarkup: ").Append(PerItemFeeMarkup).Append("\n");
            sb.Append("  PercentageMarkup: ").Append(PercentageMarkup).Append("\n");
            sb.Append("  PercentageOfItemMarkup: ").Append(PercentageOfItemMarkup).Append("\n");
            sb.Append("  RelaxRestrictionsOnUpsell: ").Append(RelaxRestrictionsOnUpsell).Append("\n");
            sb.Append("  ShippingMethod: ").Append(ShippingMethod).Append("\n");
            sb.Append("  ShippingMethodOid: ").Append(ShippingMethodOid).Append("\n");
            sb.Append("  ShippingMethodValidity: ").Append(ShippingMethodValidity).Append("\n");
            sb.Append("  SignatureRequired: ").Append(SignatureRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemShippingMethod);
        }

        /// <summary>
        /// Returns true if ItemShippingMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemShippingMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemShippingMethod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.EachAdditionalItemMarkup == input.EachAdditionalItemMarkup ||
                    (this.EachAdditionalItemMarkup != null &&
                    this.EachAdditionalItemMarkup.Equals(input.EachAdditionalItemMarkup))
                ) && 
                (
                    this.FilterToIfAvailable == input.FilterToIfAvailable ||
                    (this.FilterToIfAvailable != null &&
                    this.FilterToIfAvailable.Equals(input.FilterToIfAvailable))
                ) && 
                (
                    this.FirstItemMarkup == input.FirstItemMarkup ||
                    (this.FirstItemMarkup != null &&
                    this.FirstItemMarkup.Equals(input.FirstItemMarkup))
                ) && 
                (
                    this.FixedShippingCost == input.FixedShippingCost ||
                    (this.FixedShippingCost != null &&
                    this.FixedShippingCost.Equals(input.FixedShippingCost))
                ) && 
                (
                    this.FlatFeeMarkup == input.FlatFeeMarkup ||
                    (this.FlatFeeMarkup != null &&
                    this.FlatFeeMarkup.Equals(input.FlatFeeMarkup))
                ) && 
                (
                    this.FreeShipping == input.FreeShipping ||
                    (this.FreeShipping != null &&
                    this.FreeShipping.Equals(input.FreeShipping))
                ) && 
                (
                    this.PerItemFeeMarkup == input.PerItemFeeMarkup ||
                    (this.PerItemFeeMarkup != null &&
                    this.PerItemFeeMarkup.Equals(input.PerItemFeeMarkup))
                ) && 
                (
                    this.PercentageMarkup == input.PercentageMarkup ||
                    (this.PercentageMarkup != null &&
                    this.PercentageMarkup.Equals(input.PercentageMarkup))
                ) && 
                (
                    this.PercentageOfItemMarkup == input.PercentageOfItemMarkup ||
                    (this.PercentageOfItemMarkup != null &&
                    this.PercentageOfItemMarkup.Equals(input.PercentageOfItemMarkup))
                ) && 
                (
                    this.RelaxRestrictionsOnUpsell == input.RelaxRestrictionsOnUpsell ||
                    (this.RelaxRestrictionsOnUpsell != null &&
                    this.RelaxRestrictionsOnUpsell.Equals(input.RelaxRestrictionsOnUpsell))
                ) && 
                (
                    this.ShippingMethod == input.ShippingMethod ||
                    (this.ShippingMethod != null &&
                    this.ShippingMethod.Equals(input.ShippingMethod))
                ) && 
                (
                    this.ShippingMethodOid == input.ShippingMethodOid ||
                    (this.ShippingMethodOid != null &&
                    this.ShippingMethodOid.Equals(input.ShippingMethodOid))
                ) && 
                (
                    this.ShippingMethodValidity == input.ShippingMethodValidity ||
                    (this.ShippingMethodValidity != null &&
                    this.ShippingMethodValidity.Equals(input.ShippingMethodValidity))
                ) && 
                (
                    this.SignatureRequired == input.SignatureRequired ||
                    (this.SignatureRequired != null &&
                    this.SignatureRequired.Equals(input.SignatureRequired))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.EachAdditionalItemMarkup != null)
                    hashCode = hashCode * 59 + this.EachAdditionalItemMarkup.GetHashCode();
                if (this.FilterToIfAvailable != null)
                    hashCode = hashCode * 59 + this.FilterToIfAvailable.GetHashCode();
                if (this.FirstItemMarkup != null)
                    hashCode = hashCode * 59 + this.FirstItemMarkup.GetHashCode();
                if (this.FixedShippingCost != null)
                    hashCode = hashCode * 59 + this.FixedShippingCost.GetHashCode();
                if (this.FlatFeeMarkup != null)
                    hashCode = hashCode * 59 + this.FlatFeeMarkup.GetHashCode();
                if (this.FreeShipping != null)
                    hashCode = hashCode * 59 + this.FreeShipping.GetHashCode();
                if (this.PerItemFeeMarkup != null)
                    hashCode = hashCode * 59 + this.PerItemFeeMarkup.GetHashCode();
                if (this.PercentageMarkup != null)
                    hashCode = hashCode * 59 + this.PercentageMarkup.GetHashCode();
                if (this.PercentageOfItemMarkup != null)
                    hashCode = hashCode * 59 + this.PercentageOfItemMarkup.GetHashCode();
                if (this.RelaxRestrictionsOnUpsell != null)
                    hashCode = hashCode * 59 + this.RelaxRestrictionsOnUpsell.GetHashCode();
                if (this.ShippingMethod != null)
                    hashCode = hashCode * 59 + this.ShippingMethod.GetHashCode();
                if (this.ShippingMethodOid != null)
                    hashCode = hashCode * 59 + this.ShippingMethodOid.GetHashCode();
                if (this.ShippingMethodValidity != null)
                    hashCode = hashCode * 59 + this.ShippingMethodValidity.GetHashCode();
                if (this.SignatureRequired != null)
                    hashCode = hashCode * 59 + this.SignatureRequired.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
