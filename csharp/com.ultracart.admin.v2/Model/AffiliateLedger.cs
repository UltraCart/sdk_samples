/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// AffiliateLedger
    /// </summary>
    [DataContract]
    public partial class AffiliateLedger :  IEquatable<AffiliateLedger>, IValidatableObject
    {
        /// <summary>
        /// Transaction state
        /// </summary>
        /// <value>Transaction state</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionStateEnum
        {
            
            /// <summary>
            /// Enum Pending for "Pending"
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending,
            
            /// <summary>
            /// Enum Posted for "Posted"
            /// </summary>
            [EnumMember(Value = "Posted")]
            Posted,
            
            /// <summary>
            /// Enum Approved for "Approved"
            /// </summary>
            [EnumMember(Value = "Approved")]
            Approved,
            
            /// <summary>
            /// Enum Paid for "Paid"
            /// </summary>
            [EnumMember(Value = "Paid")]
            Paid,
            
            /// <summary>
            /// Enum Rejected for "Rejected"
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected,
            
            /// <summary>
            /// Enum PartiallyPaid for "Partially Paid"
            /// </summary>
            [EnumMember(Value = "Partially Paid")]
            PartiallyPaid
        }

        /// <summary>
        /// Transaction state
        /// </summary>
        /// <value>Transaction state</value>
        [DataMember(Name="transaction_state", EmitDefaultValue=false)]
        public TransactionStateEnum? TransactionState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateLedger" /> class.
        /// </summary>
        /// <param name="AffiliateClickOid">Unique object identifier for the click associated with this ledger entry.</param>
        /// <param name="AffiliateLinkOid">Unique object identifier for the link that this click is associated with.</param>
        /// <param name="AffiliateOid">Affiliate object ID associated with this transaction.</param>
        /// <param name="AssignedByUser">User that assigned the transaction if it was done manually.</param>
        /// <param name="Click">Click.</param>
        /// <param name="ItemId">Item ID associated with this transaction.</param>
        /// <param name="Link">Link.</param>
        /// <param name="Order">Order.</param>
        /// <param name="OrderId">Order ID associated with this transaction.</param>
        /// <param name="OriginalTransactionDts">Date/time of the original transaction for reversals.</param>
        /// <param name="SubId">Sub ID associated with transaction (from the click).</param>
        /// <param name="TierNumber">Tier number that this transaction earned.</param>
        /// <param name="TransactionAmount">Transaction amount.</param>
        /// <param name="TransactionAmountPaid">Amount of the transaction that has been paid out..</param>
        /// <param name="TransactionDts">Date/time that the transaction was made.</param>
        /// <param name="TransactionMemo">Memo explaining the transaction.</param>
        /// <param name="TransactionPercentage">Percentage associated with this transaction.</param>
        /// <param name="TransactionState">Transaction state.</param>
        public AffiliateLedger(int? AffiliateClickOid = default(int?), int? AffiliateLinkOid = default(int?), int? AffiliateOid = default(int?), string AssignedByUser = default(string), AffiliateClick Click = default(AffiliateClick), string ItemId = default(string), AffiliateLink Link = default(AffiliateLink), Order Order = default(Order), string OrderId = default(string), string OriginalTransactionDts = default(string), string SubId = default(string), string TierNumber = default(string), decimal? TransactionAmount = default(decimal?), decimal? TransactionAmountPaid = default(decimal?), string TransactionDts = default(string), string TransactionMemo = default(string), string TransactionPercentage = default(string), TransactionStateEnum? TransactionState = default(TransactionStateEnum?))
        {
            this.AffiliateClickOid = AffiliateClickOid;
            this.AffiliateLinkOid = AffiliateLinkOid;
            this.AffiliateOid = AffiliateOid;
            this.AssignedByUser = AssignedByUser;
            this.Click = Click;
            this.ItemId = ItemId;
            this.Link = Link;
            this.Order = Order;
            this.OrderId = OrderId;
            this.OriginalTransactionDts = OriginalTransactionDts;
            this.SubId = SubId;
            this.TierNumber = TierNumber;
            this.TransactionAmount = TransactionAmount;
            this.TransactionAmountPaid = TransactionAmountPaid;
            this.TransactionDts = TransactionDts;
            this.TransactionMemo = TransactionMemo;
            this.TransactionPercentage = TransactionPercentage;
            this.TransactionState = TransactionState;
        }
        
        /// <summary>
        /// Unique object identifier for the click associated with this ledger entry
        /// </summary>
        /// <value>Unique object identifier for the click associated with this ledger entry</value>
        [DataMember(Name="affiliate_click_oid", EmitDefaultValue=false)]
        public int? AffiliateClickOid { get; set; }

        /// <summary>
        /// Unique object identifier for the link that this click is associated with
        /// </summary>
        /// <value>Unique object identifier for the link that this click is associated with</value>
        [DataMember(Name="affiliate_link_oid", EmitDefaultValue=false)]
        public int? AffiliateLinkOid { get; set; }

        /// <summary>
        /// Affiliate object ID associated with this transaction
        /// </summary>
        /// <value>Affiliate object ID associated with this transaction</value>
        [DataMember(Name="affiliate_oid", EmitDefaultValue=false)]
        public int? AffiliateOid { get; set; }

        /// <summary>
        /// User that assigned the transaction if it was done manually
        /// </summary>
        /// <value>User that assigned the transaction if it was done manually</value>
        [DataMember(Name="assigned_by_user", EmitDefaultValue=false)]
        public string AssignedByUser { get; set; }

        /// <summary>
        /// Gets or Sets Click
        /// </summary>
        [DataMember(Name="click", EmitDefaultValue=false)]
        public AffiliateClick Click { get; set; }

        /// <summary>
        /// Item ID associated with this transaction
        /// </summary>
        /// <value>Item ID associated with this transaction</value>
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public AffiliateLink Link { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public Order Order { get; set; }

        /// <summary>
        /// Order ID associated with this transaction
        /// </summary>
        /// <value>Order ID associated with this transaction</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Date/time of the original transaction for reversals
        /// </summary>
        /// <value>Date/time of the original transaction for reversals</value>
        [DataMember(Name="original_transaction_dts", EmitDefaultValue=false)]
        public string OriginalTransactionDts { get; set; }

        /// <summary>
        /// Sub ID associated with transaction (from the click)
        /// </summary>
        /// <value>Sub ID associated with transaction (from the click)</value>
        [DataMember(Name="sub_id", EmitDefaultValue=false)]
        public string SubId { get; set; }

        /// <summary>
        /// Tier number that this transaction earned
        /// </summary>
        /// <value>Tier number that this transaction earned</value>
        [DataMember(Name="tier_number", EmitDefaultValue=false)]
        public string TierNumber { get; set; }

        /// <summary>
        /// Transaction amount
        /// </summary>
        /// <value>Transaction amount</value>
        [DataMember(Name="transaction_amount", EmitDefaultValue=false)]
        public decimal? TransactionAmount { get; set; }

        /// <summary>
        /// Amount of the transaction that has been paid out.
        /// </summary>
        /// <value>Amount of the transaction that has been paid out.</value>
        [DataMember(Name="transaction_amount_paid", EmitDefaultValue=false)]
        public decimal? TransactionAmountPaid { get; set; }

        /// <summary>
        /// Date/time that the transaction was made
        /// </summary>
        /// <value>Date/time that the transaction was made</value>
        [DataMember(Name="transaction_dts", EmitDefaultValue=false)]
        public string TransactionDts { get; set; }

        /// <summary>
        /// Memo explaining the transaction
        /// </summary>
        /// <value>Memo explaining the transaction</value>
        [DataMember(Name="transaction_memo", EmitDefaultValue=false)]
        public string TransactionMemo { get; set; }

        /// <summary>
        /// Percentage associated with this transaction
        /// </summary>
        /// <value>Percentage associated with this transaction</value>
        [DataMember(Name="transaction_percentage", EmitDefaultValue=false)]
        public string TransactionPercentage { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AffiliateLedger {\n");
            sb.Append("  AffiliateClickOid: ").Append(AffiliateClickOid).Append("\n");
            sb.Append("  AffiliateLinkOid: ").Append(AffiliateLinkOid).Append("\n");
            sb.Append("  AffiliateOid: ").Append(AffiliateOid).Append("\n");
            sb.Append("  AssignedByUser: ").Append(AssignedByUser).Append("\n");
            sb.Append("  Click: ").Append(Click).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OriginalTransactionDts: ").Append(OriginalTransactionDts).Append("\n");
            sb.Append("  SubId: ").Append(SubId).Append("\n");
            sb.Append("  TierNumber: ").Append(TierNumber).Append("\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("  TransactionAmountPaid: ").Append(TransactionAmountPaid).Append("\n");
            sb.Append("  TransactionDts: ").Append(TransactionDts).Append("\n");
            sb.Append("  TransactionMemo: ").Append(TransactionMemo).Append("\n");
            sb.Append("  TransactionPercentage: ").Append(TransactionPercentage).Append("\n");
            sb.Append("  TransactionState: ").Append(TransactionState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AffiliateLedger);
        }

        /// <summary>
        /// Returns true if AffiliateLedger instances are equal
        /// </summary>
        /// <param name="input">Instance of AffiliateLedger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AffiliateLedger input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AffiliateClickOid == input.AffiliateClickOid ||
                    (this.AffiliateClickOid != null &&
                    this.AffiliateClickOid.Equals(input.AffiliateClickOid))
                ) && 
                (
                    this.AffiliateLinkOid == input.AffiliateLinkOid ||
                    (this.AffiliateLinkOid != null &&
                    this.AffiliateLinkOid.Equals(input.AffiliateLinkOid))
                ) && 
                (
                    this.AffiliateOid == input.AffiliateOid ||
                    (this.AffiliateOid != null &&
                    this.AffiliateOid.Equals(input.AffiliateOid))
                ) && 
                (
                    this.AssignedByUser == input.AssignedByUser ||
                    (this.AssignedByUser != null &&
                    this.AssignedByUser.Equals(input.AssignedByUser))
                ) && 
                (
                    this.Click == input.Click ||
                    (this.Click != null &&
                    this.Click.Equals(input.Click))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OriginalTransactionDts == input.OriginalTransactionDts ||
                    (this.OriginalTransactionDts != null &&
                    this.OriginalTransactionDts.Equals(input.OriginalTransactionDts))
                ) && 
                (
                    this.SubId == input.SubId ||
                    (this.SubId != null &&
                    this.SubId.Equals(input.SubId))
                ) && 
                (
                    this.TierNumber == input.TierNumber ||
                    (this.TierNumber != null &&
                    this.TierNumber.Equals(input.TierNumber))
                ) && 
                (
                    this.TransactionAmount == input.TransactionAmount ||
                    (this.TransactionAmount != null &&
                    this.TransactionAmount.Equals(input.TransactionAmount))
                ) && 
                (
                    this.TransactionAmountPaid == input.TransactionAmountPaid ||
                    (this.TransactionAmountPaid != null &&
                    this.TransactionAmountPaid.Equals(input.TransactionAmountPaid))
                ) && 
                (
                    this.TransactionDts == input.TransactionDts ||
                    (this.TransactionDts != null &&
                    this.TransactionDts.Equals(input.TransactionDts))
                ) && 
                (
                    this.TransactionMemo == input.TransactionMemo ||
                    (this.TransactionMemo != null &&
                    this.TransactionMemo.Equals(input.TransactionMemo))
                ) && 
                (
                    this.TransactionPercentage == input.TransactionPercentage ||
                    (this.TransactionPercentage != null &&
                    this.TransactionPercentage.Equals(input.TransactionPercentage))
                ) && 
                (
                    this.TransactionState == input.TransactionState ||
                    (this.TransactionState != null &&
                    this.TransactionState.Equals(input.TransactionState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AffiliateClickOid != null)
                    hashCode = hashCode * 59 + this.AffiliateClickOid.GetHashCode();
                if (this.AffiliateLinkOid != null)
                    hashCode = hashCode * 59 + this.AffiliateLinkOid.GetHashCode();
                if (this.AffiliateOid != null)
                    hashCode = hashCode * 59 + this.AffiliateOid.GetHashCode();
                if (this.AssignedByUser != null)
                    hashCode = hashCode * 59 + this.AssignedByUser.GetHashCode();
                if (this.Click != null)
                    hashCode = hashCode * 59 + this.Click.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.OriginalTransactionDts != null)
                    hashCode = hashCode * 59 + this.OriginalTransactionDts.GetHashCode();
                if (this.SubId != null)
                    hashCode = hashCode * 59 + this.SubId.GetHashCode();
                if (this.TierNumber != null)
                    hashCode = hashCode * 59 + this.TierNumber.GetHashCode();
                if (this.TransactionAmount != null)
                    hashCode = hashCode * 59 + this.TransactionAmount.GetHashCode();
                if (this.TransactionAmountPaid != null)
                    hashCode = hashCode * 59 + this.TransactionAmountPaid.GetHashCode();
                if (this.TransactionDts != null)
                    hashCode = hashCode * 59 + this.TransactionDts.GetHashCode();
                if (this.TransactionMemo != null)
                    hashCode = hashCode * 59 + this.TransactionMemo.GetHashCode();
                if (this.TransactionPercentage != null)
                    hashCode = hashCode * 59 + this.TransactionPercentage.GetHashCode();
                if (this.TransactionState != null)
                    hashCode = hashCode * 59 + this.TransactionState.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
