/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderPaymentTransaction
    /// </summary>
    [DataContract]
    public partial class OrderPaymentTransaction :  IEquatable<OrderPaymentTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderPaymentTransaction" /> class.
        /// </summary>
        /// <param name="Details">Details.</param>
        /// <param name="Successful">True if the transaction was successful.</param>
        /// <param name="TransactionGateway">Transaction gateway.</param>
        /// <param name="TransactionTimestamp">Transaction date/time.</param>
        public OrderPaymentTransaction(List<OrderPaymentTransactionDetail> Details = default(List<OrderPaymentTransactionDetail>), bool? Successful = default(bool?), string TransactionGateway = default(string), string TransactionTimestamp = default(string))
        {
            this.Details = Details;
            this.Successful = Successful;
            this.TransactionGateway = TransactionGateway;
            this.TransactionTimestamp = TransactionTimestamp;
        }
        
        /// <summary>
        /// Details
        /// </summary>
        /// <value>Details</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public List<OrderPaymentTransactionDetail> Details { get; set; }

        /// <summary>
        /// True if the transaction was successful
        /// </summary>
        /// <value>True if the transaction was successful</value>
        [DataMember(Name="successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Transaction gateway
        /// </summary>
        /// <value>Transaction gateway</value>
        [DataMember(Name="transaction_gateway", EmitDefaultValue=false)]
        public string TransactionGateway { get; set; }

        /// <summary>
        /// Transaction date/time
        /// </summary>
        /// <value>Transaction date/time</value>
        [DataMember(Name="transaction_timestamp", EmitDefaultValue=false)]
        public string TransactionTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderPaymentTransaction {\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  TransactionGateway: ").Append(TransactionGateway).Append("\n");
            sb.Append("  TransactionTimestamp: ").Append(TransactionTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderPaymentTransaction);
        }

        /// <summary>
        /// Returns true if OrderPaymentTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderPaymentTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderPaymentTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.TransactionGateway == input.TransactionGateway ||
                    (this.TransactionGateway != null &&
                    this.TransactionGateway.Equals(input.TransactionGateway))
                ) && 
                (
                    this.TransactionTimestamp == input.TransactionTimestamp ||
                    (this.TransactionTimestamp != null &&
                    this.TransactionTimestamp.Equals(input.TransactionTimestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.TransactionGateway != null)
                    hashCode = hashCode * 59 + this.TransactionGateway.GetHashCode();
                if (this.TransactionTimestamp != null)
                    hashCode = hashCode * 59 + this.TransactionTimestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
