/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemShippingCase
    /// </summary>
    [DataContract]
    public partial class ItemShippingCase :  IEquatable<ItemShippingCase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemShippingCase" /> class.
        /// </summary>
        /// <param name="CaseLabel">Case label.</param>
        /// <param name="CaseMerchantItemId">Case item id.</param>
        /// <param name="CaseMerchantItemOid">Case item object identifier.</param>
        /// <param name="Quantity">Case quantity.</param>
        public ItemShippingCase(string CaseLabel = default(string), string CaseMerchantItemId = default(string), int? CaseMerchantItemOid = default(int?), int? Quantity = default(int?))
        {
            this.CaseLabel = CaseLabel;
            this.CaseMerchantItemId = CaseMerchantItemId;
            this.CaseMerchantItemOid = CaseMerchantItemOid;
            this.Quantity = Quantity;
        }
        
        /// <summary>
        /// Case label
        /// </summary>
        /// <value>Case label</value>
        [DataMember(Name="case_label", EmitDefaultValue=false)]
        public string CaseLabel { get; set; }

        /// <summary>
        /// Case item id
        /// </summary>
        /// <value>Case item id</value>
        [DataMember(Name="case_merchant_item_id", EmitDefaultValue=false)]
        public string CaseMerchantItemId { get; set; }

        /// <summary>
        /// Case item object identifier
        /// </summary>
        /// <value>Case item object identifier</value>
        [DataMember(Name="case_merchant_item_oid", EmitDefaultValue=false)]
        public int? CaseMerchantItemOid { get; set; }

        /// <summary>
        /// Case quantity
        /// </summary>
        /// <value>Case quantity</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemShippingCase {\n");
            sb.Append("  CaseLabel: ").Append(CaseLabel).Append("\n");
            sb.Append("  CaseMerchantItemId: ").Append(CaseMerchantItemId).Append("\n");
            sb.Append("  CaseMerchantItemOid: ").Append(CaseMerchantItemOid).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemShippingCase);
        }

        /// <summary>
        /// Returns true if ItemShippingCase instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemShippingCase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemShippingCase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CaseLabel == input.CaseLabel ||
                    (this.CaseLabel != null &&
                    this.CaseLabel.Equals(input.CaseLabel))
                ) && 
                (
                    this.CaseMerchantItemId == input.CaseMerchantItemId ||
                    (this.CaseMerchantItemId != null &&
                    this.CaseMerchantItemId.Equals(input.CaseMerchantItemId))
                ) && 
                (
                    this.CaseMerchantItemOid == input.CaseMerchantItemOid ||
                    (this.CaseMerchantItemOid != null &&
                    this.CaseMerchantItemOid.Equals(input.CaseMerchantItemOid))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CaseLabel != null)
                    hashCode = hashCode * 59 + this.CaseLabel.GetHashCode();
                if (this.CaseMerchantItemId != null)
                    hashCode = hashCode * 59 + this.CaseMerchantItemId.GetHashCode();
                if (this.CaseMerchantItemOid != null)
                    hashCode = hashCode * 59 + this.CaseMerchantItemOid.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CaseLabel (string) maxLength
            if(this.CaseLabel != null && this.CaseLabel.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CaseLabel, length must be less than 20.", new [] { "CaseLabel" });
            }

            yield break;
        }
    }

}
