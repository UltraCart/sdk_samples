/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// AutoOrderItem
    /// </summary>
    [DataContract]
    public partial class AutoOrderItem :  IEquatable<AutoOrderItem>, IValidatableObject
    {
        /// <summary>
        /// Frequency of the rebill if not a fixed schedule
        /// </summary>
        /// <value>Frequency of the rebill if not a fixed schedule</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FrequencyEnum
        {
            
            /// <summary>
            /// Enum Weekly for "Weekly"
            /// </summary>
            [EnumMember(Value = "Weekly")]
            Weekly,
            
            /// <summary>
            /// Enum Biweekly for "Biweekly"
            /// </summary>
            [EnumMember(Value = "Biweekly")]
            Biweekly,
            
            /// <summary>
            /// Enum Every for "Every..."
            /// </summary>
            [EnumMember(Value = "Every...")]
            Every,
            
            /// <summary>
            /// Enum Every10Days for "Every 10 Days"
            /// </summary>
            [EnumMember(Value = "Every 10 Days")]
            Every10Days,
            
            /// <summary>
            /// Enum Every24Days for "Every 24 Days"
            /// </summary>
            [EnumMember(Value = "Every 24 Days")]
            Every24Days,
            
            /// <summary>
            /// Enum Every28Days for "Every 28 Days"
            /// </summary>
            [EnumMember(Value = "Every 28 Days")]
            Every28Days,
            
            /// <summary>
            /// Enum Monthly for "Monthly"
            /// </summary>
            [EnumMember(Value = "Monthly")]
            Monthly,
            
            /// <summary>
            /// Enum Every45Days for "Every 45 Days"
            /// </summary>
            [EnumMember(Value = "Every 45 Days")]
            Every45Days,
            
            /// <summary>
            /// Enum Every2Months for "Every 2 Months"
            /// </summary>
            [EnumMember(Value = "Every 2 Months")]
            Every2Months,
            
            /// <summary>
            /// Enum Every3Months for "Every 3 Months"
            /// </summary>
            [EnumMember(Value = "Every 3 Months")]
            Every3Months,
            
            /// <summary>
            /// Enum Every4Months for "Every 4 Months"
            /// </summary>
            [EnumMember(Value = "Every 4 Months")]
            Every4Months,
            
            /// <summary>
            /// Enum Every6Months for "Every 6 Months"
            /// </summary>
            [EnumMember(Value = "Every 6 Months")]
            Every6Months,
            
            /// <summary>
            /// Enum Yearly for "Yearly"
            /// </summary>
            [EnumMember(Value = "Yearly")]
            Yearly
        }

        /// <summary>
        /// Frequency of the rebill if not a fixed schedule
        /// </summary>
        /// <value>Frequency of the rebill if not a fixed schedule</value>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public FrequencyEnum? Frequency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoOrderItem" /> class.
        /// </summary>
        /// <param name="ArbitraryItemId">Arbitrary item id that should be rebilled instead of the normal schedule.</param>
        /// <param name="ArbitraryPercentageDiscount">An arbitrary percentage discount to provide on future rebills.</param>
        /// <param name="ArbitraryQuantity">Arbitrary quantity to rebill.</param>
        /// <param name="ArbitraryScheduleDays">The number of days to rebill if the frequency is set to an arbitrary number of days.</param>
        /// <param name="ArbitraryUnitCost">Arbitrary unit cost that rebills of this item should occur at.</param>
        /// <param name="ArbitraryUnitCostRemainingOrders">The number of rebills to give the arbitrary unit cost on before reverting to normal pricing..</param>
        /// <param name="AutoOrderItemOid">Primary key of AutoOrderItem.</param>
        /// <param name="Frequency">Frequency of the rebill if not a fixed schedule.</param>
        /// <param name="LastOrderDts">Date/time of the last order of this item.</param>
        /// <param name="LifeTimeValue">The life time value of this item including the original purchase.</param>
        /// <param name="NextPreshipmentNoticeDts">The date/time of when the next pre-shipment notice should be sent.</param>
        /// <param name="NextShipmentDts">Date/time that this item is scheduled to rebill.</param>
        /// <param name="NoOrderAfterDts">Date/time after which no additional rebills of this item should occur.</param>
        /// <param name="NumberOfRebills">The number of times this item has rebilled.</param>
        /// <param name="Options">Options associated with this item.</param>
        /// <param name="OriginalItemId">The original item id purchased.</param>
        /// <param name="OriginalQuantity">The original quantity purchased.</param>
        /// <param name="PaypalPayerId">The PayPal Payer ID tied to this item.</param>
        /// <param name="PaypalRecurringPaymentProfileId">The PayPal Profile ID tied to this item.</param>
        /// <param name="PreshipmentNoticeSent">True if the preshipment notice associated with the next rebill has been sent.</param>
        /// <param name="RebillValue">The value of the rebills of this item.</param>
        /// <param name="RemainingRepeatCount">The number of rebills remaining before this item is complete.</param>
        public AutoOrderItem(string ArbitraryItemId = default(string), decimal? ArbitraryPercentageDiscount = default(decimal?), decimal? ArbitraryQuantity = default(decimal?), int? ArbitraryScheduleDays = default(int?), decimal? ArbitraryUnitCost = default(decimal?), int? ArbitraryUnitCostRemainingOrders = default(int?), int? AutoOrderItemOid = default(int?), FrequencyEnum? Frequency = default(FrequencyEnum?), string LastOrderDts = default(string), decimal? LifeTimeValue = default(decimal?), string NextPreshipmentNoticeDts = default(string), string NextShipmentDts = default(string), string NoOrderAfterDts = default(string), int? NumberOfRebills = default(int?), List<AutoOrderItemOption> Options = default(List<AutoOrderItemOption>), string OriginalItemId = default(string), decimal? OriginalQuantity = default(decimal?), string PaypalPayerId = default(string), string PaypalRecurringPaymentProfileId = default(string), bool? PreshipmentNoticeSent = default(bool?), decimal? RebillValue = default(decimal?), int? RemainingRepeatCount = default(int?))
        {
            this.ArbitraryItemId = ArbitraryItemId;
            this.ArbitraryPercentageDiscount = ArbitraryPercentageDiscount;
            this.ArbitraryQuantity = ArbitraryQuantity;
            this.ArbitraryScheduleDays = ArbitraryScheduleDays;
            this.ArbitraryUnitCost = ArbitraryUnitCost;
            this.ArbitraryUnitCostRemainingOrders = ArbitraryUnitCostRemainingOrders;
            this.AutoOrderItemOid = AutoOrderItemOid;
            this.Frequency = Frequency;
            this.LastOrderDts = LastOrderDts;
            this.LifeTimeValue = LifeTimeValue;
            this.NextPreshipmentNoticeDts = NextPreshipmentNoticeDts;
            this.NextShipmentDts = NextShipmentDts;
            this.NoOrderAfterDts = NoOrderAfterDts;
            this.NumberOfRebills = NumberOfRebills;
            this.Options = Options;
            this.OriginalItemId = OriginalItemId;
            this.OriginalQuantity = OriginalQuantity;
            this.PaypalPayerId = PaypalPayerId;
            this.PaypalRecurringPaymentProfileId = PaypalRecurringPaymentProfileId;
            this.PreshipmentNoticeSent = PreshipmentNoticeSent;
            this.RebillValue = RebillValue;
            this.RemainingRepeatCount = RemainingRepeatCount;
        }
        
        /// <summary>
        /// Arbitrary item id that should be rebilled instead of the normal schedule
        /// </summary>
        /// <value>Arbitrary item id that should be rebilled instead of the normal schedule</value>
        [DataMember(Name="arbitrary_item_id", EmitDefaultValue=false)]
        public string ArbitraryItemId { get; set; }

        /// <summary>
        /// An arbitrary percentage discount to provide on future rebills
        /// </summary>
        /// <value>An arbitrary percentage discount to provide on future rebills</value>
        [DataMember(Name="arbitrary_percentage_discount", EmitDefaultValue=false)]
        public decimal? ArbitraryPercentageDiscount { get; set; }

        /// <summary>
        /// Arbitrary quantity to rebill
        /// </summary>
        /// <value>Arbitrary quantity to rebill</value>
        [DataMember(Name="arbitrary_quantity", EmitDefaultValue=false)]
        public decimal? ArbitraryQuantity { get; set; }

        /// <summary>
        /// The number of days to rebill if the frequency is set to an arbitrary number of days
        /// </summary>
        /// <value>The number of days to rebill if the frequency is set to an arbitrary number of days</value>
        [DataMember(Name="arbitrary_schedule_days", EmitDefaultValue=false)]
        public int? ArbitraryScheduleDays { get; set; }

        /// <summary>
        /// Arbitrary unit cost that rebills of this item should occur at
        /// </summary>
        /// <value>Arbitrary unit cost that rebills of this item should occur at</value>
        [DataMember(Name="arbitrary_unit_cost", EmitDefaultValue=false)]
        public decimal? ArbitraryUnitCost { get; set; }

        /// <summary>
        /// The number of rebills to give the arbitrary unit cost on before reverting to normal pricing.
        /// </summary>
        /// <value>The number of rebills to give the arbitrary unit cost on before reverting to normal pricing.</value>
        [DataMember(Name="arbitrary_unit_cost_remaining_orders", EmitDefaultValue=false)]
        public int? ArbitraryUnitCostRemainingOrders { get; set; }

        /// <summary>
        /// Primary key of AutoOrderItem
        /// </summary>
        /// <value>Primary key of AutoOrderItem</value>
        [DataMember(Name="auto_order_item_oid", EmitDefaultValue=false)]
        public int? AutoOrderItemOid { get; set; }


        /// <summary>
        /// Date/time of the last order of this item
        /// </summary>
        /// <value>Date/time of the last order of this item</value>
        [DataMember(Name="last_order_dts", EmitDefaultValue=false)]
        public string LastOrderDts { get; set; }

        /// <summary>
        /// The life time value of this item including the original purchase
        /// </summary>
        /// <value>The life time value of this item including the original purchase</value>
        [DataMember(Name="life_time_value", EmitDefaultValue=false)]
        public decimal? LifeTimeValue { get; set; }

        /// <summary>
        /// The date/time of when the next pre-shipment notice should be sent
        /// </summary>
        /// <value>The date/time of when the next pre-shipment notice should be sent</value>
        [DataMember(Name="next_preshipment_notice_dts", EmitDefaultValue=false)]
        public string NextPreshipmentNoticeDts { get; set; }

        /// <summary>
        /// Date/time that this item is scheduled to rebill
        /// </summary>
        /// <value>Date/time that this item is scheduled to rebill</value>
        [DataMember(Name="next_shipment_dts", EmitDefaultValue=false)]
        public string NextShipmentDts { get; set; }

        /// <summary>
        /// Date/time after which no additional rebills of this item should occur
        /// </summary>
        /// <value>Date/time after which no additional rebills of this item should occur</value>
        [DataMember(Name="no_order_after_dts", EmitDefaultValue=false)]
        public string NoOrderAfterDts { get; set; }

        /// <summary>
        /// The number of times this item has rebilled
        /// </summary>
        /// <value>The number of times this item has rebilled</value>
        [DataMember(Name="number_of_rebills", EmitDefaultValue=false)]
        public int? NumberOfRebills { get; set; }

        /// <summary>
        /// Options associated with this item
        /// </summary>
        /// <value>Options associated with this item</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<AutoOrderItemOption> Options { get; set; }

        /// <summary>
        /// The original item id purchased
        /// </summary>
        /// <value>The original item id purchased</value>
        [DataMember(Name="original_item_id", EmitDefaultValue=false)]
        public string OriginalItemId { get; set; }

        /// <summary>
        /// The original quantity purchased
        /// </summary>
        /// <value>The original quantity purchased</value>
        [DataMember(Name="original_quantity", EmitDefaultValue=false)]
        public decimal? OriginalQuantity { get; set; }

        /// <summary>
        /// The PayPal Payer ID tied to this item
        /// </summary>
        /// <value>The PayPal Payer ID tied to this item</value>
        [DataMember(Name="paypal_payer_id", EmitDefaultValue=false)]
        public string PaypalPayerId { get; set; }

        /// <summary>
        /// The PayPal Profile ID tied to this item
        /// </summary>
        /// <value>The PayPal Profile ID tied to this item</value>
        [DataMember(Name="paypal_recurring_payment_profile_id", EmitDefaultValue=false)]
        public string PaypalRecurringPaymentProfileId { get; set; }

        /// <summary>
        /// True if the preshipment notice associated with the next rebill has been sent
        /// </summary>
        /// <value>True if the preshipment notice associated with the next rebill has been sent</value>
        [DataMember(Name="preshipment_notice_sent", EmitDefaultValue=false)]
        public bool? PreshipmentNoticeSent { get; set; }

        /// <summary>
        /// The value of the rebills of this item
        /// </summary>
        /// <value>The value of the rebills of this item</value>
        [DataMember(Name="rebill_value", EmitDefaultValue=false)]
        public decimal? RebillValue { get; set; }

        /// <summary>
        /// The number of rebills remaining before this item is complete
        /// </summary>
        /// <value>The number of rebills remaining before this item is complete</value>
        [DataMember(Name="remaining_repeat_count", EmitDefaultValue=false)]
        public int? RemainingRepeatCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutoOrderItem {\n");
            sb.Append("  ArbitraryItemId: ").Append(ArbitraryItemId).Append("\n");
            sb.Append("  ArbitraryPercentageDiscount: ").Append(ArbitraryPercentageDiscount).Append("\n");
            sb.Append("  ArbitraryQuantity: ").Append(ArbitraryQuantity).Append("\n");
            sb.Append("  ArbitraryScheduleDays: ").Append(ArbitraryScheduleDays).Append("\n");
            sb.Append("  ArbitraryUnitCost: ").Append(ArbitraryUnitCost).Append("\n");
            sb.Append("  ArbitraryUnitCostRemainingOrders: ").Append(ArbitraryUnitCostRemainingOrders).Append("\n");
            sb.Append("  AutoOrderItemOid: ").Append(AutoOrderItemOid).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  LastOrderDts: ").Append(LastOrderDts).Append("\n");
            sb.Append("  LifeTimeValue: ").Append(LifeTimeValue).Append("\n");
            sb.Append("  NextPreshipmentNoticeDts: ").Append(NextPreshipmentNoticeDts).Append("\n");
            sb.Append("  NextShipmentDts: ").Append(NextShipmentDts).Append("\n");
            sb.Append("  NoOrderAfterDts: ").Append(NoOrderAfterDts).Append("\n");
            sb.Append("  NumberOfRebills: ").Append(NumberOfRebills).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  OriginalItemId: ").Append(OriginalItemId).Append("\n");
            sb.Append("  OriginalQuantity: ").Append(OriginalQuantity).Append("\n");
            sb.Append("  PaypalPayerId: ").Append(PaypalPayerId).Append("\n");
            sb.Append("  PaypalRecurringPaymentProfileId: ").Append(PaypalRecurringPaymentProfileId).Append("\n");
            sb.Append("  PreshipmentNoticeSent: ").Append(PreshipmentNoticeSent).Append("\n");
            sb.Append("  RebillValue: ").Append(RebillValue).Append("\n");
            sb.Append("  RemainingRepeatCount: ").Append(RemainingRepeatCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutoOrderItem);
        }

        /// <summary>
        /// Returns true if AutoOrderItem instances are equal
        /// </summary>
        /// <param name="input">Instance of AutoOrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutoOrderItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ArbitraryItemId == input.ArbitraryItemId ||
                    (this.ArbitraryItemId != null &&
                    this.ArbitraryItemId.Equals(input.ArbitraryItemId))
                ) && 
                (
                    this.ArbitraryPercentageDiscount == input.ArbitraryPercentageDiscount ||
                    (this.ArbitraryPercentageDiscount != null &&
                    this.ArbitraryPercentageDiscount.Equals(input.ArbitraryPercentageDiscount))
                ) && 
                (
                    this.ArbitraryQuantity == input.ArbitraryQuantity ||
                    (this.ArbitraryQuantity != null &&
                    this.ArbitraryQuantity.Equals(input.ArbitraryQuantity))
                ) && 
                (
                    this.ArbitraryScheduleDays == input.ArbitraryScheduleDays ||
                    (this.ArbitraryScheduleDays != null &&
                    this.ArbitraryScheduleDays.Equals(input.ArbitraryScheduleDays))
                ) && 
                (
                    this.ArbitraryUnitCost == input.ArbitraryUnitCost ||
                    (this.ArbitraryUnitCost != null &&
                    this.ArbitraryUnitCost.Equals(input.ArbitraryUnitCost))
                ) && 
                (
                    this.ArbitraryUnitCostRemainingOrders == input.ArbitraryUnitCostRemainingOrders ||
                    (this.ArbitraryUnitCostRemainingOrders != null &&
                    this.ArbitraryUnitCostRemainingOrders.Equals(input.ArbitraryUnitCostRemainingOrders))
                ) && 
                (
                    this.AutoOrderItemOid == input.AutoOrderItemOid ||
                    (this.AutoOrderItemOid != null &&
                    this.AutoOrderItemOid.Equals(input.AutoOrderItemOid))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.LastOrderDts == input.LastOrderDts ||
                    (this.LastOrderDts != null &&
                    this.LastOrderDts.Equals(input.LastOrderDts))
                ) && 
                (
                    this.LifeTimeValue == input.LifeTimeValue ||
                    (this.LifeTimeValue != null &&
                    this.LifeTimeValue.Equals(input.LifeTimeValue))
                ) && 
                (
                    this.NextPreshipmentNoticeDts == input.NextPreshipmentNoticeDts ||
                    (this.NextPreshipmentNoticeDts != null &&
                    this.NextPreshipmentNoticeDts.Equals(input.NextPreshipmentNoticeDts))
                ) && 
                (
                    this.NextShipmentDts == input.NextShipmentDts ||
                    (this.NextShipmentDts != null &&
                    this.NextShipmentDts.Equals(input.NextShipmentDts))
                ) && 
                (
                    this.NoOrderAfterDts == input.NoOrderAfterDts ||
                    (this.NoOrderAfterDts != null &&
                    this.NoOrderAfterDts.Equals(input.NoOrderAfterDts))
                ) && 
                (
                    this.NumberOfRebills == input.NumberOfRebills ||
                    (this.NumberOfRebills != null &&
                    this.NumberOfRebills.Equals(input.NumberOfRebills))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.OriginalItemId == input.OriginalItemId ||
                    (this.OriginalItemId != null &&
                    this.OriginalItemId.Equals(input.OriginalItemId))
                ) && 
                (
                    this.OriginalQuantity == input.OriginalQuantity ||
                    (this.OriginalQuantity != null &&
                    this.OriginalQuantity.Equals(input.OriginalQuantity))
                ) && 
                (
                    this.PaypalPayerId == input.PaypalPayerId ||
                    (this.PaypalPayerId != null &&
                    this.PaypalPayerId.Equals(input.PaypalPayerId))
                ) && 
                (
                    this.PaypalRecurringPaymentProfileId == input.PaypalRecurringPaymentProfileId ||
                    (this.PaypalRecurringPaymentProfileId != null &&
                    this.PaypalRecurringPaymentProfileId.Equals(input.PaypalRecurringPaymentProfileId))
                ) && 
                (
                    this.PreshipmentNoticeSent == input.PreshipmentNoticeSent ||
                    (this.PreshipmentNoticeSent != null &&
                    this.PreshipmentNoticeSent.Equals(input.PreshipmentNoticeSent))
                ) && 
                (
                    this.RebillValue == input.RebillValue ||
                    (this.RebillValue != null &&
                    this.RebillValue.Equals(input.RebillValue))
                ) && 
                (
                    this.RemainingRepeatCount == input.RemainingRepeatCount ||
                    (this.RemainingRepeatCount != null &&
                    this.RemainingRepeatCount.Equals(input.RemainingRepeatCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArbitraryItemId != null)
                    hashCode = hashCode * 59 + this.ArbitraryItemId.GetHashCode();
                if (this.ArbitraryPercentageDiscount != null)
                    hashCode = hashCode * 59 + this.ArbitraryPercentageDiscount.GetHashCode();
                if (this.ArbitraryQuantity != null)
                    hashCode = hashCode * 59 + this.ArbitraryQuantity.GetHashCode();
                if (this.ArbitraryScheduleDays != null)
                    hashCode = hashCode * 59 + this.ArbitraryScheduleDays.GetHashCode();
                if (this.ArbitraryUnitCost != null)
                    hashCode = hashCode * 59 + this.ArbitraryUnitCost.GetHashCode();
                if (this.ArbitraryUnitCostRemainingOrders != null)
                    hashCode = hashCode * 59 + this.ArbitraryUnitCostRemainingOrders.GetHashCode();
                if (this.AutoOrderItemOid != null)
                    hashCode = hashCode * 59 + this.AutoOrderItemOid.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.LastOrderDts != null)
                    hashCode = hashCode * 59 + this.LastOrderDts.GetHashCode();
                if (this.LifeTimeValue != null)
                    hashCode = hashCode * 59 + this.LifeTimeValue.GetHashCode();
                if (this.NextPreshipmentNoticeDts != null)
                    hashCode = hashCode * 59 + this.NextPreshipmentNoticeDts.GetHashCode();
                if (this.NextShipmentDts != null)
                    hashCode = hashCode * 59 + this.NextShipmentDts.GetHashCode();
                if (this.NoOrderAfterDts != null)
                    hashCode = hashCode * 59 + this.NoOrderAfterDts.GetHashCode();
                if (this.NumberOfRebills != null)
                    hashCode = hashCode * 59 + this.NumberOfRebills.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.OriginalItemId != null)
                    hashCode = hashCode * 59 + this.OriginalItemId.GetHashCode();
                if (this.OriginalQuantity != null)
                    hashCode = hashCode * 59 + this.OriginalQuantity.GetHashCode();
                if (this.PaypalPayerId != null)
                    hashCode = hashCode * 59 + this.PaypalPayerId.GetHashCode();
                if (this.PaypalRecurringPaymentProfileId != null)
                    hashCode = hashCode * 59 + this.PaypalRecurringPaymentProfileId.GetHashCode();
                if (this.PreshipmentNoticeSent != null)
                    hashCode = hashCode * 59 + this.PreshipmentNoticeSent.GetHashCode();
                if (this.RebillValue != null)
                    hashCode = hashCode * 59 + this.RebillValue.GetHashCode();
                if (this.RemainingRepeatCount != null)
                    hashCode = hashCode * 59 + this.RemainingRepeatCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
