/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemVariantItem
    /// </summary>
    [DataContract]
    public partial class ItemVariantItem :  IEquatable<ItemVariantItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemVariantItem" /> class.
        /// </summary>
        /// <param name="Description">Description.</param>
        /// <param name="MerchantItemMultimediaOid">Multimedia object identifier.</param>
        /// <param name="VariantMerchantItemId">Variant item id.</param>
        /// <param name="VariantMerchantItemOid">Variant item object identifier.</param>
        /// <param name="VariationOptions">Variation options.</param>
        /// <param name="Variations">Variations.</param>
        public ItemVariantItem(string Description = default(string), int? MerchantItemMultimediaOid = default(int?), string VariantMerchantItemId = default(string), int? VariantMerchantItemOid = default(int?), List<string> VariationOptions = default(List<string>), List<string> Variations = default(List<string>))
        {
            this.Description = Description;
            this.MerchantItemMultimediaOid = MerchantItemMultimediaOid;
            this.VariantMerchantItemId = VariantMerchantItemId;
            this.VariantMerchantItemOid = VariantMerchantItemOid;
            this.VariationOptions = VariationOptions;
            this.Variations = Variations;
        }
        
        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Multimedia object identifier
        /// </summary>
        /// <value>Multimedia object identifier</value>
        [DataMember(Name="merchant_item_multimedia_oid", EmitDefaultValue=false)]
        public int? MerchantItemMultimediaOid { get; set; }

        /// <summary>
        /// Variant item id
        /// </summary>
        /// <value>Variant item id</value>
        [DataMember(Name="variant_merchant_item_id", EmitDefaultValue=false)]
        public string VariantMerchantItemId { get; set; }

        /// <summary>
        /// Variant item object identifier
        /// </summary>
        /// <value>Variant item object identifier</value>
        [DataMember(Name="variant_merchant_item_oid", EmitDefaultValue=false)]
        public int? VariantMerchantItemOid { get; set; }

        /// <summary>
        /// Variation options
        /// </summary>
        /// <value>Variation options</value>
        [DataMember(Name="variation_options", EmitDefaultValue=false)]
        public List<string> VariationOptions { get; set; }

        /// <summary>
        /// Variations
        /// </summary>
        /// <value>Variations</value>
        [DataMember(Name="variations", EmitDefaultValue=false)]
        public List<string> Variations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemVariantItem {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MerchantItemMultimediaOid: ").Append(MerchantItemMultimediaOid).Append("\n");
            sb.Append("  VariantMerchantItemId: ").Append(VariantMerchantItemId).Append("\n");
            sb.Append("  VariantMerchantItemOid: ").Append(VariantMerchantItemOid).Append("\n");
            sb.Append("  VariationOptions: ").Append(VariationOptions).Append("\n");
            sb.Append("  Variations: ").Append(Variations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemVariantItem);
        }

        /// <summary>
        /// Returns true if ItemVariantItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemVariantItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemVariantItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.MerchantItemMultimediaOid == input.MerchantItemMultimediaOid ||
                    (this.MerchantItemMultimediaOid != null &&
                    this.MerchantItemMultimediaOid.Equals(input.MerchantItemMultimediaOid))
                ) && 
                (
                    this.VariantMerchantItemId == input.VariantMerchantItemId ||
                    (this.VariantMerchantItemId != null &&
                    this.VariantMerchantItemId.Equals(input.VariantMerchantItemId))
                ) && 
                (
                    this.VariantMerchantItemOid == input.VariantMerchantItemOid ||
                    (this.VariantMerchantItemOid != null &&
                    this.VariantMerchantItemOid.Equals(input.VariantMerchantItemOid))
                ) && 
                (
                    this.VariationOptions == input.VariationOptions ||
                    this.VariationOptions != null &&
                    this.VariationOptions.SequenceEqual(input.VariationOptions)
                ) && 
                (
                    this.Variations == input.Variations ||
                    this.Variations != null &&
                    this.Variations.SequenceEqual(input.Variations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.MerchantItemMultimediaOid != null)
                    hashCode = hashCode * 59 + this.MerchantItemMultimediaOid.GetHashCode();
                if (this.VariantMerchantItemId != null)
                    hashCode = hashCode * 59 + this.VariantMerchantItemId.GetHashCode();
                if (this.VariantMerchantItemOid != null)
                    hashCode = hashCode * 59 + this.VariantMerchantItemOid.GetHashCode();
                if (this.VariationOptions != null)
                    hashCode = hashCode * 59 + this.VariationOptions.GetHashCode();
                if (this.Variations != null)
                    hashCode = hashCode * 59 + this.Variations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }

            yield break;
        }
    }

}
