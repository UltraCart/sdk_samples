/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// Error
    /// </summary>
    [DataContract]
    public partial class Error :  IEquatable<Error>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        /// <param name="DeveloperMessage">A technical message meant to be read by a developer.</param>
        /// <param name="ErrorCode">HTTP status code.</param>
        /// <param name="MoreInfo">Additional information often a link to additional documentation.</param>
        /// <param name="UserMessage">An end-user friendly message suitable for display to the customer.</param>
        public Error(string DeveloperMessage = default(string), string ErrorCode = default(string), string MoreInfo = default(string), string UserMessage = default(string))
        {
            this.DeveloperMessage = DeveloperMessage;
            this.ErrorCode = ErrorCode;
            this.MoreInfo = MoreInfo;
            this.UserMessage = UserMessage;
        }
        
        /// <summary>
        /// A technical message meant to be read by a developer
        /// </summary>
        /// <value>A technical message meant to be read by a developer</value>
        [DataMember(Name="developer_message", EmitDefaultValue=false)]
        public string DeveloperMessage { get; set; }

        /// <summary>
        /// HTTP status code
        /// </summary>
        /// <value>HTTP status code</value>
        [DataMember(Name="error_code", EmitDefaultValue=false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Additional information often a link to additional documentation
        /// </summary>
        /// <value>Additional information often a link to additional documentation</value>
        [DataMember(Name="more_info", EmitDefaultValue=false)]
        public string MoreInfo { get; set; }

        /// <summary>
        /// An end-user friendly message suitable for display to the customer
        /// </summary>
        /// <value>An end-user friendly message suitable for display to the customer</value>
        [DataMember(Name="user_message", EmitDefaultValue=false)]
        public string UserMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  DeveloperMessage: ").Append(DeveloperMessage).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  MoreInfo: ").Append(MoreInfo).Append("\n");
            sb.Append("  UserMessage: ").Append(UserMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Error);
        }

        /// <summary>
        /// Returns true if Error instances are equal
        /// </summary>
        /// <param name="input">Instance of Error to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Error input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeveloperMessage == input.DeveloperMessage ||
                    (this.DeveloperMessage != null &&
                    this.DeveloperMessage.Equals(input.DeveloperMessage))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.MoreInfo == input.MoreInfo ||
                    (this.MoreInfo != null &&
                    this.MoreInfo.Equals(input.MoreInfo))
                ) && 
                (
                    this.UserMessage == input.UserMessage ||
                    (this.UserMessage != null &&
                    this.UserMessage.Equals(input.UserMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeveloperMessage != null)
                    hashCode = hashCode * 59 + this.DeveloperMessage.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.MoreInfo != null)
                    hashCode = hashCode * 59 + this.MoreInfo.GetHashCode();
                if (this.UserMessage != null)
                    hashCode = hashCode * 59 + this.UserMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
