/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartAffiliate
    /// </summary>
    [DataContract]
    public partial class CartAffiliate :  IEquatable<CartAffiliate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartAffiliate" /> class.
        /// </summary>
        /// <param name="AffiliateId">Affiliate id associated with the cart.</param>
        /// <param name="AffiliateSubId">Affiliate sub id associated with the cart.</param>
        public CartAffiliate(int? AffiliateId = default(int?), string AffiliateSubId = default(string))
        {
            this.AffiliateId = AffiliateId;
            this.AffiliateSubId = AffiliateSubId;
        }
        
        /// <summary>
        /// Affiliate id associated with the cart
        /// </summary>
        /// <value>Affiliate id associated with the cart</value>
        [DataMember(Name="affiliate_id", EmitDefaultValue=false)]
        public int? AffiliateId { get; set; }

        /// <summary>
        /// Affiliate sub id associated with the cart
        /// </summary>
        /// <value>Affiliate sub id associated with the cart</value>
        [DataMember(Name="affiliate_sub_id", EmitDefaultValue=false)]
        public string AffiliateSubId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartAffiliate {\n");
            sb.Append("  AffiliateId: ").Append(AffiliateId).Append("\n");
            sb.Append("  AffiliateSubId: ").Append(AffiliateSubId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartAffiliate);
        }

        /// <summary>
        /// Returns true if CartAffiliate instances are equal
        /// </summary>
        /// <param name="input">Instance of CartAffiliate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartAffiliate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AffiliateId == input.AffiliateId ||
                    (this.AffiliateId != null &&
                    this.AffiliateId.Equals(input.AffiliateId))
                ) && 
                (
                    this.AffiliateSubId == input.AffiliateSubId ||
                    (this.AffiliateSubId != null &&
                    this.AffiliateSubId.Equals(input.AffiliateSubId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AffiliateId != null)
                    hashCode = hashCode * 59 + this.AffiliateId.GetHashCode();
                if (this.AffiliateSubId != null)
                    hashCode = hashCode * 59 + this.AffiliateSubId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AffiliateSubId (string) maxLength
            if(this.AffiliateSubId != null && this.AffiliateSubId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AffiliateSubId, length must be less than 50.", new [] { "AffiliateSubId" });
            }

            yield break;
        }
    }

}
