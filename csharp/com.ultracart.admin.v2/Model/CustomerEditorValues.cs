/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CustomerEditorValues
    /// </summary>
    [DataContract]
    public partial class CustomerEditorValues :  IEquatable<CustomerEditorValues>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerEditorValues" /> class.
        /// </summary>
        /// <param name="Affiliates">affiliates.</param>
        /// <param name="CardExpMonths">card_exp_months.</param>
        /// <param name="CardExpYears">card_exp_years.</param>
        /// <param name="CardTypes">card_types.</param>
        /// <param name="Countries">countries.</param>
        /// <param name="QbClasses">qb_classes.</param>
        /// <param name="SalesRepCodes">sales_rep_codes.</param>
        /// <param name="Terms">terms.</param>
        public CustomerEditorValues(List<CustomerAffiliate> Affiliates = default(List<CustomerAffiliate>), List<string> CardExpMonths = default(List<string>), List<string> CardExpYears = default(List<string>), List<string> CardTypes = default(List<string>), List<string> Countries = default(List<string>), List<string> QbClasses = default(List<string>), List<string> SalesRepCodes = default(List<string>), List<string> Terms = default(List<string>))
        {
            this.Affiliates = Affiliates;
            this.CardExpMonths = CardExpMonths;
            this.CardExpYears = CardExpYears;
            this.CardTypes = CardTypes;
            this.Countries = Countries;
            this.QbClasses = QbClasses;
            this.SalesRepCodes = SalesRepCodes;
            this.Terms = Terms;
        }
        
        /// <summary>
        /// affiliates
        /// </summary>
        /// <value>affiliates</value>
        [DataMember(Name="affiliates", EmitDefaultValue=false)]
        public List<CustomerAffiliate> Affiliates { get; set; }

        /// <summary>
        /// card_exp_months
        /// </summary>
        /// <value>card_exp_months</value>
        [DataMember(Name="card_exp_months", EmitDefaultValue=false)]
        public List<string> CardExpMonths { get; set; }

        /// <summary>
        /// card_exp_years
        /// </summary>
        /// <value>card_exp_years</value>
        [DataMember(Name="card_exp_years", EmitDefaultValue=false)]
        public List<string> CardExpYears { get; set; }

        /// <summary>
        /// card_types
        /// </summary>
        /// <value>card_types</value>
        [DataMember(Name="card_types", EmitDefaultValue=false)]
        public List<string> CardTypes { get; set; }

        /// <summary>
        /// countries
        /// </summary>
        /// <value>countries</value>
        [DataMember(Name="countries", EmitDefaultValue=false)]
        public List<string> Countries { get; set; }

        /// <summary>
        /// qb_classes
        /// </summary>
        /// <value>qb_classes</value>
        [DataMember(Name="qb_classes", EmitDefaultValue=false)]
        public List<string> QbClasses { get; set; }

        /// <summary>
        /// sales_rep_codes
        /// </summary>
        /// <value>sales_rep_codes</value>
        [DataMember(Name="sales_rep_codes", EmitDefaultValue=false)]
        public List<string> SalesRepCodes { get; set; }

        /// <summary>
        /// terms
        /// </summary>
        /// <value>terms</value>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public List<string> Terms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerEditorValues {\n");
            sb.Append("  Affiliates: ").Append(Affiliates).Append("\n");
            sb.Append("  CardExpMonths: ").Append(CardExpMonths).Append("\n");
            sb.Append("  CardExpYears: ").Append(CardExpYears).Append("\n");
            sb.Append("  CardTypes: ").Append(CardTypes).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  QbClasses: ").Append(QbClasses).Append("\n");
            sb.Append("  SalesRepCodes: ").Append(SalesRepCodes).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerEditorValues);
        }

        /// <summary>
        /// Returns true if CustomerEditorValues instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerEditorValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerEditorValues input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Affiliates == input.Affiliates ||
                    this.Affiliates != null &&
                    this.Affiliates.SequenceEqual(input.Affiliates)
                ) && 
                (
                    this.CardExpMonths == input.CardExpMonths ||
                    this.CardExpMonths != null &&
                    this.CardExpMonths.SequenceEqual(input.CardExpMonths)
                ) && 
                (
                    this.CardExpYears == input.CardExpYears ||
                    this.CardExpYears != null &&
                    this.CardExpYears.SequenceEqual(input.CardExpYears)
                ) && 
                (
                    this.CardTypes == input.CardTypes ||
                    this.CardTypes != null &&
                    this.CardTypes.SequenceEqual(input.CardTypes)
                ) && 
                (
                    this.Countries == input.Countries ||
                    this.Countries != null &&
                    this.Countries.SequenceEqual(input.Countries)
                ) && 
                (
                    this.QbClasses == input.QbClasses ||
                    this.QbClasses != null &&
                    this.QbClasses.SequenceEqual(input.QbClasses)
                ) && 
                (
                    this.SalesRepCodes == input.SalesRepCodes ||
                    this.SalesRepCodes != null &&
                    this.SalesRepCodes.SequenceEqual(input.SalesRepCodes)
                ) && 
                (
                    this.Terms == input.Terms ||
                    this.Terms != null &&
                    this.Terms.SequenceEqual(input.Terms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Affiliates != null)
                    hashCode = hashCode * 59 + this.Affiliates.GetHashCode();
                if (this.CardExpMonths != null)
                    hashCode = hashCode * 59 + this.CardExpMonths.GetHashCode();
                if (this.CardExpYears != null)
                    hashCode = hashCode * 59 + this.CardExpYears.GetHashCode();
                if (this.CardTypes != null)
                    hashCode = hashCode * 59 + this.CardTypes.GetHashCode();
                if (this.Countries != null)
                    hashCode = hashCode * 59 + this.Countries.GetHashCode();
                if (this.QbClasses != null)
                    hashCode = hashCode * 59 + this.QbClasses.GetHashCode();
                if (this.SalesRepCodes != null)
                    hashCode = hashCode * 59 + this.SalesRepCodes.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
