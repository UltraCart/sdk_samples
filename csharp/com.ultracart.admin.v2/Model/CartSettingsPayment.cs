/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// CartSettingsPayment
    /// </summary>
    [DataContract]
    public partial class CartSettingsPayment :  IEquatable<CartSettingsPayment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartSettingsPayment" /> class.
        /// </summary>
        /// <param name="Amazon">Amazon.</param>
        /// <param name="CreditCard">CreditCard.</param>
        /// <param name="NeedPayment">True if this card requires a payment from the customer.</param>
        /// <param name="Paypal">Paypal.</param>
        /// <param name="SupportsAmazon">True if Amazon payments are available on this order.</param>
        /// <param name="SupportsCheck">True if check payments are available on this order.</param>
        /// <param name="SupportsCod">True if COD payments are available on this order.</param>
        /// <param name="SupportsCreditCard">True if credit card payments are available on this order.</param>
        /// <param name="SupportsMoneyOrder">True if money order payments are available on this order.</param>
        /// <param name="SupportsPaypal">True if PayPal payments are available on this order.</param>
        /// <param name="SupportsPurchaseOrder">True if purchase order payments are available on this order.</param>
        /// <param name="SupportsQuoteRequest">True if quote requests payments are available on this order.</param>
        /// <param name="SupportsWireTransfer">True if wire transfer payments are available on this order.</param>
        public CartSettingsPayment(CartSettingsPaymentAmazon Amazon = default(CartSettingsPaymentAmazon), CartSettingsPaymentCreditCard CreditCard = default(CartSettingsPaymentCreditCard), bool? NeedPayment = default(bool?), CartSettingsPaymentPayPal Paypal = default(CartSettingsPaymentPayPal), bool? SupportsAmazon = default(bool?), bool? SupportsCheck = default(bool?), bool? SupportsCod = default(bool?), bool? SupportsCreditCard = default(bool?), bool? SupportsMoneyOrder = default(bool?), bool? SupportsPaypal = default(bool?), bool? SupportsPurchaseOrder = default(bool?), bool? SupportsQuoteRequest = default(bool?), bool? SupportsWireTransfer = default(bool?))
        {
            this.Amazon = Amazon;
            this.CreditCard = CreditCard;
            this.NeedPayment = NeedPayment;
            this.Paypal = Paypal;
            this.SupportsAmazon = SupportsAmazon;
            this.SupportsCheck = SupportsCheck;
            this.SupportsCod = SupportsCod;
            this.SupportsCreditCard = SupportsCreditCard;
            this.SupportsMoneyOrder = SupportsMoneyOrder;
            this.SupportsPaypal = SupportsPaypal;
            this.SupportsPurchaseOrder = SupportsPurchaseOrder;
            this.SupportsQuoteRequest = SupportsQuoteRequest;
            this.SupportsWireTransfer = SupportsWireTransfer;
        }
        
        /// <summary>
        /// Gets or Sets Amazon
        /// </summary>
        [DataMember(Name="amazon", EmitDefaultValue=false)]
        public CartSettingsPaymentAmazon Amazon { get; set; }

        /// <summary>
        /// Gets or Sets CreditCard
        /// </summary>
        [DataMember(Name="credit_card", EmitDefaultValue=false)]
        public CartSettingsPaymentCreditCard CreditCard { get; set; }

        /// <summary>
        /// True if this card requires a payment from the customer
        /// </summary>
        /// <value>True if this card requires a payment from the customer</value>
        [DataMember(Name="need_payment", EmitDefaultValue=false)]
        public bool? NeedPayment { get; set; }

        /// <summary>
        /// Gets or Sets Paypal
        /// </summary>
        [DataMember(Name="paypal", EmitDefaultValue=false)]
        public CartSettingsPaymentPayPal Paypal { get; set; }

        /// <summary>
        /// True if Amazon payments are available on this order
        /// </summary>
        /// <value>True if Amazon payments are available on this order</value>
        [DataMember(Name="supports_amazon", EmitDefaultValue=false)]
        public bool? SupportsAmazon { get; set; }

        /// <summary>
        /// True if check payments are available on this order
        /// </summary>
        /// <value>True if check payments are available on this order</value>
        [DataMember(Name="supports_check", EmitDefaultValue=false)]
        public bool? SupportsCheck { get; set; }

        /// <summary>
        /// True if COD payments are available on this order
        /// </summary>
        /// <value>True if COD payments are available on this order</value>
        [DataMember(Name="supports_cod", EmitDefaultValue=false)]
        public bool? SupportsCod { get; set; }

        /// <summary>
        /// True if credit card payments are available on this order
        /// </summary>
        /// <value>True if credit card payments are available on this order</value>
        [DataMember(Name="supports_credit_card", EmitDefaultValue=false)]
        public bool? SupportsCreditCard { get; set; }

        /// <summary>
        /// True if money order payments are available on this order
        /// </summary>
        /// <value>True if money order payments are available on this order</value>
        [DataMember(Name="supports_money_order", EmitDefaultValue=false)]
        public bool? SupportsMoneyOrder { get; set; }

        /// <summary>
        /// True if PayPal payments are available on this order
        /// </summary>
        /// <value>True if PayPal payments are available on this order</value>
        [DataMember(Name="supports_paypal", EmitDefaultValue=false)]
        public bool? SupportsPaypal { get; set; }

        /// <summary>
        /// True if purchase order payments are available on this order
        /// </summary>
        /// <value>True if purchase order payments are available on this order</value>
        [DataMember(Name="supports_purchase_order", EmitDefaultValue=false)]
        public bool? SupportsPurchaseOrder { get; set; }

        /// <summary>
        /// True if quote requests payments are available on this order
        /// </summary>
        /// <value>True if quote requests payments are available on this order</value>
        [DataMember(Name="supports_quote_request", EmitDefaultValue=false)]
        public bool? SupportsQuoteRequest { get; set; }

        /// <summary>
        /// True if wire transfer payments are available on this order
        /// </summary>
        /// <value>True if wire transfer payments are available on this order</value>
        [DataMember(Name="supports_wire_transfer", EmitDefaultValue=false)]
        public bool? SupportsWireTransfer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartSettingsPayment {\n");
            sb.Append("  Amazon: ").Append(Amazon).Append("\n");
            sb.Append("  CreditCard: ").Append(CreditCard).Append("\n");
            sb.Append("  NeedPayment: ").Append(NeedPayment).Append("\n");
            sb.Append("  Paypal: ").Append(Paypal).Append("\n");
            sb.Append("  SupportsAmazon: ").Append(SupportsAmazon).Append("\n");
            sb.Append("  SupportsCheck: ").Append(SupportsCheck).Append("\n");
            sb.Append("  SupportsCod: ").Append(SupportsCod).Append("\n");
            sb.Append("  SupportsCreditCard: ").Append(SupportsCreditCard).Append("\n");
            sb.Append("  SupportsMoneyOrder: ").Append(SupportsMoneyOrder).Append("\n");
            sb.Append("  SupportsPaypal: ").Append(SupportsPaypal).Append("\n");
            sb.Append("  SupportsPurchaseOrder: ").Append(SupportsPurchaseOrder).Append("\n");
            sb.Append("  SupportsQuoteRequest: ").Append(SupportsQuoteRequest).Append("\n");
            sb.Append("  SupportsWireTransfer: ").Append(SupportsWireTransfer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartSettingsPayment);
        }

        /// <summary>
        /// Returns true if CartSettingsPayment instances are equal
        /// </summary>
        /// <param name="input">Instance of CartSettingsPayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartSettingsPayment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amazon == input.Amazon ||
                    (this.Amazon != null &&
                    this.Amazon.Equals(input.Amazon))
                ) && 
                (
                    this.CreditCard == input.CreditCard ||
                    (this.CreditCard != null &&
                    this.CreditCard.Equals(input.CreditCard))
                ) && 
                (
                    this.NeedPayment == input.NeedPayment ||
                    (this.NeedPayment != null &&
                    this.NeedPayment.Equals(input.NeedPayment))
                ) && 
                (
                    this.Paypal == input.Paypal ||
                    (this.Paypal != null &&
                    this.Paypal.Equals(input.Paypal))
                ) && 
                (
                    this.SupportsAmazon == input.SupportsAmazon ||
                    (this.SupportsAmazon != null &&
                    this.SupportsAmazon.Equals(input.SupportsAmazon))
                ) && 
                (
                    this.SupportsCheck == input.SupportsCheck ||
                    (this.SupportsCheck != null &&
                    this.SupportsCheck.Equals(input.SupportsCheck))
                ) && 
                (
                    this.SupportsCod == input.SupportsCod ||
                    (this.SupportsCod != null &&
                    this.SupportsCod.Equals(input.SupportsCod))
                ) && 
                (
                    this.SupportsCreditCard == input.SupportsCreditCard ||
                    (this.SupportsCreditCard != null &&
                    this.SupportsCreditCard.Equals(input.SupportsCreditCard))
                ) && 
                (
                    this.SupportsMoneyOrder == input.SupportsMoneyOrder ||
                    (this.SupportsMoneyOrder != null &&
                    this.SupportsMoneyOrder.Equals(input.SupportsMoneyOrder))
                ) && 
                (
                    this.SupportsPaypal == input.SupportsPaypal ||
                    (this.SupportsPaypal != null &&
                    this.SupportsPaypal.Equals(input.SupportsPaypal))
                ) && 
                (
                    this.SupportsPurchaseOrder == input.SupportsPurchaseOrder ||
                    (this.SupportsPurchaseOrder != null &&
                    this.SupportsPurchaseOrder.Equals(input.SupportsPurchaseOrder))
                ) && 
                (
                    this.SupportsQuoteRequest == input.SupportsQuoteRequest ||
                    (this.SupportsQuoteRequest != null &&
                    this.SupportsQuoteRequest.Equals(input.SupportsQuoteRequest))
                ) && 
                (
                    this.SupportsWireTransfer == input.SupportsWireTransfer ||
                    (this.SupportsWireTransfer != null &&
                    this.SupportsWireTransfer.Equals(input.SupportsWireTransfer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amazon != null)
                    hashCode = hashCode * 59 + this.Amazon.GetHashCode();
                if (this.CreditCard != null)
                    hashCode = hashCode * 59 + this.CreditCard.GetHashCode();
                if (this.NeedPayment != null)
                    hashCode = hashCode * 59 + this.NeedPayment.GetHashCode();
                if (this.Paypal != null)
                    hashCode = hashCode * 59 + this.Paypal.GetHashCode();
                if (this.SupportsAmazon != null)
                    hashCode = hashCode * 59 + this.SupportsAmazon.GetHashCode();
                if (this.SupportsCheck != null)
                    hashCode = hashCode * 59 + this.SupportsCheck.GetHashCode();
                if (this.SupportsCod != null)
                    hashCode = hashCode * 59 + this.SupportsCod.GetHashCode();
                if (this.SupportsCreditCard != null)
                    hashCode = hashCode * 59 + this.SupportsCreditCard.GetHashCode();
                if (this.SupportsMoneyOrder != null)
                    hashCode = hashCode * 59 + this.SupportsMoneyOrder.GetHashCode();
                if (this.SupportsPaypal != null)
                    hashCode = hashCode * 59 + this.SupportsPaypal.GetHashCode();
                if (this.SupportsPurchaseOrder != null)
                    hashCode = hashCode * 59 + this.SupportsPurchaseOrder.GetHashCode();
                if (this.SupportsQuoteRequest != null)
                    hashCode = hashCode * 59 + this.SupportsQuoteRequest.GetHashCode();
                if (this.SupportsWireTransfer != null)
                    hashCode = hashCode * 59 + this.SupportsWireTransfer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
