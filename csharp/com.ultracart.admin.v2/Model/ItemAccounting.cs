/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemAccounting
    /// </summary>
    [DataContract]
    public partial class ItemAccounting :  IEquatable<ItemAccounting>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemAccounting" /> class.
        /// </summary>
        /// <param name="AccountingCode">QuickBooks item name if different than the item id.</param>
        /// <param name="QbClass">QuickBooks class if you are classifying items on your invoices/receipts.</param>
        public ItemAccounting(string AccountingCode = default(string), string QbClass = default(string))
        {
            this.AccountingCode = AccountingCode;
            this.QbClass = QbClass;
        }
        
        /// <summary>
        /// QuickBooks item name if different than the item id
        /// </summary>
        /// <value>QuickBooks item name if different than the item id</value>
        [DataMember(Name="accounting_code", EmitDefaultValue=false)]
        public string AccountingCode { get; set; }

        /// <summary>
        /// QuickBooks class if you are classifying items on your invoices/receipts
        /// </summary>
        /// <value>QuickBooks class if you are classifying items on your invoices/receipts</value>
        [DataMember(Name="qb_class", EmitDefaultValue=false)]
        public string QbClass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemAccounting {\n");
            sb.Append("  AccountingCode: ").Append(AccountingCode).Append("\n");
            sb.Append("  QbClass: ").Append(QbClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemAccounting);
        }

        /// <summary>
        /// Returns true if ItemAccounting instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemAccounting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemAccounting input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountingCode == input.AccountingCode ||
                    (this.AccountingCode != null &&
                    this.AccountingCode.Equals(input.AccountingCode))
                ) && 
                (
                    this.QbClass == input.QbClass ||
                    (this.QbClass != null &&
                    this.QbClass.Equals(input.QbClass))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountingCode != null)
                    hashCode = hashCode * 59 + this.AccountingCode.GetHashCode();
                if (this.QbClass != null)
                    hashCode = hashCode * 59 + this.QbClass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountingCode (string) maxLength
            if(this.AccountingCode != null && this.AccountingCode.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountingCode, length must be less than 50.", new [] { "AccountingCode" });
            }

            // QbClass (string) maxLength
            if(this.QbClass != null && this.QbClass.Length > 31)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QbClass, length must be less than 31.", new [] { "QbClass" });
            }

            yield break;
        }
    }

}
