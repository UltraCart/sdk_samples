/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderFraudScore
    /// </summary>
    [DataContract]
    public partial class OrderFraudScore :  IEquatable<OrderFraudScore>, IValidatableObject
    {
        /// <summary>
        /// Whether the BIN (first six digits) matched the country
        /// </summary>
        /// <value>Whether the BIN (first six digits) matched the country</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BinMatchEnum
        {
            
            /// <summary>
            /// Enum NA for "NA"
            /// </summary>
            [EnumMember(Value = "NA")]
            NA,
            
            /// <summary>
            /// Enum No for "No"
            /// </summary>
            [EnumMember(Value = "No")]
            No,
            
            /// <summary>
            /// Enum NotFound for "NotFound"
            /// </summary>
            [EnumMember(Value = "NotFound")]
            NotFound,
            
            /// <summary>
            /// Enum Yes for "Yes"
            /// </summary>
            [EnumMember(Value = "Yes")]
            Yes
        }

        /// <summary>
        /// Whether the BIN (first six digits) matched the country
        /// </summary>
        /// <value>Whether the BIN (first six digits) matched the country</value>
        [DataMember(Name="bin_match", EmitDefaultValue=false)]
        public BinMatchEnum? BinMatch { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderFraudScore" /> class.
        /// </summary>
        /// <param name="AnonymousProxy">True if the IP address is a known anonymous proxy server.</param>
        /// <param name="BinMatch">Whether the BIN (first six digits) matched the country.</param>
        /// <param name="CarderEmail">True if the email address belongs to a known credit card fraudster.</param>
        /// <param name="CountryCode">Country code.</param>
        /// <param name="CountryMatch">Country code matches BIN country.</param>
        /// <param name="CustomerPhoneInBillingLocation">Whether the customer&#39;s phone number is located in the area of the billing address.</param>
        /// <param name="DistanceKm">Distance in kilometers between the IP address and the BIN.</param>
        /// <param name="FreeEmail">True if the email address is for a free service like gmail.com.</param>
        /// <param name="HighRiskCountry">True if the customer is in a high risk country known for internet fraud.</param>
        /// <param name="IpCity">City associated with the IP address.</param>
        /// <param name="IpIsp">ISP that owns the IP address.</param>
        /// <param name="IpLatitude">Approximate latitude associated with the IP address.</param>
        /// <param name="IpLongitude">Approximate longitude associated with the IP address.</param>
        /// <param name="IpOrg">Organization that owns the IP address.</param>
        /// <param name="IpRegion">State/region associated with the IP address.</param>
        /// <param name="ProxyScore">Likelihood of the IP address being a proxy server.</param>
        /// <param name="Score">Overall score.  This is the score that is compared to see if the order is rejected or held for review by the fraud filter rules..</param>
        /// <param name="ShipForwarder">True if the address is a known ship forwarding company.</param>
        /// <param name="SpamScore">Likelihood of the email address being associated with a spammer.</param>
        /// <param name="TransparentProxy">True if the IP address that placed the order is a transparent proxy server.</param>
        public OrderFraudScore(bool? AnonymousProxy = default(bool?), BinMatchEnum? BinMatch = default(BinMatchEnum?), bool? CarderEmail = default(bool?), string CountryCode = default(string), bool? CountryMatch = default(bool?), string CustomerPhoneInBillingLocation = default(string), int? DistanceKm = default(int?), bool? FreeEmail = default(bool?), bool? HighRiskCountry = default(bool?), string IpCity = default(string), string IpIsp = default(string), string IpLatitude = default(string), string IpLongitude = default(string), string IpOrg = default(string), string IpRegion = default(string), decimal? ProxyScore = default(decimal?), decimal? Score = default(decimal?), bool? ShipForwarder = default(bool?), decimal? SpamScore = default(decimal?), bool? TransparentProxy = default(bool?))
        {
            this.AnonymousProxy = AnonymousProxy;
            this.BinMatch = BinMatch;
            this.CarderEmail = CarderEmail;
            this.CountryCode = CountryCode;
            this.CountryMatch = CountryMatch;
            this.CustomerPhoneInBillingLocation = CustomerPhoneInBillingLocation;
            this.DistanceKm = DistanceKm;
            this.FreeEmail = FreeEmail;
            this.HighRiskCountry = HighRiskCountry;
            this.IpCity = IpCity;
            this.IpIsp = IpIsp;
            this.IpLatitude = IpLatitude;
            this.IpLongitude = IpLongitude;
            this.IpOrg = IpOrg;
            this.IpRegion = IpRegion;
            this.ProxyScore = ProxyScore;
            this.Score = Score;
            this.ShipForwarder = ShipForwarder;
            this.SpamScore = SpamScore;
            this.TransparentProxy = TransparentProxy;
        }
        
        /// <summary>
        /// True if the IP address is a known anonymous proxy server
        /// </summary>
        /// <value>True if the IP address is a known anonymous proxy server</value>
        [DataMember(Name="anonymous_proxy", EmitDefaultValue=false)]
        public bool? AnonymousProxy { get; set; }


        /// <summary>
        /// True if the email address belongs to a known credit card fraudster
        /// </summary>
        /// <value>True if the email address belongs to a known credit card fraudster</value>
        [DataMember(Name="carder_email", EmitDefaultValue=false)]
        public bool? CarderEmail { get; set; }

        /// <summary>
        /// Country code
        /// </summary>
        /// <value>Country code</value>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Country code matches BIN country
        /// </summary>
        /// <value>Country code matches BIN country</value>
        [DataMember(Name="country_match", EmitDefaultValue=false)]
        public bool? CountryMatch { get; set; }

        /// <summary>
        /// Whether the customer&#39;s phone number is located in the area of the billing address
        /// </summary>
        /// <value>Whether the customer&#39;s phone number is located in the area of the billing address</value>
        [DataMember(Name="customer_phone_in_billing_location", EmitDefaultValue=false)]
        public string CustomerPhoneInBillingLocation { get; set; }

        /// <summary>
        /// Distance in kilometers between the IP address and the BIN
        /// </summary>
        /// <value>Distance in kilometers between the IP address and the BIN</value>
        [DataMember(Name="distance_km", EmitDefaultValue=false)]
        public int? DistanceKm { get; set; }

        /// <summary>
        /// True if the email address is for a free service like gmail.com
        /// </summary>
        /// <value>True if the email address is for a free service like gmail.com</value>
        [DataMember(Name="free_email", EmitDefaultValue=false)]
        public bool? FreeEmail { get; set; }

        /// <summary>
        /// True if the customer is in a high risk country known for internet fraud
        /// </summary>
        /// <value>True if the customer is in a high risk country known for internet fraud</value>
        [DataMember(Name="high_risk_country", EmitDefaultValue=false)]
        public bool? HighRiskCountry { get; set; }

        /// <summary>
        /// City associated with the IP address
        /// </summary>
        /// <value>City associated with the IP address</value>
        [DataMember(Name="ip_city", EmitDefaultValue=false)]
        public string IpCity { get; set; }

        /// <summary>
        /// ISP that owns the IP address
        /// </summary>
        /// <value>ISP that owns the IP address</value>
        [DataMember(Name="ip_isp", EmitDefaultValue=false)]
        public string IpIsp { get; set; }

        /// <summary>
        /// Approximate latitude associated with the IP address
        /// </summary>
        /// <value>Approximate latitude associated with the IP address</value>
        [DataMember(Name="ip_latitude", EmitDefaultValue=false)]
        public string IpLatitude { get; set; }

        /// <summary>
        /// Approximate longitude associated with the IP address
        /// </summary>
        /// <value>Approximate longitude associated with the IP address</value>
        [DataMember(Name="ip_longitude", EmitDefaultValue=false)]
        public string IpLongitude { get; set; }

        /// <summary>
        /// Organization that owns the IP address
        /// </summary>
        /// <value>Organization that owns the IP address</value>
        [DataMember(Name="ip_org", EmitDefaultValue=false)]
        public string IpOrg { get; set; }

        /// <summary>
        /// State/region associated with the IP address
        /// </summary>
        /// <value>State/region associated with the IP address</value>
        [DataMember(Name="ip_region", EmitDefaultValue=false)]
        public string IpRegion { get; set; }

        /// <summary>
        /// Likelihood of the IP address being a proxy server
        /// </summary>
        /// <value>Likelihood of the IP address being a proxy server</value>
        [DataMember(Name="proxy_score", EmitDefaultValue=false)]
        public decimal? ProxyScore { get; set; }

        /// <summary>
        /// Overall score.  This is the score that is compared to see if the order is rejected or held for review by the fraud filter rules.
        /// </summary>
        /// <value>Overall score.  This is the score that is compared to see if the order is rejected or held for review by the fraud filter rules.</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public decimal? Score { get; set; }

        /// <summary>
        /// True if the address is a known ship forwarding company
        /// </summary>
        /// <value>True if the address is a known ship forwarding company</value>
        [DataMember(Name="ship_forwarder", EmitDefaultValue=false)]
        public bool? ShipForwarder { get; set; }

        /// <summary>
        /// Likelihood of the email address being associated with a spammer
        /// </summary>
        /// <value>Likelihood of the email address being associated with a spammer</value>
        [DataMember(Name="spam_score", EmitDefaultValue=false)]
        public decimal? SpamScore { get; set; }

        /// <summary>
        /// True if the IP address that placed the order is a transparent proxy server
        /// </summary>
        /// <value>True if the IP address that placed the order is a transparent proxy server</value>
        [DataMember(Name="transparent_proxy", EmitDefaultValue=false)]
        public bool? TransparentProxy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderFraudScore {\n");
            sb.Append("  AnonymousProxy: ").Append(AnonymousProxy).Append("\n");
            sb.Append("  BinMatch: ").Append(BinMatch).Append("\n");
            sb.Append("  CarderEmail: ").Append(CarderEmail).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CountryMatch: ").Append(CountryMatch).Append("\n");
            sb.Append("  CustomerPhoneInBillingLocation: ").Append(CustomerPhoneInBillingLocation).Append("\n");
            sb.Append("  DistanceKm: ").Append(DistanceKm).Append("\n");
            sb.Append("  FreeEmail: ").Append(FreeEmail).Append("\n");
            sb.Append("  HighRiskCountry: ").Append(HighRiskCountry).Append("\n");
            sb.Append("  IpCity: ").Append(IpCity).Append("\n");
            sb.Append("  IpIsp: ").Append(IpIsp).Append("\n");
            sb.Append("  IpLatitude: ").Append(IpLatitude).Append("\n");
            sb.Append("  IpLongitude: ").Append(IpLongitude).Append("\n");
            sb.Append("  IpOrg: ").Append(IpOrg).Append("\n");
            sb.Append("  IpRegion: ").Append(IpRegion).Append("\n");
            sb.Append("  ProxyScore: ").Append(ProxyScore).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  ShipForwarder: ").Append(ShipForwarder).Append("\n");
            sb.Append("  SpamScore: ").Append(SpamScore).Append("\n");
            sb.Append("  TransparentProxy: ").Append(TransparentProxy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderFraudScore);
        }

        /// <summary>
        /// Returns true if OrderFraudScore instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderFraudScore to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderFraudScore input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AnonymousProxy == input.AnonymousProxy ||
                    (this.AnonymousProxy != null &&
                    this.AnonymousProxy.Equals(input.AnonymousProxy))
                ) && 
                (
                    this.BinMatch == input.BinMatch ||
                    (this.BinMatch != null &&
                    this.BinMatch.Equals(input.BinMatch))
                ) && 
                (
                    this.CarderEmail == input.CarderEmail ||
                    (this.CarderEmail != null &&
                    this.CarderEmail.Equals(input.CarderEmail))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.CountryMatch == input.CountryMatch ||
                    (this.CountryMatch != null &&
                    this.CountryMatch.Equals(input.CountryMatch))
                ) && 
                (
                    this.CustomerPhoneInBillingLocation == input.CustomerPhoneInBillingLocation ||
                    (this.CustomerPhoneInBillingLocation != null &&
                    this.CustomerPhoneInBillingLocation.Equals(input.CustomerPhoneInBillingLocation))
                ) && 
                (
                    this.DistanceKm == input.DistanceKm ||
                    (this.DistanceKm != null &&
                    this.DistanceKm.Equals(input.DistanceKm))
                ) && 
                (
                    this.FreeEmail == input.FreeEmail ||
                    (this.FreeEmail != null &&
                    this.FreeEmail.Equals(input.FreeEmail))
                ) && 
                (
                    this.HighRiskCountry == input.HighRiskCountry ||
                    (this.HighRiskCountry != null &&
                    this.HighRiskCountry.Equals(input.HighRiskCountry))
                ) && 
                (
                    this.IpCity == input.IpCity ||
                    (this.IpCity != null &&
                    this.IpCity.Equals(input.IpCity))
                ) && 
                (
                    this.IpIsp == input.IpIsp ||
                    (this.IpIsp != null &&
                    this.IpIsp.Equals(input.IpIsp))
                ) && 
                (
                    this.IpLatitude == input.IpLatitude ||
                    (this.IpLatitude != null &&
                    this.IpLatitude.Equals(input.IpLatitude))
                ) && 
                (
                    this.IpLongitude == input.IpLongitude ||
                    (this.IpLongitude != null &&
                    this.IpLongitude.Equals(input.IpLongitude))
                ) && 
                (
                    this.IpOrg == input.IpOrg ||
                    (this.IpOrg != null &&
                    this.IpOrg.Equals(input.IpOrg))
                ) && 
                (
                    this.IpRegion == input.IpRegion ||
                    (this.IpRegion != null &&
                    this.IpRegion.Equals(input.IpRegion))
                ) && 
                (
                    this.ProxyScore == input.ProxyScore ||
                    (this.ProxyScore != null &&
                    this.ProxyScore.Equals(input.ProxyScore))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.ShipForwarder == input.ShipForwarder ||
                    (this.ShipForwarder != null &&
                    this.ShipForwarder.Equals(input.ShipForwarder))
                ) && 
                (
                    this.SpamScore == input.SpamScore ||
                    (this.SpamScore != null &&
                    this.SpamScore.Equals(input.SpamScore))
                ) && 
                (
                    this.TransparentProxy == input.TransparentProxy ||
                    (this.TransparentProxy != null &&
                    this.TransparentProxy.Equals(input.TransparentProxy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AnonymousProxy != null)
                    hashCode = hashCode * 59 + this.AnonymousProxy.GetHashCode();
                if (this.BinMatch != null)
                    hashCode = hashCode * 59 + this.BinMatch.GetHashCode();
                if (this.CarderEmail != null)
                    hashCode = hashCode * 59 + this.CarderEmail.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.CountryMatch != null)
                    hashCode = hashCode * 59 + this.CountryMatch.GetHashCode();
                if (this.CustomerPhoneInBillingLocation != null)
                    hashCode = hashCode * 59 + this.CustomerPhoneInBillingLocation.GetHashCode();
                if (this.DistanceKm != null)
                    hashCode = hashCode * 59 + this.DistanceKm.GetHashCode();
                if (this.FreeEmail != null)
                    hashCode = hashCode * 59 + this.FreeEmail.GetHashCode();
                if (this.HighRiskCountry != null)
                    hashCode = hashCode * 59 + this.HighRiskCountry.GetHashCode();
                if (this.IpCity != null)
                    hashCode = hashCode * 59 + this.IpCity.GetHashCode();
                if (this.IpIsp != null)
                    hashCode = hashCode * 59 + this.IpIsp.GetHashCode();
                if (this.IpLatitude != null)
                    hashCode = hashCode * 59 + this.IpLatitude.GetHashCode();
                if (this.IpLongitude != null)
                    hashCode = hashCode * 59 + this.IpLongitude.GetHashCode();
                if (this.IpOrg != null)
                    hashCode = hashCode * 59 + this.IpOrg.GetHashCode();
                if (this.IpRegion != null)
                    hashCode = hashCode * 59 + this.IpRegion.GetHashCode();
                if (this.ProxyScore != null)
                    hashCode = hashCode * 59 + this.ProxyScore.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.ShipForwarder != null)
                    hashCode = hashCode * 59 + this.ShipForwarder.GetHashCode();
                if (this.SpamScore != null)
                    hashCode = hashCode * 59 + this.SpamScore.GetHashCode();
                if (this.TransparentProxy != null)
                    hashCode = hashCode * 59 + this.TransparentProxy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
