/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemContentMultimediaThumbnail
    /// </summary>
    [DataContract]
    public partial class ItemContentMultimediaThumbnail :  IEquatable<ItemContentMultimediaThumbnail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemContentMultimediaThumbnail" /> class.
        /// </summary>
        /// <param name="Height">Height of the thumbnail.</param>
        /// <param name="HttpUrl">HTTP URL to view the thumbnail.</param>
        /// <param name="HttpsUrl">HTTPS URL to view the thumbnail.</param>
        /// <param name="PngFormat">True if PNG, false if JPEG.</param>
        /// <param name="Square">True if the thumbnail is square.</param>
        /// <param name="Width">Width of the thumbnail.</param>
        public ItemContentMultimediaThumbnail(int? Height = default(int?), string HttpUrl = default(string), string HttpsUrl = default(string), bool? PngFormat = default(bool?), bool? Square = default(bool?), int? Width = default(int?))
        {
            this.Height = Height;
            this.HttpUrl = HttpUrl;
            this.HttpsUrl = HttpsUrl;
            this.PngFormat = PngFormat;
            this.Square = Square;
            this.Width = Width;
        }
        
        /// <summary>
        /// Height of the thumbnail
        /// </summary>
        /// <value>Height of the thumbnail</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// HTTP URL to view the thumbnail
        /// </summary>
        /// <value>HTTP URL to view the thumbnail</value>
        [DataMember(Name="http_url", EmitDefaultValue=false)]
        public string HttpUrl { get; set; }

        /// <summary>
        /// HTTPS URL to view the thumbnail
        /// </summary>
        /// <value>HTTPS URL to view the thumbnail</value>
        [DataMember(Name="https_url", EmitDefaultValue=false)]
        public string HttpsUrl { get; set; }

        /// <summary>
        /// True if PNG, false if JPEG
        /// </summary>
        /// <value>True if PNG, false if JPEG</value>
        [DataMember(Name="png_format", EmitDefaultValue=false)]
        public bool? PngFormat { get; set; }

        /// <summary>
        /// True if the thumbnail is square
        /// </summary>
        /// <value>True if the thumbnail is square</value>
        [DataMember(Name="square", EmitDefaultValue=false)]
        public bool? Square { get; set; }

        /// <summary>
        /// Width of the thumbnail
        /// </summary>
        /// <value>Width of the thumbnail</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemContentMultimediaThumbnail {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  HttpUrl: ").Append(HttpUrl).Append("\n");
            sb.Append("  HttpsUrl: ").Append(HttpsUrl).Append("\n");
            sb.Append("  PngFormat: ").Append(PngFormat).Append("\n");
            sb.Append("  Square: ").Append(Square).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemContentMultimediaThumbnail);
        }

        /// <summary>
        /// Returns true if ItemContentMultimediaThumbnail instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemContentMultimediaThumbnail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemContentMultimediaThumbnail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.HttpUrl == input.HttpUrl ||
                    (this.HttpUrl != null &&
                    this.HttpUrl.Equals(input.HttpUrl))
                ) && 
                (
                    this.HttpsUrl == input.HttpsUrl ||
                    (this.HttpsUrl != null &&
                    this.HttpsUrl.Equals(input.HttpsUrl))
                ) && 
                (
                    this.PngFormat == input.PngFormat ||
                    (this.PngFormat != null &&
                    this.PngFormat.Equals(input.PngFormat))
                ) && 
                (
                    this.Square == input.Square ||
                    (this.Square != null &&
                    this.Square.Equals(input.Square))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.HttpUrl != null)
                    hashCode = hashCode * 59 + this.HttpUrl.GetHashCode();
                if (this.HttpsUrl != null)
                    hashCode = hashCode * 59 + this.HttpsUrl.GetHashCode();
                if (this.PngFormat != null)
                    hashCode = hashCode * 59 + this.PngFormat.GetHashCode();
                if (this.Square != null)
                    hashCode = hashCode * 59 + this.Square.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
