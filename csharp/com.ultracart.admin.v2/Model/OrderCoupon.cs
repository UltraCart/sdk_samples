/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// OrderCoupon
    /// </summary>
    [DataContract]
    public partial class OrderCoupon :  IEquatable<OrderCoupon>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCoupon" /> class.
        /// </summary>
        /// <param name="AccountingCode">QuickBooks accounting code for this coupon.</param>
        /// <param name="BaseCouponCode">Coupon code configured by the merchant.  Will differ if the customer used a one time coupon code generated off this base coupon.</param>
        /// <param name="CouponCode">Coupon code entered by the customer.</param>
        public OrderCoupon(string AccountingCode = default(string), string BaseCouponCode = default(string), string CouponCode = default(string))
        {
            this.AccountingCode = AccountingCode;
            this.BaseCouponCode = BaseCouponCode;
            this.CouponCode = CouponCode;
        }
        
        /// <summary>
        /// QuickBooks accounting code for this coupon
        /// </summary>
        /// <value>QuickBooks accounting code for this coupon</value>
        [DataMember(Name="accounting_code", EmitDefaultValue=false)]
        public string AccountingCode { get; set; }

        /// <summary>
        /// Coupon code configured by the merchant.  Will differ if the customer used a one time coupon code generated off this base coupon
        /// </summary>
        /// <value>Coupon code configured by the merchant.  Will differ if the customer used a one time coupon code generated off this base coupon</value>
        [DataMember(Name="base_coupon_code", EmitDefaultValue=false)]
        public string BaseCouponCode { get; set; }

        /// <summary>
        /// Coupon code entered by the customer
        /// </summary>
        /// <value>Coupon code entered by the customer</value>
        [DataMember(Name="coupon_code", EmitDefaultValue=false)]
        public string CouponCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderCoupon {\n");
            sb.Append("  AccountingCode: ").Append(AccountingCode).Append("\n");
            sb.Append("  BaseCouponCode: ").Append(BaseCouponCode).Append("\n");
            sb.Append("  CouponCode: ").Append(CouponCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderCoupon);
        }

        /// <summary>
        /// Returns true if OrderCoupon instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderCoupon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderCoupon input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountingCode == input.AccountingCode ||
                    (this.AccountingCode != null &&
                    this.AccountingCode.Equals(input.AccountingCode))
                ) && 
                (
                    this.BaseCouponCode == input.BaseCouponCode ||
                    (this.BaseCouponCode != null &&
                    this.BaseCouponCode.Equals(input.BaseCouponCode))
                ) && 
                (
                    this.CouponCode == input.CouponCode ||
                    (this.CouponCode != null &&
                    this.CouponCode.Equals(input.CouponCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountingCode != null)
                    hashCode = hashCode * 59 + this.AccountingCode.GetHashCode();
                if (this.BaseCouponCode != null)
                    hashCode = hashCode * 59 + this.BaseCouponCode.GetHashCode();
                if (this.CouponCode != null)
                    hashCode = hashCode * 59 + this.CouponCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BaseCouponCode (string) maxLength
            if(this.BaseCouponCode != null && this.BaseCouponCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BaseCouponCode, length must be less than 20.", new [] { "BaseCouponCode" });
            }

            // CouponCode (string) maxLength
            if(this.CouponCode != null && this.CouponCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CouponCode, length must be less than 20.", new [] { "CouponCode" });
            }

            yield break;
        }
    }

}
