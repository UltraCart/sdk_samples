/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemContentMultimedia
    /// </summary>
    [DataContract]
    public partial class ItemContentMultimedia :  IEquatable<ItemContentMultimedia>, IValidatableObject
    {
        /// <summary>
        /// Type of file
        /// </summary>
        /// <value>Type of file</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Image for "Image"
            /// </summary>
            [EnumMember(Value = "Image")]
            Image,
            
            /// <summary>
            /// Enum PDF for "PDF"
            /// </summary>
            [EnumMember(Value = "PDF")]
            PDF,
            
            /// <summary>
            /// Enum Text for "Text"
            /// </summary>
            [EnumMember(Value = "Text")]
            Text,
            
            /// <summary>
            /// Enum Unknown for "Unknown"
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown,
            
            /// <summary>
            /// Enum Video for "Video"
            /// </summary>
            [EnumMember(Value = "Video")]
            Video
        }

        /// <summary>
        /// Type of file
        /// </summary>
        /// <value>Type of file</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemContentMultimedia" /> class.
        /// </summary>
        /// <param name="CloudUrl">URL where the image can be downloaded from the cloud.</param>
        /// <param name="CloudUrlExpiration">Expiration date of the cloud URL.</param>
        /// <param name="Code">Code assigned to the file.</param>
        /// <param name="Description">Description.</param>
        /// <param name="ExcludeFromGallery">True to exclude from multimedia gallery.</param>
        /// <param name="FileName">File name.</param>
        /// <param name="Height">Height of the image.</param>
        /// <param name="MerchantItemMultimediaOid">Item multimedia object identifier.</param>
        /// <param name="Orphan">True if the multimedia is an orphan of the active StoreFront themes.</param>
        /// <param name="Placeholder">True if the object is a place holder that can be populated.</param>
        /// <param name="TempMultimediaOid">Temporary multimedia object identifier assigned if uploading new multimedia.</param>
        /// <param name="Thumbnails">Thumbnails of this image.</param>
        /// <param name="Type">Type of file.</param>
        /// <param name="Url">URL to download file (on new multimedia record this can be a URL for UltraCart to fetch).</param>
        /// <param name="Width">Width of the image.</param>
        public ItemContentMultimedia(string CloudUrl = default(string), string CloudUrlExpiration = default(string), string Code = default(string), string Description = default(string), bool? ExcludeFromGallery = default(bool?), string FileName = default(string), int? Height = default(int?), int? MerchantItemMultimediaOid = default(int?), bool? Orphan = default(bool?), bool? Placeholder = default(bool?), int? TempMultimediaOid = default(int?), List<ItemContentMultimediaThumbnail> Thumbnails = default(List<ItemContentMultimediaThumbnail>), TypeEnum? Type = default(TypeEnum?), string Url = default(string), int? Width = default(int?))
        {
            this.CloudUrl = CloudUrl;
            this.CloudUrlExpiration = CloudUrlExpiration;
            this.Code = Code;
            this.Description = Description;
            this.ExcludeFromGallery = ExcludeFromGallery;
            this.FileName = FileName;
            this.Height = Height;
            this.MerchantItemMultimediaOid = MerchantItemMultimediaOid;
            this.Orphan = Orphan;
            this.Placeholder = Placeholder;
            this.TempMultimediaOid = TempMultimediaOid;
            this.Thumbnails = Thumbnails;
            this.Type = Type;
            this.Url = Url;
            this.Width = Width;
        }
        
        /// <summary>
        /// URL where the image can be downloaded from the cloud
        /// </summary>
        /// <value>URL where the image can be downloaded from the cloud</value>
        [DataMember(Name="cloud_url", EmitDefaultValue=false)]
        public string CloudUrl { get; set; }

        /// <summary>
        /// Expiration date of the cloud URL
        /// </summary>
        /// <value>Expiration date of the cloud URL</value>
        [DataMember(Name="cloud_url_expiration", EmitDefaultValue=false)]
        public string CloudUrlExpiration { get; set; }

        /// <summary>
        /// Code assigned to the file
        /// </summary>
        /// <value>Code assigned to the file</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// True to exclude from multimedia gallery
        /// </summary>
        /// <value>True to exclude from multimedia gallery</value>
        [DataMember(Name="exclude_from_gallery", EmitDefaultValue=false)]
        public bool? ExcludeFromGallery { get; set; }

        /// <summary>
        /// File name
        /// </summary>
        /// <value>File name</value>
        [DataMember(Name="file_name", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Height of the image
        /// </summary>
        /// <value>Height of the image</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Item multimedia object identifier
        /// </summary>
        /// <value>Item multimedia object identifier</value>
        [DataMember(Name="merchant_item_multimedia_oid", EmitDefaultValue=false)]
        public int? MerchantItemMultimediaOid { get; set; }

        /// <summary>
        /// True if the multimedia is an orphan of the active StoreFront themes
        /// </summary>
        /// <value>True if the multimedia is an orphan of the active StoreFront themes</value>
        [DataMember(Name="orphan", EmitDefaultValue=false)]
        public bool? Orphan { get; set; }

        /// <summary>
        /// True if the object is a place holder that can be populated
        /// </summary>
        /// <value>True if the object is a place holder that can be populated</value>
        [DataMember(Name="placeholder", EmitDefaultValue=false)]
        public bool? Placeholder { get; set; }

        /// <summary>
        /// Temporary multimedia object identifier assigned if uploading new multimedia
        /// </summary>
        /// <value>Temporary multimedia object identifier assigned if uploading new multimedia</value>
        [DataMember(Name="temp_multimedia_oid", EmitDefaultValue=false)]
        public int? TempMultimediaOid { get; set; }

        /// <summary>
        /// Thumbnails of this image
        /// </summary>
        /// <value>Thumbnails of this image</value>
        [DataMember(Name="thumbnails", EmitDefaultValue=false)]
        public List<ItemContentMultimediaThumbnail> Thumbnails { get; set; }


        /// <summary>
        /// URL to download file (on new multimedia record this can be a URL for UltraCart to fetch)
        /// </summary>
        /// <value>URL to download file (on new multimedia record this can be a URL for UltraCart to fetch)</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Width of the image
        /// </summary>
        /// <value>Width of the image</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemContentMultimedia {\n");
            sb.Append("  CloudUrl: ").Append(CloudUrl).Append("\n");
            sb.Append("  CloudUrlExpiration: ").Append(CloudUrlExpiration).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExcludeFromGallery: ").Append(ExcludeFromGallery).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  MerchantItemMultimediaOid: ").Append(MerchantItemMultimediaOid).Append("\n");
            sb.Append("  Orphan: ").Append(Orphan).Append("\n");
            sb.Append("  Placeholder: ").Append(Placeholder).Append("\n");
            sb.Append("  TempMultimediaOid: ").Append(TempMultimediaOid).Append("\n");
            sb.Append("  Thumbnails: ").Append(Thumbnails).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemContentMultimedia);
        }

        /// <summary>
        /// Returns true if ItemContentMultimedia instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemContentMultimedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemContentMultimedia input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CloudUrl == input.CloudUrl ||
                    (this.CloudUrl != null &&
                    this.CloudUrl.Equals(input.CloudUrl))
                ) && 
                (
                    this.CloudUrlExpiration == input.CloudUrlExpiration ||
                    (this.CloudUrlExpiration != null &&
                    this.CloudUrlExpiration.Equals(input.CloudUrlExpiration))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExcludeFromGallery == input.ExcludeFromGallery ||
                    (this.ExcludeFromGallery != null &&
                    this.ExcludeFromGallery.Equals(input.ExcludeFromGallery))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.MerchantItemMultimediaOid == input.MerchantItemMultimediaOid ||
                    (this.MerchantItemMultimediaOid != null &&
                    this.MerchantItemMultimediaOid.Equals(input.MerchantItemMultimediaOid))
                ) && 
                (
                    this.Orphan == input.Orphan ||
                    (this.Orphan != null &&
                    this.Orphan.Equals(input.Orphan))
                ) && 
                (
                    this.Placeholder == input.Placeholder ||
                    (this.Placeholder != null &&
                    this.Placeholder.Equals(input.Placeholder))
                ) && 
                (
                    this.TempMultimediaOid == input.TempMultimediaOid ||
                    (this.TempMultimediaOid != null &&
                    this.TempMultimediaOid.Equals(input.TempMultimediaOid))
                ) && 
                (
                    this.Thumbnails == input.Thumbnails ||
                    this.Thumbnails != null &&
                    this.Thumbnails.SequenceEqual(input.Thumbnails)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CloudUrl != null)
                    hashCode = hashCode * 59 + this.CloudUrl.GetHashCode();
                if (this.CloudUrlExpiration != null)
                    hashCode = hashCode * 59 + this.CloudUrlExpiration.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExcludeFromGallery != null)
                    hashCode = hashCode * 59 + this.ExcludeFromGallery.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.MerchantItemMultimediaOid != null)
                    hashCode = hashCode * 59 + this.MerchantItemMultimediaOid.GetHashCode();
                if (this.Orphan != null)
                    hashCode = hashCode * 59 + this.Orphan.GetHashCode();
                if (this.Placeholder != null)
                    hashCode = hashCode * 59 + this.Placeholder.GetHashCode();
                if (this.TempMultimediaOid != null)
                    hashCode = hashCode * 59 + this.TempMultimediaOid.GetHashCode();
                if (this.Thumbnails != null)
                    hashCode = hashCode * 59 + this.Thumbnails.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if(this.Code != null && this.Code.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 20.", new [] { "Code" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 50000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 50000.", new [] { "Description" });
            }

            // FileName (string) maxLength
            if(this.FileName != null && this.FileName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileName, length must be less than 75.", new [] { "FileName" });
            }

            yield break;
        }
    }

}
