/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// DistributionCenter
    /// </summary>
    [DataContract]
    public partial class DistributionCenter :  IEquatable<DistributionCenter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DistributionCenter" /> class.
        /// </summary>
        /// <param name="Address1">Address line 1 of the distribution center.</param>
        /// <param name="Address2">Address line 2 of the distribution center.</param>
        /// <param name="City">City of the distribution center.</param>
        /// <param name="Code">Unique code for this distribution center.</param>
        /// <param name="CountryCode">Country code of the distribution center.</param>
        /// <param name="DefaultCenter">True if this is the default distribution center on the account.</param>
        /// <param name="DefaultHandlesAllItems">True if this distribution center handles all new items by default.</param>
        /// <param name="DistributionCenterOid">Distribution center object identifier.</param>
        /// <param name="Duns">DUNS number assigned to this distribution center (EDI).</param>
        /// <param name="EstimateFromDistributionCenterOid">Estimate shipments for this distribution center as if they came from the other distribution center.</param>
        /// <param name="FtpPassword">Password associated with the virtual FTP.</param>
        /// <param name="HoldBeforeShipmentMinutes">The number of minutes to hold a shipment.</param>
        /// <param name="HoldBeforeTransmission">True if the shipment should be held before transmission and require a manual release.</param>
        /// <param name="Latitude">Latitude where the distribution center is located.</param>
        /// <param name="Longitude">Longitude where the distribution center is located.</param>
        /// <param name="Name">Name of this distribution center.</param>
        /// <param name="NoCustomerDirectShipments">True if this distribution center does not handle customer direct shipments.</param>
        /// <param name="NoSplitShipment">True if this distribution center is not allowed to participate in a split shipment..</param>
        /// <param name="PostalCode">Postal code of the distribution center.</param>
        /// <param name="ProcessDays">The number of processing days required before an order ships.</param>
        /// <param name="ProcessInventoryStartTime">The time (EST) after which inventory updates will be processed.</param>
        /// <param name="ProcessInventoryStopTime">The time (EST) before which inventory updates will be processed.</param>
        /// <param name="RequireAsn">True if ASNs are required for this distribution center (EDI).</param>
        /// <param name="SendKitInsteadOfComponents">True if we should send the kit instead of the components.</param>
        /// <param name="ShipmentCutoffTimeFriday">The time (EST) after which shipments will not be processed on Friday.</param>
        /// <param name="ShipmentCutoffTimeMonday">The time (EST) after which shipments will not be processed on Monday.</param>
        /// <param name="ShipmentCutoffTimeSaturday">The time (EST) after which shipments will not be processed on Saturday.</param>
        /// <param name="ShipmentCutoffTimeSunday">The time (EST) after which shipments will not be processed on Sunday.</param>
        /// <param name="ShipmentCutoffTimeThursday">The time (EST) after which shipments will not be processed on Thursday.</param>
        /// <param name="ShipmentCutoffTimeTuesday">The time (EST) after which shipments will not be processed on Tuesday.</param>
        /// <param name="ShipmentCutoffTimeWednesday">The time (EST) after which shipments will not be processed on Wednesday.</param>
        /// <param name="State">State of the distribution center.</param>
        /// <param name="Transport">Transport mechanism for this distribution center.</param>
        public DistributionCenter(string Address1 = default(string), string Address2 = default(string), string City = default(string), string Code = default(string), string CountryCode = default(string), bool? DefaultCenter = default(bool?), bool? DefaultHandlesAllItems = default(bool?), int? DistributionCenterOid = default(int?), string Duns = default(string), int? EstimateFromDistributionCenterOid = default(int?), string FtpPassword = default(string), int? HoldBeforeShipmentMinutes = default(int?), bool? HoldBeforeTransmission = default(bool?), decimal? Latitude = default(decimal?), decimal? Longitude = default(decimal?), string Name = default(string), bool? NoCustomerDirectShipments = default(bool?), bool? NoSplitShipment = default(bool?), string PostalCode = default(string), int? ProcessDays = default(int?), string ProcessInventoryStartTime = default(string), string ProcessInventoryStopTime = default(string), bool? RequireAsn = default(bool?), bool? SendKitInsteadOfComponents = default(bool?), string ShipmentCutoffTimeFriday = default(string), string ShipmentCutoffTimeMonday = default(string), string ShipmentCutoffTimeSaturday = default(string), string ShipmentCutoffTimeSunday = default(string), string ShipmentCutoffTimeThursday = default(string), string ShipmentCutoffTimeTuesday = default(string), string ShipmentCutoffTimeWednesday = default(string), string State = default(string), string Transport = default(string))
        {
            this.Address1 = Address1;
            this.Address2 = Address2;
            this.City = City;
            this.Code = Code;
            this.CountryCode = CountryCode;
            this.DefaultCenter = DefaultCenter;
            this.DefaultHandlesAllItems = DefaultHandlesAllItems;
            this.DistributionCenterOid = DistributionCenterOid;
            this.Duns = Duns;
            this.EstimateFromDistributionCenterOid = EstimateFromDistributionCenterOid;
            this.FtpPassword = FtpPassword;
            this.HoldBeforeShipmentMinutes = HoldBeforeShipmentMinutes;
            this.HoldBeforeTransmission = HoldBeforeTransmission;
            this.Latitude = Latitude;
            this.Longitude = Longitude;
            this.Name = Name;
            this.NoCustomerDirectShipments = NoCustomerDirectShipments;
            this.NoSplitShipment = NoSplitShipment;
            this.PostalCode = PostalCode;
            this.ProcessDays = ProcessDays;
            this.ProcessInventoryStartTime = ProcessInventoryStartTime;
            this.ProcessInventoryStopTime = ProcessInventoryStopTime;
            this.RequireAsn = RequireAsn;
            this.SendKitInsteadOfComponents = SendKitInsteadOfComponents;
            this.ShipmentCutoffTimeFriday = ShipmentCutoffTimeFriday;
            this.ShipmentCutoffTimeMonday = ShipmentCutoffTimeMonday;
            this.ShipmentCutoffTimeSaturday = ShipmentCutoffTimeSaturday;
            this.ShipmentCutoffTimeSunday = ShipmentCutoffTimeSunday;
            this.ShipmentCutoffTimeThursday = ShipmentCutoffTimeThursday;
            this.ShipmentCutoffTimeTuesday = ShipmentCutoffTimeTuesday;
            this.ShipmentCutoffTimeWednesday = ShipmentCutoffTimeWednesday;
            this.State = State;
            this.Transport = Transport;
        }
        
        /// <summary>
        /// Address line 1 of the distribution center
        /// </summary>
        /// <value>Address line 1 of the distribution center</value>
        [DataMember(Name="address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Address line 2 of the distribution center
        /// </summary>
        /// <value>Address line 2 of the distribution center</value>
        [DataMember(Name="address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// City of the distribution center
        /// </summary>
        /// <value>City of the distribution center</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Unique code for this distribution center
        /// </summary>
        /// <value>Unique code for this distribution center</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Country code of the distribution center
        /// </summary>
        /// <value>Country code of the distribution center</value>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// True if this is the default distribution center on the account
        /// </summary>
        /// <value>True if this is the default distribution center on the account</value>
        [DataMember(Name="default_center", EmitDefaultValue=false)]
        public bool? DefaultCenter { get; set; }

        /// <summary>
        /// True if this distribution center handles all new items by default
        /// </summary>
        /// <value>True if this distribution center handles all new items by default</value>
        [DataMember(Name="default_handles_all_items", EmitDefaultValue=false)]
        public bool? DefaultHandlesAllItems { get; set; }

        /// <summary>
        /// Distribution center object identifier
        /// </summary>
        /// <value>Distribution center object identifier</value>
        [DataMember(Name="distribution_center_oid", EmitDefaultValue=false)]
        public int? DistributionCenterOid { get; set; }

        /// <summary>
        /// DUNS number assigned to this distribution center (EDI)
        /// </summary>
        /// <value>DUNS number assigned to this distribution center (EDI)</value>
        [DataMember(Name="duns", EmitDefaultValue=false)]
        public string Duns { get; set; }

        /// <summary>
        /// Estimate shipments for this distribution center as if they came from the other distribution center
        /// </summary>
        /// <value>Estimate shipments for this distribution center as if they came from the other distribution center</value>
        [DataMember(Name="estimate_from_distribution_center_oid", EmitDefaultValue=false)]
        public int? EstimateFromDistributionCenterOid { get; set; }

        /// <summary>
        /// Password associated with the virtual FTP
        /// </summary>
        /// <value>Password associated with the virtual FTP</value>
        [DataMember(Name="ftp_password", EmitDefaultValue=false)]
        public string FtpPassword { get; set; }

        /// <summary>
        /// The number of minutes to hold a shipment
        /// </summary>
        /// <value>The number of minutes to hold a shipment</value>
        [DataMember(Name="hold_before_shipment_minutes", EmitDefaultValue=false)]
        public int? HoldBeforeShipmentMinutes { get; set; }

        /// <summary>
        /// True if the shipment should be held before transmission and require a manual release
        /// </summary>
        /// <value>True if the shipment should be held before transmission and require a manual release</value>
        [DataMember(Name="hold_before_transmission", EmitDefaultValue=false)]
        public bool? HoldBeforeTransmission { get; set; }

        /// <summary>
        /// Latitude where the distribution center is located
        /// </summary>
        /// <value>Latitude where the distribution center is located</value>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public decimal? Latitude { get; set; }

        /// <summary>
        /// Longitude where the distribution center is located
        /// </summary>
        /// <value>Longitude where the distribution center is located</value>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public decimal? Longitude { get; set; }

        /// <summary>
        /// Name of this distribution center
        /// </summary>
        /// <value>Name of this distribution center</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// True if this distribution center does not handle customer direct shipments
        /// </summary>
        /// <value>True if this distribution center does not handle customer direct shipments</value>
        [DataMember(Name="no_customer_direct_shipments", EmitDefaultValue=false)]
        public bool? NoCustomerDirectShipments { get; set; }

        /// <summary>
        /// True if this distribution center is not allowed to participate in a split shipment.
        /// </summary>
        /// <value>True if this distribution center is not allowed to participate in a split shipment.</value>
        [DataMember(Name="no_split_shipment", EmitDefaultValue=false)]
        public bool? NoSplitShipment { get; set; }

        /// <summary>
        /// Postal code of the distribution center
        /// </summary>
        /// <value>Postal code of the distribution center</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The number of processing days required before an order ships
        /// </summary>
        /// <value>The number of processing days required before an order ships</value>
        [DataMember(Name="process_days", EmitDefaultValue=false)]
        public int? ProcessDays { get; set; }

        /// <summary>
        /// The time (EST) after which inventory updates will be processed
        /// </summary>
        /// <value>The time (EST) after which inventory updates will be processed</value>
        [DataMember(Name="process_inventory_start_time", EmitDefaultValue=false)]
        public string ProcessInventoryStartTime { get; set; }

        /// <summary>
        /// The time (EST) before which inventory updates will be processed
        /// </summary>
        /// <value>The time (EST) before which inventory updates will be processed</value>
        [DataMember(Name="process_inventory_stop_time", EmitDefaultValue=false)]
        public string ProcessInventoryStopTime { get; set; }

        /// <summary>
        /// True if ASNs are required for this distribution center (EDI)
        /// </summary>
        /// <value>True if ASNs are required for this distribution center (EDI)</value>
        [DataMember(Name="require_asn", EmitDefaultValue=false)]
        public bool? RequireAsn { get; set; }

        /// <summary>
        /// True if we should send the kit instead of the components
        /// </summary>
        /// <value>True if we should send the kit instead of the components</value>
        [DataMember(Name="send_kit_instead_of_components", EmitDefaultValue=false)]
        public bool? SendKitInsteadOfComponents { get; set; }

        /// <summary>
        /// The time (EST) after which shipments will not be processed on Friday
        /// </summary>
        /// <value>The time (EST) after which shipments will not be processed on Friday</value>
        [DataMember(Name="shipment_cutoff_time_friday", EmitDefaultValue=false)]
        public string ShipmentCutoffTimeFriday { get; set; }

        /// <summary>
        /// The time (EST) after which shipments will not be processed on Monday
        /// </summary>
        /// <value>The time (EST) after which shipments will not be processed on Monday</value>
        [DataMember(Name="shipment_cutoff_time_monday", EmitDefaultValue=false)]
        public string ShipmentCutoffTimeMonday { get; set; }

        /// <summary>
        /// The time (EST) after which shipments will not be processed on Saturday
        /// </summary>
        /// <value>The time (EST) after which shipments will not be processed on Saturday</value>
        [DataMember(Name="shipment_cutoff_time_saturday", EmitDefaultValue=false)]
        public string ShipmentCutoffTimeSaturday { get; set; }

        /// <summary>
        /// The time (EST) after which shipments will not be processed on Sunday
        /// </summary>
        /// <value>The time (EST) after which shipments will not be processed on Sunday</value>
        [DataMember(Name="shipment_cutoff_time_sunday", EmitDefaultValue=false)]
        public string ShipmentCutoffTimeSunday { get; set; }

        /// <summary>
        /// The time (EST) after which shipments will not be processed on Thursday
        /// </summary>
        /// <value>The time (EST) after which shipments will not be processed on Thursday</value>
        [DataMember(Name="shipment_cutoff_time_thursday", EmitDefaultValue=false)]
        public string ShipmentCutoffTimeThursday { get; set; }

        /// <summary>
        /// The time (EST) after which shipments will not be processed on Tuesday
        /// </summary>
        /// <value>The time (EST) after which shipments will not be processed on Tuesday</value>
        [DataMember(Name="shipment_cutoff_time_tuesday", EmitDefaultValue=false)]
        public string ShipmentCutoffTimeTuesday { get; set; }

        /// <summary>
        /// The time (EST) after which shipments will not be processed on Wednesday
        /// </summary>
        /// <value>The time (EST) after which shipments will not be processed on Wednesday</value>
        [DataMember(Name="shipment_cutoff_time_wednesday", EmitDefaultValue=false)]
        public string ShipmentCutoffTimeWednesday { get; set; }

        /// <summary>
        /// State of the distribution center
        /// </summary>
        /// <value>State of the distribution center</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Transport mechanism for this distribution center
        /// </summary>
        /// <value>Transport mechanism for this distribution center</value>
        [DataMember(Name="transport", EmitDefaultValue=false)]
        public string Transport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DistributionCenter {\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DefaultCenter: ").Append(DefaultCenter).Append("\n");
            sb.Append("  DefaultHandlesAllItems: ").Append(DefaultHandlesAllItems).Append("\n");
            sb.Append("  DistributionCenterOid: ").Append(DistributionCenterOid).Append("\n");
            sb.Append("  Duns: ").Append(Duns).Append("\n");
            sb.Append("  EstimateFromDistributionCenterOid: ").Append(EstimateFromDistributionCenterOid).Append("\n");
            sb.Append("  FtpPassword: ").Append(FtpPassword).Append("\n");
            sb.Append("  HoldBeforeShipmentMinutes: ").Append(HoldBeforeShipmentMinutes).Append("\n");
            sb.Append("  HoldBeforeTransmission: ").Append(HoldBeforeTransmission).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NoCustomerDirectShipments: ").Append(NoCustomerDirectShipments).Append("\n");
            sb.Append("  NoSplitShipment: ").Append(NoSplitShipment).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  ProcessDays: ").Append(ProcessDays).Append("\n");
            sb.Append("  ProcessInventoryStartTime: ").Append(ProcessInventoryStartTime).Append("\n");
            sb.Append("  ProcessInventoryStopTime: ").Append(ProcessInventoryStopTime).Append("\n");
            sb.Append("  RequireAsn: ").Append(RequireAsn).Append("\n");
            sb.Append("  SendKitInsteadOfComponents: ").Append(SendKitInsteadOfComponents).Append("\n");
            sb.Append("  ShipmentCutoffTimeFriday: ").Append(ShipmentCutoffTimeFriday).Append("\n");
            sb.Append("  ShipmentCutoffTimeMonday: ").Append(ShipmentCutoffTimeMonday).Append("\n");
            sb.Append("  ShipmentCutoffTimeSaturday: ").Append(ShipmentCutoffTimeSaturday).Append("\n");
            sb.Append("  ShipmentCutoffTimeSunday: ").Append(ShipmentCutoffTimeSunday).Append("\n");
            sb.Append("  ShipmentCutoffTimeThursday: ").Append(ShipmentCutoffTimeThursday).Append("\n");
            sb.Append("  ShipmentCutoffTimeTuesday: ").Append(ShipmentCutoffTimeTuesday).Append("\n");
            sb.Append("  ShipmentCutoffTimeWednesday: ").Append(ShipmentCutoffTimeWednesday).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Transport: ").Append(Transport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DistributionCenter);
        }

        /// <summary>
        /// Returns true if DistributionCenter instances are equal
        /// </summary>
        /// <param name="input">Instance of DistributionCenter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DistributionCenter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.DefaultCenter == input.DefaultCenter ||
                    (this.DefaultCenter != null &&
                    this.DefaultCenter.Equals(input.DefaultCenter))
                ) && 
                (
                    this.DefaultHandlesAllItems == input.DefaultHandlesAllItems ||
                    (this.DefaultHandlesAllItems != null &&
                    this.DefaultHandlesAllItems.Equals(input.DefaultHandlesAllItems))
                ) && 
                (
                    this.DistributionCenterOid == input.DistributionCenterOid ||
                    (this.DistributionCenterOid != null &&
                    this.DistributionCenterOid.Equals(input.DistributionCenterOid))
                ) && 
                (
                    this.Duns == input.Duns ||
                    (this.Duns != null &&
                    this.Duns.Equals(input.Duns))
                ) && 
                (
                    this.EstimateFromDistributionCenterOid == input.EstimateFromDistributionCenterOid ||
                    (this.EstimateFromDistributionCenterOid != null &&
                    this.EstimateFromDistributionCenterOid.Equals(input.EstimateFromDistributionCenterOid))
                ) && 
                (
                    this.FtpPassword == input.FtpPassword ||
                    (this.FtpPassword != null &&
                    this.FtpPassword.Equals(input.FtpPassword))
                ) && 
                (
                    this.HoldBeforeShipmentMinutes == input.HoldBeforeShipmentMinutes ||
                    (this.HoldBeforeShipmentMinutes != null &&
                    this.HoldBeforeShipmentMinutes.Equals(input.HoldBeforeShipmentMinutes))
                ) && 
                (
                    this.HoldBeforeTransmission == input.HoldBeforeTransmission ||
                    (this.HoldBeforeTransmission != null &&
                    this.HoldBeforeTransmission.Equals(input.HoldBeforeTransmission))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NoCustomerDirectShipments == input.NoCustomerDirectShipments ||
                    (this.NoCustomerDirectShipments != null &&
                    this.NoCustomerDirectShipments.Equals(input.NoCustomerDirectShipments))
                ) && 
                (
                    this.NoSplitShipment == input.NoSplitShipment ||
                    (this.NoSplitShipment != null &&
                    this.NoSplitShipment.Equals(input.NoSplitShipment))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.ProcessDays == input.ProcessDays ||
                    (this.ProcessDays != null &&
                    this.ProcessDays.Equals(input.ProcessDays))
                ) && 
                (
                    this.ProcessInventoryStartTime == input.ProcessInventoryStartTime ||
                    (this.ProcessInventoryStartTime != null &&
                    this.ProcessInventoryStartTime.Equals(input.ProcessInventoryStartTime))
                ) && 
                (
                    this.ProcessInventoryStopTime == input.ProcessInventoryStopTime ||
                    (this.ProcessInventoryStopTime != null &&
                    this.ProcessInventoryStopTime.Equals(input.ProcessInventoryStopTime))
                ) && 
                (
                    this.RequireAsn == input.RequireAsn ||
                    (this.RequireAsn != null &&
                    this.RequireAsn.Equals(input.RequireAsn))
                ) && 
                (
                    this.SendKitInsteadOfComponents == input.SendKitInsteadOfComponents ||
                    (this.SendKitInsteadOfComponents != null &&
                    this.SendKitInsteadOfComponents.Equals(input.SendKitInsteadOfComponents))
                ) && 
                (
                    this.ShipmentCutoffTimeFriday == input.ShipmentCutoffTimeFriday ||
                    (this.ShipmentCutoffTimeFriday != null &&
                    this.ShipmentCutoffTimeFriday.Equals(input.ShipmentCutoffTimeFriday))
                ) && 
                (
                    this.ShipmentCutoffTimeMonday == input.ShipmentCutoffTimeMonday ||
                    (this.ShipmentCutoffTimeMonday != null &&
                    this.ShipmentCutoffTimeMonday.Equals(input.ShipmentCutoffTimeMonday))
                ) && 
                (
                    this.ShipmentCutoffTimeSaturday == input.ShipmentCutoffTimeSaturday ||
                    (this.ShipmentCutoffTimeSaturday != null &&
                    this.ShipmentCutoffTimeSaturday.Equals(input.ShipmentCutoffTimeSaturday))
                ) && 
                (
                    this.ShipmentCutoffTimeSunday == input.ShipmentCutoffTimeSunday ||
                    (this.ShipmentCutoffTimeSunday != null &&
                    this.ShipmentCutoffTimeSunday.Equals(input.ShipmentCutoffTimeSunday))
                ) && 
                (
                    this.ShipmentCutoffTimeThursday == input.ShipmentCutoffTimeThursday ||
                    (this.ShipmentCutoffTimeThursday != null &&
                    this.ShipmentCutoffTimeThursday.Equals(input.ShipmentCutoffTimeThursday))
                ) && 
                (
                    this.ShipmentCutoffTimeTuesday == input.ShipmentCutoffTimeTuesday ||
                    (this.ShipmentCutoffTimeTuesday != null &&
                    this.ShipmentCutoffTimeTuesday.Equals(input.ShipmentCutoffTimeTuesday))
                ) && 
                (
                    this.ShipmentCutoffTimeWednesday == input.ShipmentCutoffTimeWednesday ||
                    (this.ShipmentCutoffTimeWednesday != null &&
                    this.ShipmentCutoffTimeWednesday.Equals(input.ShipmentCutoffTimeWednesday))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Transport == input.Transport ||
                    (this.Transport != null &&
                    this.Transport.Equals(input.Transport))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.DefaultCenter != null)
                    hashCode = hashCode * 59 + this.DefaultCenter.GetHashCode();
                if (this.DefaultHandlesAllItems != null)
                    hashCode = hashCode * 59 + this.DefaultHandlesAllItems.GetHashCode();
                if (this.DistributionCenterOid != null)
                    hashCode = hashCode * 59 + this.DistributionCenterOid.GetHashCode();
                if (this.Duns != null)
                    hashCode = hashCode * 59 + this.Duns.GetHashCode();
                if (this.EstimateFromDistributionCenterOid != null)
                    hashCode = hashCode * 59 + this.EstimateFromDistributionCenterOid.GetHashCode();
                if (this.FtpPassword != null)
                    hashCode = hashCode * 59 + this.FtpPassword.GetHashCode();
                if (this.HoldBeforeShipmentMinutes != null)
                    hashCode = hashCode * 59 + this.HoldBeforeShipmentMinutes.GetHashCode();
                if (this.HoldBeforeTransmission != null)
                    hashCode = hashCode * 59 + this.HoldBeforeTransmission.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NoCustomerDirectShipments != null)
                    hashCode = hashCode * 59 + this.NoCustomerDirectShipments.GetHashCode();
                if (this.NoSplitShipment != null)
                    hashCode = hashCode * 59 + this.NoSplitShipment.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.ProcessDays != null)
                    hashCode = hashCode * 59 + this.ProcessDays.GetHashCode();
                if (this.ProcessInventoryStartTime != null)
                    hashCode = hashCode * 59 + this.ProcessInventoryStartTime.GetHashCode();
                if (this.ProcessInventoryStopTime != null)
                    hashCode = hashCode * 59 + this.ProcessInventoryStopTime.GetHashCode();
                if (this.RequireAsn != null)
                    hashCode = hashCode * 59 + this.RequireAsn.GetHashCode();
                if (this.SendKitInsteadOfComponents != null)
                    hashCode = hashCode * 59 + this.SendKitInsteadOfComponents.GetHashCode();
                if (this.ShipmentCutoffTimeFriday != null)
                    hashCode = hashCode * 59 + this.ShipmentCutoffTimeFriday.GetHashCode();
                if (this.ShipmentCutoffTimeMonday != null)
                    hashCode = hashCode * 59 + this.ShipmentCutoffTimeMonday.GetHashCode();
                if (this.ShipmentCutoffTimeSaturday != null)
                    hashCode = hashCode * 59 + this.ShipmentCutoffTimeSaturday.GetHashCode();
                if (this.ShipmentCutoffTimeSunday != null)
                    hashCode = hashCode * 59 + this.ShipmentCutoffTimeSunday.GetHashCode();
                if (this.ShipmentCutoffTimeThursday != null)
                    hashCode = hashCode * 59 + this.ShipmentCutoffTimeThursday.GetHashCode();
                if (this.ShipmentCutoffTimeTuesday != null)
                    hashCode = hashCode * 59 + this.ShipmentCutoffTimeTuesday.GetHashCode();
                if (this.ShipmentCutoffTimeWednesday != null)
                    hashCode = hashCode * 59 + this.ShipmentCutoffTimeWednesday.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Transport != null)
                    hashCode = hashCode * 59 + this.Transport.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
