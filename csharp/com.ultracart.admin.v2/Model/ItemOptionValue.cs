/* 
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.ultracart.admin.v2.Client.SwaggerDateConverter;

namespace com.ultracart.admin.v2.Model
{
    /// <summary>
    /// ItemOptionValue
    /// </summary>
    [DataContract]
    public partial class ItemOptionValue :  IEquatable<ItemOptionValue>, IValidatableObject
    {
        /// <summary>
        /// Additional dimensions application
        /// </summary>
        /// <value>Additional dimensions application</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AdditionalDimensionApplicationEnum
        {
            
            /// <summary>
            /// Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")]
            None,
            
            /// <summary>
            /// Enum Setitemto for "set item to"
            /// </summary>
            [EnumMember(Value = "set item to")]
            Setitemto,
            
            /// <summary>
            /// Enum Additem for "add item"
            /// </summary>
            [EnumMember(Value = "add item")]
            Additem
        }

        /// <summary>
        /// Additional dimensions application
        /// </summary>
        /// <value>Additional dimensions application</value>
        [DataMember(Name="additional_dimension_application", EmitDefaultValue=false)]
        public AdditionalDimensionApplicationEnum? AdditionalDimensionApplication { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemOptionValue" /> class.
        /// </summary>
        /// <param name="AdditionalDimensionApplication">Additional dimensions application.</param>
        /// <param name="AdditionalItems">Additional items to add to the order if this value is selected.</param>
        /// <param name="CostChange">Cost change.</param>
        /// <param name="DefaultValue">True if default value.</param>
        /// <param name="DigitalItems">Digital items to allow the customer to download if this option value is selected.</param>
        /// <param name="Height">Height.</param>
        /// <param name="Length">Length.</param>
        /// <param name="MerchantItemMultimediaOid">Multimedia object identifier associated with this option value.</param>
        /// <param name="OptionValueOid">Option value object identifier.</param>
        /// <param name="PercentCostChange">Percentage cost change.</param>
        /// <param name="TranslatedTextInstanceOid">Translated text instance id.</param>
        /// <param name="Value">Value.</param>
        /// <param name="WeightChange">WeightChange.</param>
        /// <param name="WeightChangePercent">Percentage weight change.</param>
        /// <param name="Width">Width.</param>
        public ItemOptionValue(AdditionalDimensionApplicationEnum? AdditionalDimensionApplication = default(AdditionalDimensionApplicationEnum?), List<ItemOptionValueAdditionalItem> AdditionalItems = default(List<ItemOptionValueAdditionalItem>), decimal? CostChange = default(decimal?), bool? DefaultValue = default(bool?), List<ItemOptionValueDigitalItem> DigitalItems = default(List<ItemOptionValueDigitalItem>), Distance Height = default(Distance), Distance Length = default(Distance), int? MerchantItemMultimediaOid = default(int?), int? OptionValueOid = default(int?), decimal? PercentCostChange = default(decimal?), int? TranslatedTextInstanceOid = default(int?), string Value = default(string), Weight WeightChange = default(Weight), decimal? WeightChangePercent = default(decimal?), Distance Width = default(Distance))
        {
            this.AdditionalDimensionApplication = AdditionalDimensionApplication;
            this.AdditionalItems = AdditionalItems;
            this.CostChange = CostChange;
            this.DefaultValue = DefaultValue;
            this.DigitalItems = DigitalItems;
            this.Height = Height;
            this.Length = Length;
            this.MerchantItemMultimediaOid = MerchantItemMultimediaOid;
            this.OptionValueOid = OptionValueOid;
            this.PercentCostChange = PercentCostChange;
            this.TranslatedTextInstanceOid = TranslatedTextInstanceOid;
            this.Value = Value;
            this.WeightChange = WeightChange;
            this.WeightChangePercent = WeightChangePercent;
            this.Width = Width;
        }
        

        /// <summary>
        /// Additional items to add to the order if this value is selected
        /// </summary>
        /// <value>Additional items to add to the order if this value is selected</value>
        [DataMember(Name="additional_items", EmitDefaultValue=false)]
        public List<ItemOptionValueAdditionalItem> AdditionalItems { get; set; }

        /// <summary>
        /// Cost change
        /// </summary>
        /// <value>Cost change</value>
        [DataMember(Name="cost_change", EmitDefaultValue=false)]
        public decimal? CostChange { get; set; }

        /// <summary>
        /// True if default value
        /// </summary>
        /// <value>True if default value</value>
        [DataMember(Name="default_value", EmitDefaultValue=false)]
        public bool? DefaultValue { get; set; }

        /// <summary>
        /// Digital items to allow the customer to download if this option value is selected
        /// </summary>
        /// <value>Digital items to allow the customer to download if this option value is selected</value>
        [DataMember(Name="digital_items", EmitDefaultValue=false)]
        public List<ItemOptionValueDigitalItem> DigitalItems { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public Distance Height { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public Distance Length { get; set; }

        /// <summary>
        /// Multimedia object identifier associated with this option value
        /// </summary>
        /// <value>Multimedia object identifier associated with this option value</value>
        [DataMember(Name="merchant_item_multimedia_oid", EmitDefaultValue=false)]
        public int? MerchantItemMultimediaOid { get; set; }

        /// <summary>
        /// Option value object identifier
        /// </summary>
        /// <value>Option value object identifier</value>
        [DataMember(Name="option_value_oid", EmitDefaultValue=false)]
        public int? OptionValueOid { get; set; }

        /// <summary>
        /// Percentage cost change
        /// </summary>
        /// <value>Percentage cost change</value>
        [DataMember(Name="percent_cost_change", EmitDefaultValue=false)]
        public decimal? PercentCostChange { get; set; }

        /// <summary>
        /// Translated text instance id
        /// </summary>
        /// <value>Translated text instance id</value>
        [DataMember(Name="translated_text_instance_oid", EmitDefaultValue=false)]
        public int? TranslatedTextInstanceOid { get; set; }

        /// <summary>
        /// Value
        /// </summary>
        /// <value>Value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets WeightChange
        /// </summary>
        [DataMember(Name="weight_change", EmitDefaultValue=false)]
        public Weight WeightChange { get; set; }

        /// <summary>
        /// Percentage weight change
        /// </summary>
        /// <value>Percentage weight change</value>
        [DataMember(Name="weight_change_percent", EmitDefaultValue=false)]
        public decimal? WeightChangePercent { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public Distance Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemOptionValue {\n");
            sb.Append("  AdditionalDimensionApplication: ").Append(AdditionalDimensionApplication).Append("\n");
            sb.Append("  AdditionalItems: ").Append(AdditionalItems).Append("\n");
            sb.Append("  CostChange: ").Append(CostChange).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  DigitalItems: ").Append(DigitalItems).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  MerchantItemMultimediaOid: ").Append(MerchantItemMultimediaOid).Append("\n");
            sb.Append("  OptionValueOid: ").Append(OptionValueOid).Append("\n");
            sb.Append("  PercentCostChange: ").Append(PercentCostChange).Append("\n");
            sb.Append("  TranslatedTextInstanceOid: ").Append(TranslatedTextInstanceOid).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  WeightChange: ").Append(WeightChange).Append("\n");
            sb.Append("  WeightChangePercent: ").Append(WeightChangePercent).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemOptionValue);
        }

        /// <summary>
        /// Returns true if ItemOptionValue instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemOptionValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemOptionValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalDimensionApplication == input.AdditionalDimensionApplication ||
                    (this.AdditionalDimensionApplication != null &&
                    this.AdditionalDimensionApplication.Equals(input.AdditionalDimensionApplication))
                ) && 
                (
                    this.AdditionalItems == input.AdditionalItems ||
                    this.AdditionalItems != null &&
                    this.AdditionalItems.SequenceEqual(input.AdditionalItems)
                ) && 
                (
                    this.CostChange == input.CostChange ||
                    (this.CostChange != null &&
                    this.CostChange.Equals(input.CostChange))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.DigitalItems == input.DigitalItems ||
                    this.DigitalItems != null &&
                    this.DigitalItems.SequenceEqual(input.DigitalItems)
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.MerchantItemMultimediaOid == input.MerchantItemMultimediaOid ||
                    (this.MerchantItemMultimediaOid != null &&
                    this.MerchantItemMultimediaOid.Equals(input.MerchantItemMultimediaOid))
                ) && 
                (
                    this.OptionValueOid == input.OptionValueOid ||
                    (this.OptionValueOid != null &&
                    this.OptionValueOid.Equals(input.OptionValueOid))
                ) && 
                (
                    this.PercentCostChange == input.PercentCostChange ||
                    (this.PercentCostChange != null &&
                    this.PercentCostChange.Equals(input.PercentCostChange))
                ) && 
                (
                    this.TranslatedTextInstanceOid == input.TranslatedTextInstanceOid ||
                    (this.TranslatedTextInstanceOid != null &&
                    this.TranslatedTextInstanceOid.Equals(input.TranslatedTextInstanceOid))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.WeightChange == input.WeightChange ||
                    (this.WeightChange != null &&
                    this.WeightChange.Equals(input.WeightChange))
                ) && 
                (
                    this.WeightChangePercent == input.WeightChangePercent ||
                    (this.WeightChangePercent != null &&
                    this.WeightChangePercent.Equals(input.WeightChangePercent))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalDimensionApplication != null)
                    hashCode = hashCode * 59 + this.AdditionalDimensionApplication.GetHashCode();
                if (this.AdditionalItems != null)
                    hashCode = hashCode * 59 + this.AdditionalItems.GetHashCode();
                if (this.CostChange != null)
                    hashCode = hashCode * 59 + this.CostChange.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.DigitalItems != null)
                    hashCode = hashCode * 59 + this.DigitalItems.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.MerchantItemMultimediaOid != null)
                    hashCode = hashCode * 59 + this.MerchantItemMultimediaOid.GetHashCode();
                if (this.OptionValueOid != null)
                    hashCode = hashCode * 59 + this.OptionValueOid.GetHashCode();
                if (this.PercentCostChange != null)
                    hashCode = hashCode * 59 + this.PercentCostChange.GetHashCode();
                if (this.TranslatedTextInstanceOid != null)
                    hashCode = hashCode * 59 + this.TranslatedTextInstanceOid.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.WeightChange != null)
                    hashCode = hashCode * 59 + this.WeightChange.GetHashCode();
                if (this.WeightChangePercent != null)
                    hashCode = hashCode * 59 + this.WeightChangePercent.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 1024.", new [] { "Value" });
            }

            yield break;
        }
    }

}
